FROM node:20-alpine AS deps
WORKDIR /app
COPY package*.json ./
RUN npm ci

FROM node:20-alpine AS build
WORKDIR /app
ARG NEXT_PUBLIC_API_URL
ARG API_PROXY_TARGET
ARG CORS_ALLOWED_ORIGIN
ARG NEXT_PUBLIC_API_MODE=live
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV API_PROXY_TARGET=$API_PROXY_TARGET
ENV CORS_ALLOWED_ORIGIN=$CORS_ALLOWED_ORIGIN
ENV NEXT_PUBLIC_API_MODE=$NEXT_PUBLIC_API_MODE
RUN : "${NEXT_PUBLIC_API_URL:?NEXT_PUBLIC_API_URL is required}" \
  && : "${NEXT_PUBLIC_API_MODE:?NEXT_PUBLIC_API_MODE is required}"

COPY --from=deps /app/node_modules ./node_modules
COPY . .
RUN npm run build

FROM node:20-alpine
WORKDIR /app
ARG NEXT_PUBLIC_API_URL
ARG API_PROXY_TARGET
ARG CORS_ALLOWED_ORIGIN
ARG NEXT_PUBLIC_API_MODE=live
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
ENV API_PROXY_TARGET=$API_PROXY_TARGET
ENV CORS_ALLOWED_ORIGIN=$CORS_ALLOWED_ORIGIN
ENV NEXT_PUBLIC_API_MODE=$NEXT_PUBLIC_API_MODE

ENV PORT=8081
COPY --from=build /app ./
RUN npm prune --omit=dev
COPY docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh
RUN addgroup -S app && adduser -S app -G app && chown -R app:app /app
USER app

EXPOSE 8081
ENTRYPOINT ["docker-entrypoint.sh"]
CMD ["npm","start"]
