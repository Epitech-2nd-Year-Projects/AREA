openapi: 3.0.3
info:
  title: AREA Server API
  version: 0.1.0
  license:
    name: Proprietary
    url: https://area-server.app/legal/terms
servers:
  - url: https://api.area-server.app
    description: Production
  - url: https://staging.area-server.app
    description: Staging
  - url: http://127.0.0.1:8080
    description: Local development
security:
  - sessionAuth: []
paths:
  /about.json:
    get:
      summary: Describe server capabilities
      operationId: getAbout
      tags:
        - metadata
      security: []
      responses:
        '200':
          description: About payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutResponse'
        '404':
          description: Server metadata unavailable
  /v1/users:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '202':
          description: Registration accepted, verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        '400':
          description: Invalid input
        '409':
          description: Email already registered
  /v1/auth/verify:
    post:
      summary: Verify email address and create a session
      operationId: verifyEmail
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified and session issued
          headers:
            Set-Cookie:
              description: Authentication session cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSessionResponse'
        '400':
          description: Invalid token
        '410':
          description: Token expired or already used
  /v1/auth/login:
    post:
      summary: Authenticate using email and password
      operationId: login
      tags:
        - auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication succeeded
          headers:
            Set-Cookie:
              description: Authentication session cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSessionResponse'
        '400':
          description: Invalid credentials
        '403':
          description: Account requires verification
  /v1/auth/logout:
    post:
      summary: Revoke the current session
      operationId: logout
      tags:
        - auth
      responses:
        '204':
          description: Logged out
        '401':
          description: Session missing or expired
  /v1/auth/me:
    get:
      summary: Retrieve the authenticated user profile
      operationId: getCurrentUser
      tags:
        - auth
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Session missing or expired
  /v1/oauth/{provider}/authorize:
    post:
      summary: Initiate OAuth authorization
      operationId: authorizeOAuth
      tags:
        - auth
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthAuthorizationRequest'
      responses:
        '200':
          description: Authorization parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthAuthorizationResponse'
        '400':
          description: Invalid request
        '404':
          description: Provider not configured
        '501':
          description: OAuth not configured
  /v1/oauth/{provider}/exchange:
    post:
      summary: Exchange authorization code for session
      operationId: exchangeOAuth
      tags:
        - auth
      parameters:
        - name: provider
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthExchangeRequest'
      responses:
        '200':
          description: Authentication succeeded
          headers:
            Set-Cookie:
              description: Authentication session cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSessionResponse'
        '400':
          description: Invalid payload
        '404':
          description: Provider not configured
        '501':
          description: OAuth not configured
        '502':
          description: Provider exchange failed
components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: area_session
      description: Session cookie issued after authentication.
  schemas:
    AboutResponse:
      type: object
      required: [client, server]
      properties:
        client:
          $ref: '#/components/schemas/AboutClient'
        server:
          $ref: '#/components/schemas/AboutServer'
    AboutClient:
      type: object
      required: [version]
      properties:
        version:
          type: string
          example: 1.0.0
    AboutServer:
      type: object
      required: [version, commit]
      properties:
        version:
          type: string
          example: 0.1.0
        commit:
          type: string
          example: a1b2c3d4
    RegisterUserRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
    RegisterUserResponse:
      type: object
      required: [userId]
      properties:
        userId:
          type: string
    VerifyEmailRequest:
      type: object
      required: [token]
      properties:
        token:
          type: string
    AuthSessionResponse:
      type: object
      required: [tokenType, expiresAt]
      properties:
        tokenType:
          type: string
          example: session
        expiresAt:
          type: string
          format: date-time
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    UserResponse:
      type: object
      required: [id, email]
      properties:
        id:
          type: string
        email:
          type: string
          format: email
    OAuthAuthorizationRequest:
      type: object
      properties:
        redirectUri:
          type: string
          format: uri
    OAuthAuthorizationResponse:
      type: object
      required: [authorizationUrl]
      properties:
        authorizationUrl:
          type: string
          format: uri
    OAuthExchangeRequest:
      type: object
      required: [code]
      properties:
        code:
          type: string
