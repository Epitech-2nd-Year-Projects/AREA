openapi: 3.0.3
info:
  title: AREA Server API
  version: 0.1.0
servers:
  - url: http://localhost:8080
paths:
  /about.json:
    get:
      summary: Describe server capabilities
      operationId: getAbout
      tags:
        - metadata
      responses:
        '200':
          description: About payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutResponse'
  /v1/users:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '202':
          description: Registration accepted, verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
        '400':
          description: Invalid input
        '409':
          description: Email already registered
  /v1/auth/verify:
    post:
      summary: Verify email address and create a session
      operationId: verifyEmail
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
      responses:
        '200':
          description: Email verified and session issued
          headers:
            Set-Cookie:
              description: Authentication session cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSessionResponse'
        '400':
          description: Invalid token
        '410':
          description: Token expired or already used
  /v1/auth/login:
    post:
      summary: Authenticate using email and password
      operationId: login
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Authentication succeeded
          headers:
            Set-Cookie:
              description: Authentication session cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSessionResponse'
        '400':
          description: Invalid credentials
        '403':
          description: Account requires verification
  /v1/auth/logout:
    post:
      summary: Revoke the current session
      operationId: logout
      tags:
        - auth
      responses:
        '204':
          description: Logged out
  /v1/auth/me:
    get:
      summary: Retrieve the authenticated user profile
      operationId: getCurrentUser
      tags:
        - auth
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Session missing or expired
components:
  schemas:
    AboutResponse:
      type: object
      required: [client, server]
      properties:
        client:
          $ref: '#/components/schemas/AboutClient'
        server:
          $ref: '#/components/schemas/AboutServer'
    AboutClient:
      type: object
      required: [host]
      properties:
        host:
          type: string
          description: IP address of the client issuing the request
    AboutServer:
      type: object
      required: [current_time, services]
      properties:
        current_time:
          type: integer
          format: int64
          description: Unix epoch timestamp
        services:
          type: array
          description: Services supported by the server
          items:
            $ref: '#/components/schemas/Service'
    Service:
      type: object
      required: [name, actions, reactions]
      properties:
        name:
          type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Component'
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/Component'
    Component:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
        description:
          type: string
    RegisterUserRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
    RegisterUserResponse:
      type: object
      required: [expires_at]
      properties:
        expires_at:
          type: string
          format: date-time
    VerifyEmailRequest:
      type: object
      required: [token]
      properties:
        token:
          type: string
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
    AuthSessionResponse:
      type: object
      required: [user]
      properties:
        user:
          $ref: '#/components/schemas/User'
    UserResponse:
      type: object
      required: [user]
      properties:
        user:
          $ref: '#/components/schemas/User'
    User:
      type: object
      required: [id, email, status, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_login_at:
          type: string
          format: date-time
          nullable: true
