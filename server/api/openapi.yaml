openapi: 3.0.3
info:
  title: AREA Server API
  version: 0.1.0
  description: |-
    The AREA Server API powers the automation platform that links actions and reactions across
    partner services. Use it to onboard users, issue secure sessions, and orchestrate OAuth-based
    integrations.

    ### Highlights
    - Account lifecycle endpoints for registration, verification, and session management.
    - OAuth helpers to initiate and complete third-party connector authorisations.
    - Metadata routes that expose the current backend build, feature flags, and compatibility notes.

    ### Getting started
    1. Create a user via `POST /v1/users` and complete the verification journey.
    2. Authenticate with either password credentials or OAuth connectors to obtain an `area_session` cookie.
    3. Call authenticated endpoints such as `GET /v1/auth/me` with the session cookie attached as a standard cookie header.

    Refer to the environment selector in the sidebar to toggle between production, staging, and local URLs.
    
    ### Rate limits & reliability
    - Default rate limit: **120 requests per minute** per authenticated session.
    - Burst tolerance: short spikes up to 300 requests per minute are accepted for 30 seconds.
    - All endpoints are reachable over HTTPS only; staging and local URLs are for testing purposes.

    ### Support & SLA
    - Incident response via the on-call rotation is available 24/7 through the status portal.
    - For non-urgent questions, open a ticket from the dashboard or email support@area-server.app.
    - Premium plans include dedicated Slack channels and twice-yearly architecture reviews.
  termsOfService: https://area-server.app/legal/terms
  contact:
    name: AREA Platform Support
    email: support@area-server.app
    url: https://area-server.app/support
  license:
    name: Proprietary
    url: https://area-server.app/legal/terms
  x-logo:
    url: https://area-server.app/assets/brand/area-logo-dark.svg
    altText: AREA mark
servers:
  - url: https://api.area-server.app
    description: Production
  - url: https://staging.area-server.app
    description: Staging
  - url: http://localhost:8080
    description: Local development
externalDocs:
  description: Design guidelines and integration handbook
  url: https://area-server.app/developers
tags:
  - name: metadata
    x-displayName: Platform metadata
    description: Inspect server capabilities, build information, and enabled features.
  - name: auth
    x-displayName: Authentication
    description: Manage user identities, sessions, and third-party authorisations.
  - name: catalog
    x-displayName: Service catalog
    description: Discover available action and reaction components.
  - name: areas
    x-displayName: Automations
    description: Manage AREA automations configured by users.
  - name: services
    x-displayName: Service integrations
    description: Inspect and manage third-party service subscriptions.
x-tagGroups:
  - name: Platform Overview
    tags:
      - metadata
  - name: Identity & Access
    tags:
      - auth
  - name: Automation Catalog
    tags:
      - catalog
  - name: Automations
    tags:
      - areas
  - name: Integrations
    tags:
      - services
security:
  - sessionAuth: []
paths:
  /about.json:
    get:
      summary: Describe server capabilities
      description: >-
        Retrieve build metadata that helps clients display the current backend version, commit
        fingerprint, and aligned client bundle information. The endpoint is public and can be used
        for health checks or support diagnostics.
      operationId: getAbout
      tags:
        - metadata
      security: []
      x-codeSamples:
        - lang: curl
          label: Quick check with curl
          source: |
            curl -s https://api.area-server.app/about.json
        - lang: javascript
          label: Fetch (browser)
          source: |
            fetch('https://api.area-server.app/about.json')
              .then((res) => res.json())
              .then((body) => console.log(body));
        - lang: python
          label: Python (requests)
          source: |
            import requests

            response = requests.get('https://api.area-server.app/about.json', timeout=10)
            response.raise_for_status()
            print(response.json())
      responses:
        '200':
          description: About payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AboutResponse'
        '404':
          description: Server metadata unavailable
  /v1/components:
    get:
      summary: List service components
      description: Retrieve automation components that can be used as actions or reactions
      operationId: listComponents
      tags:
        - catalog
      security:
        - sessionAuth: []
      parameters:
        - in: query
          name: kind
          schema:
            type: string
            enum: [action, reaction]
          description: Filter components by kind
        - in: query
          name: provider
          schema:
            type: string
          description: Filter components by provider slug (for example `google`)
      responses:
        '200':
          description: Component catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentListResponse'
        '400':
          description: Invalid request
        '401':
          description: Authentication required
        '500':
          description: Failed to load component catalog
  /v1/components/available:
    get:
      summary: List components available to the current user
      description: Retrieve catalog entries whose providers are subscribed by the current user
      operationId: listAvailableComponents
      tags:
        - catalog
      security:
        - sessionAuth: []
      parameters:
        - in: query
          name: kind
          schema:
            type: string
            enum: [action, reaction]
          description: Filter components by kind
        - in: query
          name: provider
          schema:
            type: string
          description: Filter components by provider slug (for example `google`)
      responses:
        '200':
          description: Component catalog filtered by subscriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComponentListResponse'
        '400':
          description: Invalid request
        '401':
          description: Authentication required
        '500':
          description: Failed to load component catalog
  /v1/users:
    post:
      summary: Register a new user
      description: |-
        Begins the email-first account creation workflow. Upon success the backend sends a
        verification message and returns a tracker ID so clients can surface progress updates.
      operationId: registerUser
      tags:
        - auth
      security: []
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST https://api.area-server.app/v1/users \
              -H 'Content-Type: application/json' \
              -d '{"email":"alex.martin@example.com","password":"Passw0rd!23"}'
        - lang: javascript
          label: JavaScript (fetch)
          source: |
            await fetch('https://api.area-server.app/v1/users', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                email: 'alex.martin@example.com',
                password: 'Passw0rd!23',
              }),
            });
        - lang: python
          label: Python (requests)
          source: |
            import requests

            payload = {
                "email": "alex.martin@example.com",
                "password": "Passw0rd!23",
            }
            response = requests.post(
                'https://api.area-server.app/v1/users', json=payload, timeout=10
            )
            response.raise_for_status()
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
            examples:
              standard:
                summary: Email-first registration
                value:
                  email: alex.martin@example.com
                  password: Passw0rd!23
      responses:
        '202':
          description: Registration accepted, verification email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserResponse'
              examples:
                accepted:
                  summary: Registration acknowledged
                  value:
                    userId: usr_01H9ZQF8E4XKC5V7QMMC1782X9
        '400':
          description: Invalid input
        '409':
          description: Email already registered
  /v1/auth/verify:
    post:
      summary: Verify email address and create a session
      description: |-
        Confirms the registration token from the verification email. Upon success the API issues
        an authenticated session and returns its metadata for client storage.
      operationId: verifyEmail
      tags:
        - auth
      security: []
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST https://api.area-server.app/v1/auth/verify \
              -H 'Content-Type: application/json' \
              -d '{"token":"01H9ZQF8E4XKC5V7QMMC1782X9"}' \
              -c cookies.txt
        - lang: javascript
          label: JavaScript (fetch)
          source: |
            await fetch('https://api.area-server.app/v1/auth/verify', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              credentials: 'include',
              body: JSON.stringify({ token: '01H9ZQF8E4XKC5V7QMMC1782X9' }),
            });
        - lang: python
          label: Python (requests)
          source: |
            import requests

            payload = {"token": "01H9ZQF8E4XKC5V7QMMC1782X9"}
            session = requests.Session()
            response = session.post(
                'https://api.area-server.app/v1/auth/verify', json=payload, timeout=10
            )
            response.raise_for_status()
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailRequest'
            examples:
              verification:
                summary: Verify a new registration
                value:
                  token: 01H9ZQF8E4XKC5V7QMMC1782X9
      responses:
        '200':
          description: Email verified and session issued
          headers:
            Set-Cookie:
              description: Authentication session cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSessionResponse'
              examples:
                session:
                  summary: Session metadata
                  value:
                    tokenType: session
                    expiresAt: 2024-04-18T11:32:00Z
        '400':
          description: Invalid token
        '410':
          description: Token expired or already used
  /v1/auth/login:
    post:
      summary: Authenticate using email and password
      description: |-
        Issues a session for existing users through credential authentication. The response mirrors
        the session cookie lifespan so clients can schedule silent renewals.
      operationId: login
      tags:
        - auth
      security: []
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST https://api.area-server.app/v1/auth/login \
              -H 'Content-Type: application/json' \
              -d '{"email":"alex.martin@example.com","password":"Passw0rd!23"}' \
              -c cookies.txt
        - lang: javascript
          label: JavaScript (fetch)
          source: |
            await fetch('https://api.area-server.app/v1/auth/login', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              credentials: 'include',
              body: JSON.stringify({
                email: 'alex.martin@example.com',
                password: 'Passw0rd!23',
              }),
            });
        - lang: python
          label: Python (requests)
          source: |
            import requests

            payload = {
                "email": "alex.martin@example.com",
                "password": "Passw0rd!23",
            }
            session = requests.Session()
            response = session.post(
                'https://api.area-server.app/v1/auth/login', json=payload, timeout=10
            )
            response.raise_for_status()
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              credentials:
                summary: Login with password
                value:
                  email: alex.martin@example.com
                  password: Passw0rd!23
      responses:
        '200':
          description: Authentication succeeded
          headers:
            Set-Cookie:
              description: Authentication session cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSessionResponse'
              examples:
                session:
                  summary: Session metadata
                  value:
                    tokenType: session
                    expiresAt: 2024-04-18T11:32:00Z
        '400':
          description: Invalid credentials
        '403':
          description: Account requires verification
  /v1/auth/logout:
    post:
      summary: Revoke the current session
      description: |-
        Invalidates the caller's active `area_session` cookie. Clients should call this when users
        explicitly sign out to ensure downstream triggers stop executing.
      operationId: logout
      tags:
        - auth
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST https://api.area-server.app/v1/auth/logout \
              -b cookies.txt
        - lang: javascript
          label: JavaScript (fetch)
          source: |
            await fetch('https://api.area-server.app/v1/auth/logout', {
              method: 'POST',
              credentials: 'include',
            });
        - lang: python
          label: Python (requests)
          source: |
            import requests

            session = requests.Session()
            session.get('https://api.area-server.app/about.json', timeout=10)  # prime cookies
            response = session.post('https://api.area-server.app/v1/auth/logout', timeout=10)
            response.raise_for_status()
      responses:
        '204':
          description: Logged out
        '401':
          description: Session missing or expired
  /v1/auth/me:
    get:
      summary: Retrieve the authenticated user profile
      description: |-
        Returns the canonical user profile associated with the supplied `area_session` cookie.
        Useful for bootstrapping client state after reloads.
      operationId: getCurrentUser
      tags:
        - auth
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl https://api.area-server.app/v1/auth/me -b cookies.txt
        - lang: javascript
          label: JavaScript (fetch)
          source: |
            const response = await fetch('https://api.area-server.app/v1/auth/me', {
              credentials: 'include',
            });
            const currentUser = await response.json();
        - lang: python
          label: Python (requests)
          source: |
            import requests

            session = requests.Session()
            response = session.get('https://api.area-server.app/v1/auth/me', timeout=10)
            response.raise_for_status()
            print(response.json())
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                profile:
                  summary: Authenticated user
                  value:
                    id: usr_01H9ZQF8E4XKC5V7QMMC1782X9
                    email: alex.martin@example.com
        '401':
          description: Session missing or expired
  /v1/auth/password:
    patch:
      summary: Change account password
      description: >-
        Updates the password of the currently authenticated user after validating the
        existing password.
      operationId: changePassword
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '204':
          description: Password updated
        '400':
          description: Invalid request or credentials
        '401':
          description: Authentication required
        '500':
          description: Failed to update password
  /v1/auth/email:
    patch:
      summary: Change account email
      description: >-
        Changes the primary email of the authenticated user and sends a fresh verification
        message to confirm the new address.
      operationId: changeEmail
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmailRequest'
      responses:
        '202':
          description: Verification email queued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailChangeResponse'
        '400':
          description: Invalid request or credentials
        '401':
          description: Authentication required
        '409':
          description: Email already in use
        '500':
          description: Failed to update email
  /v1/identities:
    get:
      summary: List connected identities
      description: Retrieve OAuth identities linked to the authenticated user
      operationId: listIdentities
      tags:
        - auth
      responses:
        '200':
          description: Linked identities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdentityListResponse'
        '401':
          description: Authentication required
        '500':
          description: Failed to list identities
  /v1/oauth/{provider}/authorize:
    post:
      summary: Initiate OAuth authorization
      description: |-
        Creates a provider-specific authorisation URL and state token. Invoke this endpoint before
        redirecting users to complete OAuth consent flows.
      operationId: authorizeOAuth
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/OAuthProvider'
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST https://api.area-server.app/v1/oauth/google/authorize \
              -H 'Content-Type: application/json' \
              -d '{"redirectUri":"https://app.area-server.app/oauth/complete"}'
        - lang: javascript
          label: JavaScript (fetch)
          source: |
            const response = await fetch('https://api.area-server.app/v1/oauth/google/authorize', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              credentials: 'include',
              body: JSON.stringify({
                redirectUri: 'https://app.area-server.app/oauth/complete',
              }),
            });
            const { authorizationUrl } = await response.json();
        - lang: python
          label: Python (requests)
          source: |
            import requests

            payload = {
                "redirectUri": "https://app.area-server.app/oauth/complete",
            }
            response = requests.post(
                'https://api.area-server.app/v1/oauth/google/authorize',
                json=payload,
                timeout=10,
            )
            response.raise_for_status()
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthAuthorizationRequest'
            examples:
              override-redirect:
                summary: Customise the redirect URI
                value:
                  redirectUri: https://app.area-server.app/oauth/complete
      responses:
        '200':
          description: Authorization parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthAuthorizationResponse'
              examples:
                jump-url:
                  summary: Consent URL to open in browser
                  value:
                    authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth?client_id=...
        '400':
          description: Invalid request
        '404':
          description: Provider not configured
        '501':
          description: OAuth not configured
  /v1/oauth/{provider}/exchange:
    post:
      summary: Exchange authorization code for session
      description: |-
        Completes the OAuth handshake by trading the provider-issued code for an AREA session. The
        backend validates the state token implicitly through the `area_session` cookie.
      operationId: exchangeOAuth
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/OAuthProvider'
      x-codeSamples:
        - lang: curl
          label: cURL
          source: |
            curl -X POST https://api.area-server.app/v1/oauth/google/exchange \
              -H 'Content-Type: application/json' \
              -d '{"code":"4/0AbCDefGhIjKlMnOpQrStUvWxYz"}' \
              -b cookies.txt -c cookies.txt
        - lang: javascript
          label: JavaScript (fetch)
          source: |
            await fetch('https://api.area-server.app/v1/oauth/google/exchange', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              credentials: 'include',
              body: JSON.stringify({ code: '4/0AbCDefGhIjKlMnOpQrStUvWxYz' }),
            });
        - lang: python
          label: Python (requests)
          source: |
            import requests

            payload = {"code": "4/0AbCDefGhIjKlMnOpQrStUvWxYz"}
            session = requests.Session()
            response = session.post(
                'https://api.area-server.app/v1/oauth/google/exchange',
                json=payload,
                timeout=10,
            )
            response.raise_for_status()
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthExchangeRequest'
            examples:
              standard:
                summary: Exchange the provider code
                value:
                  code: 4/0AbCDefGhIjKlMnOpQrStUvWxYz
      responses:
        '200':
          description: Authentication succeeded
          headers:
            Set-Cookie:
              description: Authentication session cookie
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSessionResponse'
              examples:
                session:
                  summary: Session metadata
                  value:
                    tokenType: session
                    expiresAt: 2024-04-18T11:32:00Z
        '400':
          description: Invalid payload
        '404':
          description: Provider not configured
        '501':
          description: OAuth not configured
        '502':
          description: Provider exchange failed
  /v1/services/{provider}/subscribe:
    post:
      summary: Subscribe current user to service provider
      description: |-
        Initiates a subscription for the authenticated user. For OAuth-backed providers this returns
        authorization parameters so the client can redirect the user; for providers that do not
        require OAuth the subscription is created immediately.
      operationId: subscribeService
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/OAuthProvider'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeServiceRequest'
      responses:
        '200':
          description: Subscription outcome
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribeServiceResponse'
        '400':
          description: Invalid request
        '401':
          description: Session missing or expired
        '404':
          description: Provider not configured
        '409':
          description: Identity already linked to another user
        '502':
          description: OAuth provider error
  /v1/services/{provider}/subscribe/exchange:
    post:
      summary: Complete service subscription exchange
      description: Completes the subscription after the user authorised the external provider.
      operationId: subscribeServiceExchange
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/OAuthProvider'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeExchangeRequest'
      responses:
        '200':
          description: Subscription recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribeExchangeResponse'
        '400':
          description: Invalid request
        '401':
          description: Session missing or expired
        '404':
          description: Provider not configured
        '409':
          description: Identity already linked to another user
        '502':
          description: OAuth provider error
  /v1/services:
    get:
      summary: List available service providers
      operationId: listServiceProviders
      tags:
        - services
      security: []
      responses:
        '200':
          description: Service providers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceProviderListResponse'
  /v1/services/subscriptions:
    get:
      summary: List service subscriptions for the current user
      operationId: listServiceSubscriptions
      tags:
        - services
      responses:
        '200':
          description: Active and historical subscriptions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionListResponse'
        '401':
          description: Authentication required
  /v1/services/{provider}/subscription:
    delete:
      summary: Revoke a service subscription
      operationId: unsubscribeService
      tags:
        - services
      parameters:
        - $ref: '#/components/parameters/OAuthProvider'
      responses:
        '204':
          description: Subscription revoked
        '401':
          description: Authentication required
        '404':
          description: Subscription not found
  /v1/areas:
    get:
      summary: List automations owned by the current user
      operationId: listAreas
      tags:
        - areas
      responses:
        '200':
          description: Collection of areas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAreasResponse'
    post:
      summary: Create a new automation for the current user
      operationId: createArea
      tags:
        - areas
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAreaRequest'
      responses:
        '201':
          description: Automation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
        '400':
          description: Invalid payload
        '401':
          description: Authentication required
  /v1/areas/{areaId}:
    delete:
      summary: Delete an automation owned by the current user
      operationId: deleteArea
      tags:
        - areas
      parameters:
        - name: areaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Automation deleted
        '401':
          description: Authentication required
        '403':
          description: Area owned by another user
        '404':
          description: Area not found
  /v1/areas/{areaId}/execute:
    post:
      summary: Execute area reactions immediately
      operationId: executeArea
      tags:
        - areas
      parameters:
        - name: areaId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '202':
          description: Execution accepted
        '401':
          description: Authentication required
        '403':
          description: Area owned by another user
        '404':
          description: Area not found
        '500':
          description: Failed to execute reactions
  /v1/admin/users/{userId}/password:
    patch:
      summary: Reset user password
      description: Allows administrators to set a new password for the specified user.
      operationId: adminResetUserPassword
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminResetPasswordRequest'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid request payload
        '401':
          description: Authentication required
        '403':
          description: Administrator privileges required
        '404':
          description: User not found
        '500':
          description: Failed to update password
  /v1/admin/users/{userId}/email:
    patch:
      summary: Update user email
      description: Allows administrators to change the primary email of a user and optionally trigger email verification.
      operationId: adminUpdateUserEmail
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateEmailRequest'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailChangeResponse'
        '400':
          description: Invalid request payload
        '401':
          description: Authentication required
        '403':
          description: Administrator privileges required
        '404':
          description: User not found
        '409':
          description: Email already in use
        '500':
          description: Failed to update email
  /v1/admin/users/{userId}/status:
    patch:
      summary: Update user status
      description: Lets administrators change the lifecycle status of a user (activate, suspend, delete, etc.).
      operationId: adminUpdateUserStatus
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUpdateStatusRequest'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid status value
        '401':
          description: Authentication required
        '403':
          description: Administrator privileges required
        '404':
          description: User not found
        '500':
          description: Failed to update status
components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: area_session
      description: Session cookie issued after authentication.
  schemas:
    AboutResponse:
      type: object
      description: Aggregated platform metadata combining frontend and backend build information.
      required: [client, server]
      properties:
        client:
          $ref: '#/components/schemas/AboutClient'
        server:
          $ref: '#/components/schemas/AboutServer'
    AboutClient:
      type: object
      required: [host]
      properties:
        host:
          type: string
          description: IP address of the client performing the HTTP request.
          example: 10.0.0.1
    AboutServer:
      type: object
      required: [currentTime, services]
      properties:
        currentTime:
          type: integer
          format: int64
          description: Current server time expressed as an Epoch Unix timestamp.
          example: 1712764470
        services:
          type: array
          description: List of services supported by the server.
          items:
            $ref: '#/components/schemas/AboutService'
    AboutService:
      type: object
      required: [name, actions, reactions]
      properties:
        name:
          type: string
          description: Service identifier.
          example: facebook
        actions:
          type: array
          description: Action components provided by the service.
          items:
            $ref: '#/components/schemas/AboutComponent'
        reactions:
          type: array
          description: Reaction components provided by the service.
          items:
            $ref: '#/components/schemas/AboutComponent'
    AboutComponent:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
          description: Identifier of the component.
          example: new_message_in_group
        description:
          type: string
          description: Human-readable description of the component.
          example: A new message is posted in the group
    RegisterUserRequest:
      type: object
      description: Payload used to enrol a new AREA account prior to email verification.
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          description: Primary email address that receives activation and security alerts.
          example: alex.martin@example.com
        password:
          type: string
          format: password
          minLength: 8
          description: Strong password that satisfies backend policy (min. 8 chars, letters + numbers).
          example: Passw0rd!23
      example:
        email: alex.martin@example.com
        password: Passw0rd!23
    RegisterUserResponse:
      type: object
      description: Confirmation payload indicating the asynchronous verification workflow started.
      required: [userId, expiresAt]
      properties:
        userId:
          type: string
          description: Unique identifier assigned to the provisioned user.
          example: usr_01H9ZQF8E4XKC5V7QMMC1782X9
        expiresAt:
          type: string
          format: date-time
          description: Expiration timestamp of the verification token.
          example: 2024-04-18T11:32:00Z
    VerifyEmailRequest:
      type: object
      description: Token issued in the verification email used to activate the account.
      required: [token]
      properties:
        token:
          type: string
          description: Single-use verification token issued as part of registration.
          example: 01H9ZQF8E4XKC5V7QMMC1782X9
      example:
        token: 01H9ZQF8E4XKC5V7QMMC1782X9
    AuthSessionResponse:
      type: object
      description: Session descriptor mirroring the cookie issued by the backend.
      required: [user]
      properties:
        tokenType:
          type: string
          example: session
          description: Grants semantics of the issued token; currently `session`.
        expiresAt:
          type: string
          format: date-time
          description: Expiration timestamp (UTC) aligning with the `area_session` cookie expiry.
        user:
          $ref: '#/components/schemas/User'
        sessionAuth:
          $ref: '#/components/schemas/SessionAuth'
      example:
        tokenType: session
        expiresAt: 2024-04-18T11:32:00Z
        user:
          id: usr_01H9ZQF8E4XKC5V7QMMC1782X9
          email: alex.martin@example.com
          status: active
          createdAt: 2024-04-01T10:00:00Z
          updatedAt: 2024-04-01T10:00:00Z
        sessionAuth:
          method: password
    LoginRequest:
      type: object
      description: Credential-based authentication payload.
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          description: Registered user email.
          example: alex.martin@example.com
        password:
          type: string
          format: password
          description: Plaintext password that satisfies the backend policy.
          example: Passw0rd!23
      example:
        email: alex.martin@example.com
        password: Passw0rd!23
    UserResponse:
      type: object
      description: Public representation of the authenticated user.
      required: [user]
      properties:
        user:
          $ref: '#/components/schemas/User'
        sessionAuth:
          $ref: '#/components/schemas/SessionAuth'
    User:
      type: object
      description: Detailed user payload returned by authenticated endpoints.
      required: [id, email, role, status, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier assigned to the user.
        email:
          type: string
          format: email
          description: Primary email associated with the account.
        role:
          type: string
          description: Permission level for the account (`member` or `admin`).
        status:
          type: string
          description: Lifecycle status (`pending`, `active`, etc.).
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp in UTC.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp of the latest account update in UTC.
        lastLoginAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp of the most recent successful login.
    SessionAuth:
      type: object
      description: Authentication metadata describing how the current session was issued.
      required: [method]
      properties:
        method:
          type: string
          enum: [password, oauth]
          description: Mechanism used to authenticate the session.
        provider:
          type: string
          nullable: true
          description: OAuth provider slug when `method` equals `oauth`.
    ChangePasswordRequest:
      type: object
      description: Payload to update the password of the current user.
      required: [currentPassword, newPassword]
      properties:
        currentPassword:
          type: string
          description: Current password used to confirm account ownership.
        newPassword:
          type: string
          description: Desired replacement password.
    ChangeEmailRequest:
      type: object
      description: Payload to update the email of the current user.
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          description: New primary email address.
        password:
          type: string
          description: Current password used to authorise the change.
    EmailChangeResponse:
      type: object
      description: Response returned after updating a user's email address.
      required: [user]
      properties:
        user:
          $ref: '#/components/schemas/User'
        verificationExpiresAt:
          type: string
          format: date-time
          nullable: true
          description: Expiration time of the newly issued verification token, when applicable.
    AdminResetPasswordRequest:
      type: object
      description: Payload for administrators to set a new user password.
      required: [newPassword]
      properties:
        newPassword:
          type: string
          description: Replacement password to assign to the user.
    AdminUpdateEmailRequest:
      type: object
      description: Payload for administrators to update a user's email address.
      required: [email]
      properties:
        email:
          type: string
          format: email
          description: New primary email address for the user.
        sendVerification:
          type: boolean
          description: Whether to issue a verification email for the new address.
          default: true
    AdminUpdateStatusRequest:
      type: object
      description: Payload for administrators to update a user's lifecycle status.
      required: [status]
      properties:
        status:
          type: string
          description: Target status (`pending`, `active`, `suspended`, or `deleted`).
    OAuthAuthorizationRequest:
      type: object
      description: Optional parameters forwarded to the configured OAuth provider.
      properties:
        redirectUri:
          type: string
          format: uri
          description: Explicit redirect URI to override the default callback registered with the provider.
          example: https://app.area-server.app/oauth/complete
        state:
          type: string
          description: Opaque value used to maintain state between the request and callback.
        prompt:
          type: string
          description: Provider-specific prompt parameter allowing the user experience to be tweaked.
        usePkce:
          type: boolean
          description: Flag indicating whether PKCE should be enforced.
        scopes:
          type: array
          description: Additional scopes to request from the provider.
          items:
            type: string
    OAuthAuthorizationResponse:
      type: object
      description: Provider authorisation metadata.
      required: [authorizationUrl]
      properties:
        authorizationUrl:
          type: string
          format: uri
          description: URL that the client must open to continue authorisation with the provider.
          example: https://accounts.google.com/o/oauth2/v2/auth?client_id=...
        state:
          type: string
          description: State echoed by the provider after authorisation.
        codeVerifier:
          type: string
          description: PKCE code verifier to persist until the exchange completes.
        codeChallenge:
          type: string
          description: PKCE code challenge derived from the verifier.
        codeChallengeMethod:
          type: string
          description: Method used to compute the PKCE code challenge.
    OAuthExchangeRequest:
      type: object
      description: Payload received after the provider redirect to complete the exchange.
      required: [code]
      properties:
        code:
          type: string
          description: One-time authorisation code issued by the provider.
          example: 4/0AbCDefGhIjKlMnOpQrStUvWxYz
        redirectUri:
          type: string
          format: uri
          description: Redirect URI supplied during the authorisation flow.
        codeVerifier:
          type: string
          description: PKCE code verifier required when the provider enforces PKCE.
        state:
          type: string
          description: Provider-issued state parameter used to prevent CSRF.
    CreateAreaRequest:
      type: object
      description: Payload used to create a new automation owned by the authenticated user.
      required: [name, action, reactions]
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 128
          description: Human readable name displayed across clients.
        description:
          type: string
          maxLength: 512
          description: Optional summary to distinguish this automation.
        action:
          $ref: '#/components/schemas/CreateAreaAction'
        reactions:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/CreateAreaReaction'
    CreateAreaAction:
      type: object
      description: Configuration of the action component that triggers the automation.
      required: [componentId]
      properties:
        componentId:
          type: string
          format: uuid
          description: Identifier of the action component selected from the catalog.
        name:
          type: string
          maxLength: 128
          description: Optional nickname to show in clients when displaying the component configuration.
        params:
          type: object
          additionalProperties: true
          description: Free-form JSON parameters persisted in the user component configuration.
    CreateAreaReaction:
      type: object
      description: Configuration of a reaction component executed when the automation fires.
      required: [componentId]
      properties:
        componentId:
          type: string
          format: uuid
          description: Identifier of the reaction component selected from the catalog.
        name:
          type: string
          maxLength: 128
          description: Optional nickname to show in clients when displaying the component configuration.
        params:
          type: object
          additionalProperties: true
          description: Free-form JSON parameters persisted in the user component configuration.
    Area:
      type: object
      description: Automation linking an action to one or more reactions for a user.
      required: [id, name, status, createdAt, updatedAt, reactions]
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier of the automation.
        name:
          type: string
          description: Display name chosen by the user.
        description:
          type: string
          nullable: true
          description: Optional summary supplied by the user.
        status:
          type: string
          description: Lifecycle status (`enabled`, `disabled`, or `archived`).
        createdAt:
          type: string
          format: date-time
          description: Timestamp (UTC) when the automation was created.
        updatedAt:
          type: string
          format: date-time
          description: Timestamp (UTC) of the last update.
        action:
          $ref: '#/components/schemas/AreaAction'
        reactions:
          type: array
          items:
            $ref: '#/components/schemas/AreaReaction'
    ListAreasResponse:
      type: object
      description: Collection wrapper for automations returned to the client.
      required: [areas]
      properties:
        areas:
          type: array
          items:
            $ref: '#/components/schemas/Area'
    AreaAction:
      type: object
      description: Action binding stored for an AREA automation.
      required: [configId, componentId, component]
      properties:
        configId:
          type: string
          format: uuid
          description: Identifier of the user component configuration backing the action.
        componentId:
          type: string
          format: uuid
          description: Identifier of the catalog component associated with the configuration.
        name:
          type: string
          nullable: true
          description: Optional nickname saved alongside the configuration.
        params:
          type: object
          additionalProperties: true
          description: Persisted configuration parameters supplied when creating the AREA.
        component:
          $ref: '#/components/schemas/ComponentSummary'
    AreaReaction:
      type: object
      description: Reaction binding stored for an AREA automation.
      required: [configId, componentId, component]
      properties:
        configId:
          type: string
          format: uuid
          description: Identifier of the user component configuration backing the reaction.
        componentId:
          type: string
          format: uuid
          description: Identifier of the catalog component associated with the configuration.
        name:
          type: string
          nullable: true
          description: Optional nickname saved alongside the configuration.
        params:
          type: object
          additionalProperties: true
          description: Persisted configuration parameters supplied when creating the AREA.
        component:
          $ref: '#/components/schemas/ComponentSummary'
    ComponentSummary:
      type: object
      description: Minimal catalog metadata required by clients to render a component reference.
      required: [id, kind, name, displayName, provider]
      properties:
        id:
          type: string
          format: uuid
        kind:
          type: string
          enum: [action, reaction]
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
          nullable: true
        metadata:
          type: object
          nullable: true
          additionalProperties: true
          description: Additional configuration metadata describing expected parameters.
        provider:
          $ref: '#/components/schemas/ServiceProviderSummary'
    ComponentListResponse:
      type: object
      required: [components]
      properties:
        components:
          type: array
          items:
            $ref: '#/components/schemas/ComponentSummary'
    ServiceProviderSummary:
      type: object
      description: Lightweight representation of a service provider exposing components.
      required: [id, name, displayName]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        displayName:
          type: string
    ServiceProviderDetail:
      type: object
      description: Detailed attributes of a service provider as stored in the catalog.
      required: [id, name, displayName, oauthType, enabled, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        displayName:
          type: string
        category:
          type: string
          nullable: true
        oauthType:
          type: string
          enum: [none, oauth2, apikey]
        enabled:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    ServiceProviderListResponse:
      type: object
      required: [providers]
      properties:
        providers:
          type: array
          items:
            $ref: '#/components/schemas/ServiceProviderDetail'
    IdentityListResponse:
      type: object
      required: [identities]
      properties:
        identities:
          type: array
          items:
            $ref: '#/components/schemas/IdentitySummary'
    IdentitySummary:
      type: object
      required: [id, provider, subject, connectedAt]
      properties:
        id:
          type: string
          format: uuid
        provider:
          type: string
        subject:
          type: string
        scopes:
          type: array
          items:
            type: string
        connectedAt:
          type: string
          format: date-time
        expiresAt:
          type: string
          format: date-time
          nullable: true
    SubscriptionSummary:
      type: object
      required: [id, providerId, status, createdAt]
      properties:
        id:
          type: string
          format: uuid
        providerId:
          type: string
          format: uuid
        identityId:
          type: string
          format: uuid
          nullable: true
        status:
          type: string
        scopeGrants:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    SubscribeServiceRequest:
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string
        redirectUri:
          type: string
        state:
          type: string
        prompt:
          type: string
        usePkce:
          type: boolean
    SubscribeServiceResponse:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [authorization_required, subscribed]
        authorization:
          $ref: '#/components/schemas/OAuthAuthorizationResponse'
        subscription:
          $ref: '#/components/schemas/SubscriptionSummary'
    SubscribeExchangeRequest:
      type: object
      required: [code]
      properties:
        code:
          type: string
        redirectUri:
          type: string
        codeVerifier:
          type: string
    SubscribeExchangeResponse:
      type: object
      required: [subscription]
      properties:
        subscription:
          $ref: '#/components/schemas/SubscriptionSummary'
        identity:
          $ref: '#/components/schemas/IdentitySummary'
    UserSubscription:
      type: object
      required: [subscription, provider]
      properties:
        subscription:
          $ref: '#/components/schemas/SubscriptionSummary'
        provider:
          $ref: '#/components/schemas/ServiceProviderDetail'
    SubscriptionListResponse:
      type: object
      required: [subscriptions]
      properties:
        subscriptions:
          type: array
          items:
            $ref: '#/components/schemas/UserSubscription'
  parameters:
    OAuthProvider:
      name: provider
      in: path
      required: true
      description: Slug corresponding to a configured OAuth provider (for example `google`, `github`).
      schema:
        type: string
      example: google
    UserId:
      name: userId
      in: path
      required: true
      description: Unique identifier of the user to manage.
      schema:
        type: string
        format: uuid
