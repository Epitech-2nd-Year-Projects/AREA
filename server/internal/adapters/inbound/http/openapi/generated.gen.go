// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
)

// Defines values for ComponentSummaryKind.
const (
	Action   ComponentSummaryKind = "action"
	Reaction ComponentSummaryKind = "reaction"
)

// AboutClient Current client bundle fingerprint exposed to public consumers.
type AboutClient struct {
	// Host IP address of the client performing the request.
	Host *string `json:"host,omitempty"`

	// Version Semantic version of the distributed web/mobile clients.
	Version string `json:"version"`
}

// AboutResponse Aggregated platform metadata combining frontend and backend build information.
type AboutResponse struct {
	// Client Current client bundle fingerprint exposed to public consumers.
	Client AboutClient `json:"client"`

	// Server Backend release information.
	Server AboutServer `json:"server"`
}

// AboutServer Backend release information.
type AboutServer struct {
	// Commit Git commit hash deployed to the environment.
	Commit string `json:"commit"`

	// CurrentTime Current server time expressed as an Epoch Unix timestamp.
	CurrentTime int64 `json:"current_time"`

	// Services Catalog of services exposed by the backend.
	Services []Service `json:"services"`

	// Version Semantic version of the backend deployment.
	Version string `json:"version"`
}

// Area Automation linking an action to one or more reactions for a user.
type Area struct {
	// Action Action binding stored for an AREA automation.
	Action *AreaAction `json:"action,omitempty"`

	// CreatedAt Timestamp (UTC) when the automation was created.
	CreatedAt time.Time `json:"created_at"`

	// Description Optional summary supplied by the user.
	Description *string `json:"description"`

	// Id Unique identifier of the automation.
	Id openapi_types.UUID `json:"id"`

	// Name Display name chosen by the user.
	Name string `json:"name"`

	// Status Lifecycle status (`enabled`, `disabled`, or `archived`).
	Status string `json:"status"`

	// UpdatedAt Timestamp (UTC) of the last update.
	UpdatedAt time.Time `json:"updated_at"`
}

// AreaAction Action binding stored for an AREA automation.
type AreaAction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"component_id"`

	// ConfigId Identifier of the user component configuration backing the action.
	ConfigId openapi_types.UUID `json:"config_id"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AuthSessionResponse Session descriptor mirroring the cookie issued by the backend.
type AuthSessionResponse struct {
	// ExpiresAt Expiration timestamp (UTC) aligning with the `area_session` cookie expiry.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// TokenType Grants semantics of the issued token; currently `session`.
	TokenType *string `json:"tokenType,omitempty"`

	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// Component Action or reaction component exposed by a service.
type Component struct {
	// Description Human-readable description of the component behaviour.
	Description string `json:"description"`

	// Name Component identifier.
	Name string `json:"name"`
}

// ComponentSummary Minimal catalog metadata required by clients to render a component reference.
type ComponentSummary struct {
	Description *string              `json:"description"`
	DisplayName string               `json:"display_name"`
	Id          openapi_types.UUID   `json:"id"`
	Kind        ComponentSummaryKind `json:"kind"`
	Name        string               `json:"name"`

	// Provider Lightweight representation of a service provider exposing components.
	Provider ServiceProviderSummary `json:"provider"`
}

// ComponentSummaryKind defines model for ComponentSummary.Kind.
type ComponentSummaryKind string

// CreateAreaAction Configuration of the action component that triggers the automation.
type CreateAreaAction struct {
	// ComponentId Identifier of the action component selected from the catalog.
	ComponentId openapi_types.UUID `json:"component_id"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaRequest Payload used to create a new automation owned by the authenticated user.
type CreateAreaRequest struct {
	// Action Configuration of the action component that triggers the automation.
	Action CreateAreaAction `json:"action"`

	// Description Optional summary to distinguish this automation.
	Description *string `json:"description,omitempty"`

	// Name Human readable name displayed across clients.
	Name string `json:"name"`
}

// ListAreasResponse Collection wrapper for automations returned to the client.
type ListAreasResponse struct {
	Areas []Area `json:"areas"`
}

// LoginRequest Credential-based authentication payload.
type LoginRequest struct {
	// Email Registered user email.
	Email openapi_types.Email `json:"email"`

	// Password Plaintext password that satisfies the backend policy.
	Password string `json:"password"`
}

// OAuthAuthorizationRequest Optional parameters forwarded to the configured OAuth provider.
type OAuthAuthorizationRequest struct {
	// Prompt Provider-specific prompt parameter allowing the user experience to be tweaked.
	Prompt *string `json:"prompt,omitempty"`

	// RedirectUri Explicit redirect URI to override the default callback registered with the provider.
	RedirectUri *string `json:"redirectUri,omitempty"`

	// Scopes Additional scopes to request from the provider.
	Scopes *[]string `json:"scopes,omitempty"`

	// State Opaque value used to maintain state between the request and callback.
	State *string `json:"state,omitempty"`

	// UsePkce Flag indicating whether PKCE should be enforced.
	UsePkce *bool `json:"usePkce,omitempty"`
}

// OAuthAuthorizationResponse Provider authorisation metadata.
type OAuthAuthorizationResponse struct {
	// AuthorizationUrl URL that the client must open to continue authorisation with the provider.
	AuthorizationUrl string `json:"authorizationUrl"`

	// CodeChallenge PKCE code challenge derived from the verifier.
	CodeChallenge *string `json:"codeChallenge,omitempty"`

	// CodeChallengeMethod Method used to compute the PKCE code challenge.
	CodeChallengeMethod *string `json:"codeChallengeMethod,omitempty"`

	// CodeVerifier PKCE code verifier to persist until the exchange completes.
	CodeVerifier *string `json:"codeVerifier,omitempty"`

	// State State echoed by the provider after authorisation.
	State *string `json:"state,omitempty"`
}

// OAuthExchangeRequest Payload received after the provider redirect to complete the exchange.
type OAuthExchangeRequest struct {
	// Code One-time authorisation code issued by the provider.
	Code string `json:"code"`

	// CodeVerifier PKCE code verifier required when the provider enforces PKCE.
	CodeVerifier *string `json:"code_verifier,omitempty"`

	// RedirectUri Redirect URI supplied during the authorisation flow.
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// State Provider-issued state parameter used to prevent CSRF.
	State *string `json:"state,omitempty"`
}

// RegisterUserRequest Payload used to enrol a new AREA account prior to email verification.
type RegisterUserRequest struct {
	// Email Primary email address that receives activation and security alerts.
	Email openapi_types.Email `json:"email"`

	// Password Strong password that satisfies backend policy (min. 8 chars, letters + numbers).
	Password string `json:"password"`
}

// RegisterUserResponse Confirmation payload indicating the asynchronous verification workflow started.
type RegisterUserResponse struct {
	// ExpiresAt Expiration timestamp of the verification token.
	ExpiresAt time.Time `json:"expires_at"`

	// UserId Unique identifier assigned to the provisioned user.
	UserId string `json:"userId"`
}

// Service Service published in the automation catalog.
type Service struct {
	Actions []Component `json:"actions"`

	// Name Identifier of the service.
	Name      string      `json:"name"`
	Reactions []Component `json:"reactions"`
}

// ServiceProviderSummary Lightweight representation of a service provider exposing components.
type ServiceProviderSummary struct {
	DisplayName string             `json:"display_name"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
}

// User Detailed user payload returned by authenticated endpoints.
type User struct {
	// CreatedAt Account creation timestamp in UTC.
	CreatedAt time.Time `json:"created_at"`

	// Email Primary email associated with the account.
	Email openapi_types.Email `json:"email"`

	// Id Unique identifier assigned to the user.
	Id openapi_types.UUID `json:"id"`

	// LastLoginAt Timestamp of the most recent successful login.
	LastLoginAt *time.Time `json:"last_login_at"`

	// Status Lifecycle status (`pending`, `active`, etc.).
	Status string `json:"status"`

	// UpdatedAt Timestamp of the latest account update in UTC.
	UpdatedAt time.Time `json:"updated_at"`
}

// UserResponse Public representation of the authenticated user.
type UserResponse struct {
	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// VerifyEmailRequest Token issued in the verification email used to activate the account.
type VerifyEmailRequest struct {
	// Token Single-use verification token issued as part of registration.
	Token string `json:"token"`
}

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// CreateAreaJSONRequestBody defines body for CreateArea for application/json ContentType.
type CreateAreaJSONRequestBody = CreateAreaRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// VerifyEmailJSONRequestBody defines body for VerifyEmail for application/json ContentType.
type VerifyEmailJSONRequestBody = VerifyEmailRequest

// AuthorizeOAuthJSONRequestBody defines body for AuthorizeOAuth for application/json ContentType.
type AuthorizeOAuthJSONRequestBody = OAuthAuthorizationRequest

// ExchangeOAuthJSONRequestBody defines body for ExchangeOAuth for application/json ContentType.
type ExchangeOAuthJSONRequestBody = OAuthExchangeRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(c *gin.Context)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(c *gin.Context)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(c *gin.Context)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(c *gin.Context)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(c *gin.Context)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(c *gin.Context)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(c *gin.Context)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(c *gin.Context, provider OAuthProvider)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(c *gin.Context, provider OAuthProvider)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAbout operation middleware
func (siw *ServerInterfaceWrapper) GetAbout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAbout(c)
}

// ListAreas operation middleware
func (siw *ServerInterfaceWrapper) ListAreas(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAreas(c)
}

// CreateArea operation middleware
func (siw *ServerInterfaceWrapper) CreateArea(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateArea(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUser(c)
}

// VerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifyEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyEmail(c)
}

// AuthorizeOAuth operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthorizeOAuth(c, provider)
}

// ExchangeOAuth operation middleware
func (siw *ServerInterfaceWrapper) ExchangeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeOAuth(c, provider)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/about.json", wrapper.GetAbout)
	router.GET(options.BaseURL+"/v1/areas", wrapper.ListAreas)
	router.POST(options.BaseURL+"/v1/areas", wrapper.CreateArea)
	router.POST(options.BaseURL+"/v1/auth/login", wrapper.Login)
	router.POST(options.BaseURL+"/v1/auth/logout", wrapper.Logout)
	router.GET(options.BaseURL+"/v1/auth/me", wrapper.GetCurrentUser)
	router.POST(options.BaseURL+"/v1/auth/verify", wrapper.VerifyEmail)
	router.POST(options.BaseURL+"/v1/oauth/:provider/authorize", wrapper.AuthorizeOAuth)
	router.POST(options.BaseURL+"/v1/oauth/:provider/exchange", wrapper.ExchangeOAuth)
	router.POST(options.BaseURL+"/v1/users", wrapper.RegisterUser)
}

type GetAboutRequestObject struct {
}

type GetAboutResponseObject interface {
	VisitGetAboutResponse(w http.ResponseWriter) error
}

type GetAbout200JSONResponse AboutResponse

func (response GetAbout200JSONResponse) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAbout404Response struct {
}

func (response GetAbout404Response) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListAreasRequestObject struct {
}

type ListAreasResponseObject interface {
	VisitListAreasResponse(w http.ResponseWriter) error
}

type ListAreas200JSONResponse ListAreasResponse

func (response ListAreas200JSONResponse) VisitListAreasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAreaRequestObject struct {
	Body *CreateAreaJSONRequestBody
}

type CreateAreaResponseObject interface {
	VisitCreateAreaResponse(w http.ResponseWriter) error
}

type CreateArea201JSONResponse Area

func (response CreateArea201JSONResponse) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArea400Response struct {
}

func (response CreateArea400Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateArea401Response struct {
}

func (response CreateArea401Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200JSONResponse struct {
	Body    AuthSessionResponse
	Headers Login200ResponseHeaders
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type Login400Response struct {
}

func (response Login400Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Login403Response struct {
}

func (response Login403Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401Response struct {
}

func (response Logout401Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse UserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401Response struct {
}

func (response GetCurrentUser401Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type VerifyEmailRequestObject struct {
	Body *VerifyEmailJSONRequestBody
}

type VerifyEmailResponseObject interface {
	VisitVerifyEmailResponse(w http.ResponseWriter) error
}

type VerifyEmail200ResponseHeaders struct {
	SetCookie string
}

type VerifyEmail200JSONResponse struct {
	Body    AuthSessionResponse
	Headers VerifyEmail200ResponseHeaders
}

func (response VerifyEmail200JSONResponse) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyEmail400Response struct {
}

func (response VerifyEmail400Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type VerifyEmail410Response struct {
}

func (response VerifyEmail410Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(410)
	return nil
}

type AuthorizeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *AuthorizeOAuthJSONRequestBody
}

type AuthorizeOAuthResponseObject interface {
	VisitAuthorizeOAuthResponse(w http.ResponseWriter) error
}

type AuthorizeOAuth200JSONResponse OAuthAuthorizationResponse

func (response AuthorizeOAuth200JSONResponse) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthorizeOAuth400Response struct {
}

func (response AuthorizeOAuth400Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthorizeOAuth404Response struct {
}

func (response AuthorizeOAuth404Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthorizeOAuth501Response struct {
}

func (response AuthorizeOAuth501Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *ExchangeOAuthJSONRequestBody
}

type ExchangeOAuthResponseObject interface {
	VisitExchangeOAuthResponse(w http.ResponseWriter) error
}

type ExchangeOAuth200ResponseHeaders struct {
	SetCookie string
}

type ExchangeOAuth200JSONResponse struct {
	Body    AuthSessionResponse
	Headers ExchangeOAuth200ResponseHeaders
}

func (response ExchangeOAuth200JSONResponse) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExchangeOAuth400Response struct {
}

func (response ExchangeOAuth400Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ExchangeOAuth404Response struct {
}

func (response ExchangeOAuth404Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExchangeOAuth501Response struct {
}

func (response ExchangeOAuth501Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuth502Response struct {
}

func (response ExchangeOAuth502Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(w http.ResponseWriter) error
}

type RegisterUser202JSONResponse RegisterUserResponse

func (response RegisterUser202JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser400Response struct {
}

func (response RegisterUser400Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterUser409Response struct {
}

func (response RegisterUser409Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(ctx context.Context, request GetAboutRequestObject) (GetAboutResponseObject, error)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(ctx context.Context, request ListAreasRequestObject) (ListAreasResponseObject, error)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(ctx context.Context, request CreateAreaRequestObject) (CreateAreaResponseObject, error)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(ctx context.Context, request VerifyEmailRequestObject) (VerifyEmailResponseObject, error)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(ctx context.Context, request AuthorizeOAuthRequestObject) (AuthorizeOAuthResponseObject, error)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(ctx context.Context, request ExchangeOAuthRequestObject) (ExchangeOAuthResponseObject, error)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAbout operation middleware
func (sh *strictHandler) GetAbout(ctx *gin.Context) {
	var request GetAboutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAbout(ctx, request.(GetAboutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAbout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAboutResponseObject); ok {
		if err := validResponse.VisitGetAboutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAreas operation middleware
func (sh *strictHandler) ListAreas(ctx *gin.Context) {
	var request ListAreasRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAreas(ctx, request.(ListAreasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAreas")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAreasResponseObject); ok {
		if err := validResponse.VisitListAreasResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArea operation middleware
func (sh *strictHandler) CreateArea(ctx *gin.Context) {
	var request CreateAreaRequestObject

	var body CreateAreaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArea(ctx, request.(CreateAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAreaResponseObject); ok {
		if err := validResponse.VisitCreateAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx *gin.Context) {
	var request LogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(ctx *gin.Context) {
	var request GetCurrentUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyEmail operation middleware
func (sh *strictHandler) VerifyEmail(ctx *gin.Context) {
	var request VerifyEmailRequestObject

	var body VerifyEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyEmail(ctx, request.(VerifyEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyEmailResponseObject); ok {
		if err := validResponse.VisitVerifyEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AuthorizeOAuth operation middleware
func (sh *strictHandler) AuthorizeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request AuthorizeOAuthRequestObject

	request.Provider = provider

	var body AuthorizeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthorizeOAuth(ctx, request.(AuthorizeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthorizeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AuthorizeOAuthResponseObject); ok {
		if err := validResponse.VisitAuthorizeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExchangeOAuth operation middleware
func (sh *strictHandler) ExchangeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request ExchangeOAuthRequestObject

	request.Provider = provider

	var body ExchangeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExchangeOAuth(ctx, request.(ExchangeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExchangeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExchangeOAuthResponseObject); ok {
		if err := validResponse.VisitExchangeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(ctx *gin.Context) {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx, request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		if err := validResponse.VisitRegisterUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
