// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
)

// Defines values for ComponentSummaryKind.
const (
	ComponentSummaryKindAction   ComponentSummaryKind = "action"
	ComponentSummaryKindReaction ComponentSummaryKind = "reaction"
)

// Defines values for ServiceProviderDetailOauthType.
const (
	Apikey ServiceProviderDetailOauthType = "apikey"
	None   ServiceProviderDetailOauthType = "none"
	Oauth2 ServiceProviderDetailOauthType = "oauth2"
)

// Defines values for SubscribeServiceResponseStatus.
const (
	AuthorizationRequired SubscribeServiceResponseStatus = "authorization_required"
	Subscribed            SubscribeServiceResponseStatus = "subscribed"
)

// Defines values for ListComponentsParamsKind.
const (
	ListComponentsParamsKindAction   ListComponentsParamsKind = "action"
	ListComponentsParamsKindReaction ListComponentsParamsKind = "reaction"
)

// Defines values for ListAvailableComponentsParamsKind.
const (
	Action   ListAvailableComponentsParamsKind = "action"
	Reaction ListAvailableComponentsParamsKind = "reaction"
)

// AboutClient defines model for AboutClient.
type AboutClient struct {
	// Host IP address of the client performing the HTTP request.
	Host string `json:"host"`
}

// AboutComponent defines model for AboutComponent.
type AboutComponent struct {
	// Description Human-readable description of the component.
	Description string `json:"description"`

	// Name Identifier of the component.
	Name string `json:"name"`
}

// AboutResponse Aggregated platform metadata combining frontend and backend build information.
type AboutResponse struct {
	Client AboutClient `json:"client"`
	Server AboutServer `json:"server"`
}

// AboutServer defines model for AboutServer.
type AboutServer struct {
	// CurrentTime Current server time expressed as an Epoch Unix timestamp.
	CurrentTime int64 `json:"currentTime"`

	// Services List of services supported by the server.
	Services []AboutService `json:"services"`
}

// AboutService defines model for AboutService.
type AboutService struct {
	// Actions Action components provided by the service.
	Actions []AboutComponent `json:"actions"`

	// Name Service identifier.
	Name string `json:"name"`

	// Reactions Reaction components provided by the service.
	Reactions []AboutComponent `json:"reactions"`
}

// AdminResetPasswordRequest Payload for administrators to set a new user password.
type AdminResetPasswordRequest struct {
	// NewPassword Replacement password to assign to the user.
	NewPassword string `json:"newPassword"`
}

// AdminUpdateEmailRequest Payload for administrators to update a user's email address.
type AdminUpdateEmailRequest struct {
	// Email New primary email address for the user.
	Email openapi_types.Email `json:"email"`

	// SendVerification Whether to issue a verification email for the new address.
	SendVerification *bool `json:"sendVerification,omitempty"`
}

// AdminUpdateStatusRequest Payload for administrators to update a user's lifecycle status.
type AdminUpdateStatusRequest struct {
	// Status Target status (`pending`, `active`, `suspended`, or `deleted`).
	Status string `json:"status"`
}

// Area Automation linking an action to one or more reactions for a user.
type Area struct {
	// Action Action binding stored for an AREA automation.
	Action *AreaAction `json:"action,omitempty"`

	// CreatedAt Timestamp (UTC) when the automation was created.
	CreatedAt time.Time `json:"createdAt"`

	// Description Optional summary supplied by the user.
	Description *string `json:"description"`

	// Id Unique identifier of the automation.
	Id openapi_types.UUID `json:"id"`

	// Name Display name chosen by the user.
	Name      string         `json:"name"`
	Reactions []AreaReaction `json:"reactions"`

	// Status Lifecycle status (`enabled`, `disabled`, or `archived`).
	Status string `json:"status"`

	// UpdatedAt Timestamp (UTC) of the last update.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AreaAction Action binding stored for an AREA automation.
type AreaAction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"componentId"`

	// ConfigId Identifier of the user component configuration backing the action.
	ConfigId openapi_types.UUID `json:"configId"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AreaReaction Reaction binding stored for an AREA automation.
type AreaReaction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"componentId"`

	// ConfigId Identifier of the user component configuration backing the reaction.
	ConfigId openapi_types.UUID `json:"configId"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AuthSessionResponse Session descriptor mirroring the cookie issued by the backend.
type AuthSessionResponse struct {
	// ExpiresAt Expiration timestamp (UTC) aligning with the `area_session` cookie expiry.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// TokenType Grants semantics of the issued token; currently `session`.
	TokenType *string `json:"tokenType,omitempty"`

	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// ChangeEmailRequest Payload to update the email of the current user.
type ChangeEmailRequest struct {
	// Email New primary email address.
	Email openapi_types.Email `json:"email"`

	// Password Current password used to authorise the change.
	Password string `json:"password"`
}

// ChangePasswordRequest Payload to update the password of the current user.
type ChangePasswordRequest struct {
	// CurrentPassword Current password used to confirm account ownership.
	CurrentPassword string `json:"currentPassword"`

	// NewPassword Desired replacement password.
	NewPassword string `json:"newPassword"`
}

// ComponentListResponse defines model for ComponentListResponse.
type ComponentListResponse struct {
	Components []ComponentSummary `json:"components"`
}

// ComponentSummary Minimal catalog metadata required by clients to render a component reference.
type ComponentSummary struct {
	Description *string              `json:"description"`
	DisplayName string               `json:"displayName"`
	Id          openapi_types.UUID   `json:"id"`
	Kind        ComponentSummaryKind `json:"kind"`

	// Metadata Additional configuration metadata describing expected parameters.
	Metadata *map[string]interface{} `json:"metadata"`
	Name     string                  `json:"name"`

	// Provider Lightweight representation of a service provider exposing components.
	Provider ServiceProviderSummary `json:"provider"`
}

// ComponentSummaryKind defines model for ComponentSummary.Kind.
type ComponentSummaryKind string

// CreateAreaAction Configuration of the action component that triggers the automation.
type CreateAreaAction struct {
	// ComponentId Identifier of the action component selected from the catalog.
	ComponentId openapi_types.UUID `json:"componentId"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaReaction Configuration of a reaction component executed when the automation fires.
type CreateAreaReaction struct {
	// ComponentId Identifier of the reaction component selected from the catalog.
	ComponentId openapi_types.UUID `json:"componentId"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaRequest Payload used to create a new automation owned by the authenticated user.
type CreateAreaRequest struct {
	// Action Configuration of the action component that triggers the automation.
	Action CreateAreaAction `json:"action"`

	// Description Optional summary to distinguish this automation.
	Description *string `json:"description,omitempty"`

	// Name Human readable name displayed across clients.
	Name      string               `json:"name"`
	Reactions []CreateAreaReaction `json:"reactions"`
}

// EmailChangeResponse Response returned after updating a user's email address.
type EmailChangeResponse struct {
	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`

	// VerificationExpiresAt Expiration time of the newly issued verification token, when applicable.
	VerificationExpiresAt *time.Time `json:"verificationExpiresAt"`
}

// IdentityListResponse defines model for IdentityListResponse.
type IdentityListResponse struct {
	Identities []IdentitySummary `json:"identities"`
}

// IdentitySummary defines model for IdentitySummary.
type IdentitySummary struct {
	ConnectedAt time.Time          `json:"connectedAt"`
	ExpiresAt   *time.Time         `json:"expiresAt"`
	Id          openapi_types.UUID `json:"id"`
	Provider    string             `json:"provider"`
	Scopes      *[]string          `json:"scopes,omitempty"`
	Subject     string             `json:"subject"`
}

// ListAreasResponse Collection wrapper for automations returned to the client.
type ListAreasResponse struct {
	Areas []Area `json:"areas"`
}

// LoginRequest Credential-based authentication payload.
type LoginRequest struct {
	// Email Registered user email.
	Email openapi_types.Email `json:"email"`

	// Password Plaintext password that satisfies the backend policy.
	Password string `json:"password"`
}

// OAuthAuthorizationRequest Optional parameters forwarded to the configured OAuth provider.
type OAuthAuthorizationRequest struct {
	// Prompt Provider-specific prompt parameter allowing the user experience to be tweaked.
	Prompt *string `json:"prompt,omitempty"`

	// RedirectUri Explicit redirect URI to override the default callback registered with the provider.
	RedirectUri *string `json:"redirectUri,omitempty"`

	// Scopes Additional scopes to request from the provider.
	Scopes *[]string `json:"scopes,omitempty"`

	// State Opaque value used to maintain state between the request and callback.
	State *string `json:"state,omitempty"`

	// UsePkce Flag indicating whether PKCE should be enforced.
	UsePkce *bool `json:"usePkce,omitempty"`
}

// OAuthAuthorizationResponse Provider authorisation metadata.
type OAuthAuthorizationResponse struct {
	// AuthorizationUrl URL that the client must open to continue authorisation with the provider.
	AuthorizationUrl string `json:"authorizationUrl"`

	// CodeChallenge PKCE code challenge derived from the verifier.
	CodeChallenge *string `json:"codeChallenge,omitempty"`

	// CodeChallengeMethod Method used to compute the PKCE code challenge.
	CodeChallengeMethod *string `json:"codeChallengeMethod,omitempty"`

	// CodeVerifier PKCE code verifier to persist until the exchange completes.
	CodeVerifier *string `json:"codeVerifier,omitempty"`

	// State State echoed by the provider after authorisation.
	State *string `json:"state,omitempty"`
}

// OAuthExchangeRequest Payload received after the provider redirect to complete the exchange.
type OAuthExchangeRequest struct {
	// Code One-time authorisation code issued by the provider.
	Code string `json:"code"`

	// CodeVerifier PKCE code verifier required when the provider enforces PKCE.
	CodeVerifier *string `json:"codeVerifier,omitempty"`

	// RedirectUri Redirect URI supplied during the authorisation flow.
	RedirectUri *string `json:"redirectUri,omitempty"`

	// State Provider-issued state parameter used to prevent CSRF.
	State *string `json:"state,omitempty"`
}

// RegisterUserRequest Payload used to enrol a new AREA account prior to email verification.
type RegisterUserRequest struct {
	// Email Primary email address that receives activation and security alerts.
	Email openapi_types.Email `json:"email"`

	// Password Strong password that satisfies backend policy (min. 8 chars, letters + numbers).
	Password string `json:"password"`
}

// RegisterUserResponse Confirmation payload indicating the asynchronous verification workflow started.
type RegisterUserResponse struct {
	// ExpiresAt Expiration timestamp of the verification token.
	ExpiresAt time.Time `json:"expiresAt"`

	// UserId Unique identifier assigned to the provisioned user.
	UserId string `json:"userId"`
}

// ServiceProviderDetail Detailed attributes of a service provider as stored in the catalog.
type ServiceProviderDetail struct {
	Category    *string                        `json:"category"`
	CreatedAt   time.Time                      `json:"createdAt"`
	DisplayName string                         `json:"displayName"`
	Enabled     bool                           `json:"enabled"`
	Id          openapi_types.UUID             `json:"id"`
	Name        string                         `json:"name"`
	OauthType   ServiceProviderDetailOauthType `json:"oauthType"`
	UpdatedAt   time.Time                      `json:"updatedAt"`
}

// ServiceProviderDetailOauthType defines model for ServiceProviderDetail.OauthType.
type ServiceProviderDetailOauthType string

// ServiceProviderListResponse defines model for ServiceProviderListResponse.
type ServiceProviderListResponse struct {
	Providers []ServiceProviderDetail `json:"providers"`
}

// ServiceProviderSummary Lightweight representation of a service provider exposing components.
type ServiceProviderSummary struct {
	DisplayName string             `json:"displayName"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
}

// SubscribeExchangeRequest defines model for SubscribeExchangeRequest.
type SubscribeExchangeRequest struct {
	Code         string  `json:"code"`
	CodeVerifier *string `json:"codeVerifier,omitempty"`
	RedirectUri  *string `json:"redirectUri,omitempty"`
}

// SubscribeExchangeResponse defines model for SubscribeExchangeResponse.
type SubscribeExchangeResponse struct {
	Identity     *IdentitySummary    `json:"identity,omitempty"`
	Subscription SubscriptionSummary `json:"subscription"`
}

// SubscribeServiceRequest defines model for SubscribeServiceRequest.
type SubscribeServiceRequest struct {
	Prompt      *string   `json:"prompt,omitempty"`
	RedirectUri *string   `json:"redirectUri,omitempty"`
	Scopes      *[]string `json:"scopes,omitempty"`
	State       *string   `json:"state,omitempty"`
	UsePkce     *bool     `json:"usePkce,omitempty"`
}

// SubscribeServiceResponse defines model for SubscribeServiceResponse.
type SubscribeServiceResponse struct {
	// Authorization Provider authorisation metadata.
	Authorization *OAuthAuthorizationResponse    `json:"authorization,omitempty"`
	Status        SubscribeServiceResponseStatus `json:"status"`
	Subscription  *SubscriptionSummary           `json:"subscription,omitempty"`
}

// SubscribeServiceResponseStatus defines model for SubscribeServiceResponse.Status.
type SubscribeServiceResponseStatus string

// SubscriptionListResponse defines model for SubscriptionListResponse.
type SubscriptionListResponse struct {
	Subscriptions []UserSubscription `json:"subscriptions"`
}

// SubscriptionSummary defines model for SubscriptionSummary.
type SubscriptionSummary struct {
	CreatedAt   time.Time           `json:"createdAt"`
	Id          openapi_types.UUID  `json:"id"`
	IdentityId  *openapi_types.UUID `json:"identityId"`
	ProviderId  openapi_types.UUID  `json:"providerId"`
	ScopeGrants *[]string           `json:"scopeGrants,omitempty"`
	Status      string              `json:"status"`
	UpdatedAt   *time.Time          `json:"updatedAt,omitempty"`
}

// User Detailed user payload returned by authenticated endpoints.
type User struct {
	// CreatedAt Account creation timestamp in UTC.
	CreatedAt time.Time `json:"createdAt"`

	// Email Primary email associated with the account.
	Email openapi_types.Email `json:"email"`

	// Id Unique identifier assigned to the user.
	Id openapi_types.UUID `json:"id"`

	// LastLoginAt Timestamp of the most recent successful login.
	LastLoginAt *time.Time `json:"lastLoginAt"`

	// Role Permission level for the account (`member` or `admin`).
	Role string `json:"role"`

	// Status Lifecycle status (`pending`, `active`, etc.).
	Status string `json:"status"`

	// UpdatedAt Timestamp of the latest account update in UTC.
	UpdatedAt time.Time `json:"updatedAt"`
}

// UserResponse Public representation of the authenticated user.
type UserResponse struct {
	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// UserSubscription defines model for UserSubscription.
type UserSubscription struct {
	// Provider Detailed attributes of a service provider as stored in the catalog.
	Provider     ServiceProviderDetail `json:"provider"`
	Subscription SubscriptionSummary   `json:"subscription"`
}

// VerifyEmailRequest Token issued in the verification email used to activate the account.
type VerifyEmailRequest struct {
	// Token Single-use verification token issued as part of registration.
	Token string `json:"token"`
}

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// UserId defines model for UserId.
type UserId = openapi_types.UUID

// ListComponentsParams defines parameters for ListComponents.
type ListComponentsParams struct {
	// Kind Filter components by kind
	Kind *ListComponentsParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// Provider Filter components by provider slug (for example `google`)
	Provider *string `form:"provider,omitempty" json:"provider,omitempty"`
}

// ListComponentsParamsKind defines parameters for ListComponents.
type ListComponentsParamsKind string

// ListAvailableComponentsParams defines parameters for ListAvailableComponents.
type ListAvailableComponentsParams struct {
	// Kind Filter components by kind
	Kind *ListAvailableComponentsParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// Provider Filter components by provider slug (for example `google`)
	Provider *string `form:"provider,omitempty" json:"provider,omitempty"`
}

// ListAvailableComponentsParamsKind defines parameters for ListAvailableComponents.
type ListAvailableComponentsParamsKind string

// AdminUpdateUserEmailJSONRequestBody defines body for AdminUpdateUserEmail for application/json ContentType.
type AdminUpdateUserEmailJSONRequestBody = AdminUpdateEmailRequest

// AdminResetUserPasswordJSONRequestBody defines body for AdminResetUserPassword for application/json ContentType.
type AdminResetUserPasswordJSONRequestBody = AdminResetPasswordRequest

// AdminUpdateUserStatusJSONRequestBody defines body for AdminUpdateUserStatus for application/json ContentType.
type AdminUpdateUserStatusJSONRequestBody = AdminUpdateStatusRequest

// CreateAreaJSONRequestBody defines body for CreateArea for application/json ContentType.
type CreateAreaJSONRequestBody = CreateAreaRequest

// ChangeEmailJSONRequestBody defines body for ChangeEmail for application/json ContentType.
type ChangeEmailJSONRequestBody = ChangeEmailRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// ChangePasswordJSONRequestBody defines body for ChangePassword for application/json ContentType.
type ChangePasswordJSONRequestBody = ChangePasswordRequest

// VerifyEmailJSONRequestBody defines body for VerifyEmail for application/json ContentType.
type VerifyEmailJSONRequestBody = VerifyEmailRequest

// AuthorizeOAuthJSONRequestBody defines body for AuthorizeOAuth for application/json ContentType.
type AuthorizeOAuthJSONRequestBody = OAuthAuthorizationRequest

// ExchangeOAuthJSONRequestBody defines body for ExchangeOAuth for application/json ContentType.
type ExchangeOAuthJSONRequestBody = OAuthExchangeRequest

// SubscribeServiceJSONRequestBody defines body for SubscribeService for application/json ContentType.
type SubscribeServiceJSONRequestBody = SubscribeServiceRequest

// SubscribeServiceExchangeJSONRequestBody defines body for SubscribeServiceExchange for application/json ContentType.
type SubscribeServiceExchangeJSONRequestBody = SubscribeExchangeRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(c *gin.Context)
	// Update user email
	// (PATCH /v1/admin/users/{userId}/email)
	AdminUpdateUserEmail(c *gin.Context, userId UserId)
	// Reset user password
	// (PATCH /v1/admin/users/{userId}/password)
	AdminResetUserPassword(c *gin.Context, userId UserId)
	// Update user status
	// (PATCH /v1/admin/users/{userId}/status)
	AdminUpdateUserStatus(c *gin.Context, userId UserId)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(c *gin.Context)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(c *gin.Context)
	// Delete an automation owned by the current user
	// (DELETE /v1/areas/{areaId})
	DeleteArea(c *gin.Context, areaId openapi_types.UUID)
	// Execute area reactions immediately
	// (POST /v1/areas/{areaId}/execute)
	ExecuteArea(c *gin.Context, areaId openapi_types.UUID)
	// Change account email
	// (PATCH /v1/auth/email)
	ChangeEmail(c *gin.Context)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(c *gin.Context)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(c *gin.Context)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(c *gin.Context)
	// Change account password
	// (PATCH /v1/auth/password)
	ChangePassword(c *gin.Context)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(c *gin.Context)
	// List service components
	// (GET /v1/components)
	ListComponents(c *gin.Context, params ListComponentsParams)
	// List components available to the current user
	// (GET /v1/components/available)
	ListAvailableComponents(c *gin.Context, params ListAvailableComponentsParams)
	// List connected identities
	// (GET /v1/identities)
	ListIdentities(c *gin.Context)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(c *gin.Context, provider OAuthProvider)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(c *gin.Context, provider OAuthProvider)
	// List available service providers
	// (GET /v1/services)
	ListServiceProviders(c *gin.Context)
	// List service subscriptions for the current user
	// (GET /v1/services/subscriptions)
	ListServiceSubscriptions(c *gin.Context)
	// Subscribe current user to service provider
	// (POST /v1/services/{provider}/subscribe)
	SubscribeService(c *gin.Context, provider OAuthProvider)
	// Complete service subscription exchange
	// (POST /v1/services/{provider}/subscribe/exchange)
	SubscribeServiceExchange(c *gin.Context, provider OAuthProvider)
	// Revoke a service subscription
	// (DELETE /v1/services/{provider}/subscription)
	UnsubscribeService(c *gin.Context, provider OAuthProvider)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAbout operation middleware
func (siw *ServerInterfaceWrapper) GetAbout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAbout(c)
}

// AdminUpdateUserEmail operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateUserEmail(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AdminUpdateUserEmail(c, userId)
}

// AdminResetUserPassword operation middleware
func (siw *ServerInterfaceWrapper) AdminResetUserPassword(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AdminResetUserPassword(c, userId)
}

// AdminUpdateUserStatus operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateUserStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AdminUpdateUserStatus(c, userId)
}

// ListAreas operation middleware
func (siw *ServerInterfaceWrapper) ListAreas(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAreas(c)
}

// CreateArea operation middleware
func (siw *ServerInterfaceWrapper) CreateArea(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateArea(c)
}

// DeleteArea operation middleware
func (siw *ServerInterfaceWrapper) DeleteArea(c *gin.Context) {

	var err error

	// ------------- Path parameter "areaId" -------------
	var areaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "areaId", c.Param("areaId"), &areaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter areaId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteArea(c, areaId)
}

// ExecuteArea operation middleware
func (siw *ServerInterfaceWrapper) ExecuteArea(c *gin.Context) {

	var err error

	// ------------- Path parameter "areaId" -------------
	var areaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "areaId", c.Param("areaId"), &areaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter areaId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExecuteArea(c, areaId)
}

// ChangeEmail operation middleware
func (siw *ServerInterfaceWrapper) ChangeEmail(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeEmail(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUser(c)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangePassword(c)
}

// VerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifyEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyEmail(c)
}

// ListComponents operation middleware
func (siw *ServerInterfaceWrapper) ListComponents(c *gin.Context) {

	var err error

	c.Set(SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListComponentsParams

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", c.Request.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListComponents(c, params)
}

// ListAvailableComponents operation middleware
func (siw *ServerInterfaceWrapper) ListAvailableComponents(c *gin.Context) {

	var err error

	c.Set(SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAvailableComponentsParams

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", c.Request.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAvailableComponents(c, params)
}

// ListIdentities operation middleware
func (siw *ServerInterfaceWrapper) ListIdentities(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListIdentities(c)
}

// AuthorizeOAuth operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthorizeOAuth(c, provider)
}

// ExchangeOAuth operation middleware
func (siw *ServerInterfaceWrapper) ExchangeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeOAuth(c, provider)
}

// ListServiceProviders operation middleware
func (siw *ServerInterfaceWrapper) ListServiceProviders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListServiceProviders(c)
}

// ListServiceSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) ListServiceSubscriptions(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListServiceSubscriptions(c)
}

// SubscribeService operation middleware
func (siw *ServerInterfaceWrapper) SubscribeService(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscribeService(c, provider)
}

// SubscribeServiceExchange operation middleware
func (siw *ServerInterfaceWrapper) SubscribeServiceExchange(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscribeServiceExchange(c, provider)
}

// UnsubscribeService operation middleware
func (siw *ServerInterfaceWrapper) UnsubscribeService(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UnsubscribeService(c, provider)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/about.json", wrapper.GetAbout)
	router.PATCH(options.BaseURL+"/v1/admin/users/:userId/email", wrapper.AdminUpdateUserEmail)
	router.PATCH(options.BaseURL+"/v1/admin/users/:userId/password", wrapper.AdminResetUserPassword)
	router.PATCH(options.BaseURL+"/v1/admin/users/:userId/status", wrapper.AdminUpdateUserStatus)
	router.GET(options.BaseURL+"/v1/areas", wrapper.ListAreas)
	router.POST(options.BaseURL+"/v1/areas", wrapper.CreateArea)
	router.DELETE(options.BaseURL+"/v1/areas/:areaId", wrapper.DeleteArea)
	router.POST(options.BaseURL+"/v1/areas/:areaId/execute", wrapper.ExecuteArea)
	router.PATCH(options.BaseURL+"/v1/auth/email", wrapper.ChangeEmail)
	router.POST(options.BaseURL+"/v1/auth/login", wrapper.Login)
	router.POST(options.BaseURL+"/v1/auth/logout", wrapper.Logout)
	router.GET(options.BaseURL+"/v1/auth/me", wrapper.GetCurrentUser)
	router.PATCH(options.BaseURL+"/v1/auth/password", wrapper.ChangePassword)
	router.POST(options.BaseURL+"/v1/auth/verify", wrapper.VerifyEmail)
	router.GET(options.BaseURL+"/v1/components", wrapper.ListComponents)
	router.GET(options.BaseURL+"/v1/components/available", wrapper.ListAvailableComponents)
	router.GET(options.BaseURL+"/v1/identities", wrapper.ListIdentities)
	router.POST(options.BaseURL+"/v1/oauth/:provider/authorize", wrapper.AuthorizeOAuth)
	router.POST(options.BaseURL+"/v1/oauth/:provider/exchange", wrapper.ExchangeOAuth)
	router.GET(options.BaseURL+"/v1/services", wrapper.ListServiceProviders)
	router.GET(options.BaseURL+"/v1/services/subscriptions", wrapper.ListServiceSubscriptions)
	router.POST(options.BaseURL+"/v1/services/:provider/subscribe", wrapper.SubscribeService)
	router.POST(options.BaseURL+"/v1/services/:provider/subscribe/exchange", wrapper.SubscribeServiceExchange)
	router.DELETE(options.BaseURL+"/v1/services/:provider/subscription", wrapper.UnsubscribeService)
	router.POST(options.BaseURL+"/v1/users", wrapper.RegisterUser)
}

type GetAboutRequestObject struct {
}

type GetAboutResponseObject interface {
	VisitGetAboutResponse(w http.ResponseWriter) error
}

type GetAbout200JSONResponse AboutResponse

func (response GetAbout200JSONResponse) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAbout404Response struct {
}

func (response GetAbout404Response) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AdminUpdateUserEmailRequestObject struct {
	UserId UserId `json:"userId"`
	Body   *AdminUpdateUserEmailJSONRequestBody
}

type AdminUpdateUserEmailResponseObject interface {
	VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error
}

type AdminUpdateUserEmail200JSONResponse EmailChangeResponse

func (response AdminUpdateUserEmail200JSONResponse) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminUpdateUserEmail400Response struct {
}

func (response AdminUpdateUserEmail400Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AdminUpdateUserEmail401Response struct {
}

func (response AdminUpdateUserEmail401Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminUpdateUserEmail403Response struct {
}

func (response AdminUpdateUserEmail403Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AdminUpdateUserEmail404Response struct {
}

func (response AdminUpdateUserEmail404Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AdminUpdateUserEmail409Response struct {
}

func (response AdminUpdateUserEmail409Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type AdminUpdateUserEmail500Response struct {
}

func (response AdminUpdateUserEmail500Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AdminResetUserPasswordRequestObject struct {
	UserId UserId `json:"userId"`
	Body   *AdminResetUserPasswordJSONRequestBody
}

type AdminResetUserPasswordResponseObject interface {
	VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error
}

type AdminResetUserPassword200JSONResponse UserResponse

func (response AdminResetUserPassword200JSONResponse) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminResetUserPassword400Response struct {
}

func (response AdminResetUserPassword400Response) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AdminResetUserPassword401Response struct {
}

func (response AdminResetUserPassword401Response) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminResetUserPassword403Response struct {
}

func (response AdminResetUserPassword403Response) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AdminResetUserPassword404Response struct {
}

func (response AdminResetUserPassword404Response) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AdminResetUserPassword500Response struct {
}

func (response AdminResetUserPassword500Response) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AdminUpdateUserStatusRequestObject struct {
	UserId UserId `json:"userId"`
	Body   *AdminUpdateUserStatusJSONRequestBody
}

type AdminUpdateUserStatusResponseObject interface {
	VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error
}

type AdminUpdateUserStatus200JSONResponse UserResponse

func (response AdminUpdateUserStatus200JSONResponse) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminUpdateUserStatus400Response struct {
}

func (response AdminUpdateUserStatus400Response) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AdminUpdateUserStatus401Response struct {
}

func (response AdminUpdateUserStatus401Response) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminUpdateUserStatus403Response struct {
}

func (response AdminUpdateUserStatus403Response) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AdminUpdateUserStatus404Response struct {
}

func (response AdminUpdateUserStatus404Response) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AdminUpdateUserStatus500Response struct {
}

func (response AdminUpdateUserStatus500Response) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ListAreasRequestObject struct {
}

type ListAreasResponseObject interface {
	VisitListAreasResponse(w http.ResponseWriter) error
}

type ListAreas200JSONResponse ListAreasResponse

func (response ListAreas200JSONResponse) VisitListAreasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAreaRequestObject struct {
	Body *CreateAreaJSONRequestBody
}

type CreateAreaResponseObject interface {
	VisitCreateAreaResponse(w http.ResponseWriter) error
}

type CreateArea201JSONResponse Area

func (response CreateArea201JSONResponse) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArea400Response struct {
}

func (response CreateArea400Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateArea401Response struct {
}

func (response CreateArea401Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteAreaRequestObject struct {
	AreaId openapi_types.UUID `json:"areaId"`
}

type DeleteAreaResponseObject interface {
	VisitDeleteAreaResponse(w http.ResponseWriter) error
}

type DeleteArea204Response struct {
}

func (response DeleteArea204Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteArea401Response struct {
}

func (response DeleteArea401Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteArea403Response struct {
}

func (response DeleteArea403Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteArea404Response struct {
}

func (response DeleteArea404Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExecuteAreaRequestObject struct {
	AreaId openapi_types.UUID `json:"areaId"`
}

type ExecuteAreaResponseObject interface {
	VisitExecuteAreaResponse(w http.ResponseWriter) error
}

type ExecuteArea202Response struct {
}

func (response ExecuteArea202Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type ExecuteArea401Response struct {
}

func (response ExecuteArea401Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ExecuteArea403Response struct {
}

func (response ExecuteArea403Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type ExecuteArea404Response struct {
}

func (response ExecuteArea404Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExecuteArea500Response struct {
}

func (response ExecuteArea500Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ChangeEmailRequestObject struct {
	Body *ChangeEmailJSONRequestBody
}

type ChangeEmailResponseObject interface {
	VisitChangeEmailResponse(w http.ResponseWriter) error
}

type ChangeEmail202JSONResponse EmailChangeResponse

func (response ChangeEmail202JSONResponse) VisitChangeEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type ChangeEmail400Response struct {
}

func (response ChangeEmail400Response) VisitChangeEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ChangeEmail401Response struct {
}

func (response ChangeEmail401Response) VisitChangeEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ChangeEmail409Response struct {
}

func (response ChangeEmail409Response) VisitChangeEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type ChangeEmail500Response struct {
}

func (response ChangeEmail500Response) VisitChangeEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200JSONResponse struct {
	Body    AuthSessionResponse
	Headers Login200ResponseHeaders
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type Login400Response struct {
}

func (response Login400Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Login403Response struct {
}

func (response Login403Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401Response struct {
}

func (response Logout401Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse UserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401Response struct {
}

func (response GetCurrentUser401Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ChangePasswordRequestObject struct {
	Body *ChangePasswordJSONRequestBody
}

type ChangePasswordResponseObject interface {
	VisitChangePasswordResponse(w http.ResponseWriter) error
}

type ChangePassword204Response struct {
}

func (response ChangePassword204Response) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ChangePassword400Response struct {
}

func (response ChangePassword400Response) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ChangePassword401Response struct {
}

func (response ChangePassword401Response) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ChangePassword500Response struct {
}

func (response ChangePassword500Response) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type VerifyEmailRequestObject struct {
	Body *VerifyEmailJSONRequestBody
}

type VerifyEmailResponseObject interface {
	VisitVerifyEmailResponse(w http.ResponseWriter) error
}

type VerifyEmail200ResponseHeaders struct {
	SetCookie string
}

type VerifyEmail200JSONResponse struct {
	Body    AuthSessionResponse
	Headers VerifyEmail200ResponseHeaders
}

func (response VerifyEmail200JSONResponse) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyEmail400Response struct {
}

func (response VerifyEmail400Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type VerifyEmail410Response struct {
}

func (response VerifyEmail410Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(410)
	return nil
}

type ListComponentsRequestObject struct {
	Params ListComponentsParams
}

type ListComponentsResponseObject interface {
	VisitListComponentsResponse(w http.ResponseWriter) error
}

type ListComponents200JSONResponse ComponentListResponse

func (response ListComponents200JSONResponse) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListComponents400Response struct {
}

func (response ListComponents400Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListComponents401Response struct {
}

func (response ListComponents401Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListComponents500Response struct {
}

func (response ListComponents500Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ListAvailableComponentsRequestObject struct {
	Params ListAvailableComponentsParams
}

type ListAvailableComponentsResponseObject interface {
	VisitListAvailableComponentsResponse(w http.ResponseWriter) error
}

type ListAvailableComponents200JSONResponse ComponentListResponse

func (response ListAvailableComponents200JSONResponse) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAvailableComponents400Response struct {
}

func (response ListAvailableComponents400Response) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListAvailableComponents401Response struct {
}

func (response ListAvailableComponents401Response) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListAvailableComponents500Response struct {
}

func (response ListAvailableComponents500Response) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ListIdentitiesRequestObject struct {
}

type ListIdentitiesResponseObject interface {
	VisitListIdentitiesResponse(w http.ResponseWriter) error
}

type ListIdentities200JSONResponse IdentityListResponse

func (response ListIdentities200JSONResponse) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListIdentities401Response struct {
}

func (response ListIdentities401Response) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListIdentities500Response struct {
}

func (response ListIdentities500Response) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AuthorizeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *AuthorizeOAuthJSONRequestBody
}

type AuthorizeOAuthResponseObject interface {
	VisitAuthorizeOAuthResponse(w http.ResponseWriter) error
}

type AuthorizeOAuth200JSONResponse OAuthAuthorizationResponse

func (response AuthorizeOAuth200JSONResponse) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthorizeOAuth400Response struct {
}

func (response AuthorizeOAuth400Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthorizeOAuth404Response struct {
}

func (response AuthorizeOAuth404Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthorizeOAuth501Response struct {
}

func (response AuthorizeOAuth501Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *ExchangeOAuthJSONRequestBody
}

type ExchangeOAuthResponseObject interface {
	VisitExchangeOAuthResponse(w http.ResponseWriter) error
}

type ExchangeOAuth200ResponseHeaders struct {
	SetCookie string
}

type ExchangeOAuth200JSONResponse struct {
	Body    AuthSessionResponse
	Headers ExchangeOAuth200ResponseHeaders
}

func (response ExchangeOAuth200JSONResponse) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExchangeOAuth400Response struct {
}

func (response ExchangeOAuth400Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ExchangeOAuth404Response struct {
}

func (response ExchangeOAuth404Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExchangeOAuth501Response struct {
}

func (response ExchangeOAuth501Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuth502Response struct {
}

func (response ExchangeOAuth502Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type ListServiceProvidersRequestObject struct {
}

type ListServiceProvidersResponseObject interface {
	VisitListServiceProvidersResponse(w http.ResponseWriter) error
}

type ListServiceProviders200JSONResponse ServiceProviderListResponse

func (response ListServiceProviders200JSONResponse) VisitListServiceProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListServiceSubscriptionsRequestObject struct {
}

type ListServiceSubscriptionsResponseObject interface {
	VisitListServiceSubscriptionsResponse(w http.ResponseWriter) error
}

type ListServiceSubscriptions200JSONResponse SubscriptionListResponse

func (response ListServiceSubscriptions200JSONResponse) VisitListServiceSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListServiceSubscriptions401Response struct {
}

func (response ListServiceSubscriptions401Response) VisitListServiceSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SubscribeServiceRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *SubscribeServiceJSONRequestBody
}

type SubscribeServiceResponseObject interface {
	VisitSubscribeServiceResponse(w http.ResponseWriter) error
}

type SubscribeService200JSONResponse SubscribeServiceResponse

func (response SubscribeService200JSONResponse) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubscribeService400Response struct {
}

func (response SubscribeService400Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SubscribeService401Response struct {
}

func (response SubscribeService401Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SubscribeService404Response struct {
}

func (response SubscribeService404Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SubscribeService409Response struct {
}

func (response SubscribeService409Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type SubscribeService502Response struct {
}

func (response SubscribeService502Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type SubscribeServiceExchangeRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *SubscribeServiceExchangeJSONRequestBody
}

type SubscribeServiceExchangeResponseObject interface {
	VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error
}

type SubscribeServiceExchange200JSONResponse SubscribeExchangeResponse

func (response SubscribeServiceExchange200JSONResponse) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubscribeServiceExchange400Response struct {
}

func (response SubscribeServiceExchange400Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SubscribeServiceExchange401Response struct {
}

func (response SubscribeServiceExchange401Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SubscribeServiceExchange404Response struct {
}

func (response SubscribeServiceExchange404Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SubscribeServiceExchange409Response struct {
}

func (response SubscribeServiceExchange409Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type SubscribeServiceExchange502Response struct {
}

func (response SubscribeServiceExchange502Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type UnsubscribeServiceRequestObject struct {
	Provider OAuthProvider `json:"provider"`
}

type UnsubscribeServiceResponseObject interface {
	VisitUnsubscribeServiceResponse(w http.ResponseWriter) error
}

type UnsubscribeService204Response struct {
}

func (response UnsubscribeService204Response) VisitUnsubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UnsubscribeService401Response struct {
}

func (response UnsubscribeService401Response) VisitUnsubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UnsubscribeService404Response struct {
}

func (response UnsubscribeService404Response) VisitUnsubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(w http.ResponseWriter) error
}

type RegisterUser202JSONResponse RegisterUserResponse

func (response RegisterUser202JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser400Response struct {
}

func (response RegisterUser400Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterUser409Response struct {
}

func (response RegisterUser409Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(ctx context.Context, request GetAboutRequestObject) (GetAboutResponseObject, error)
	// Update user email
	// (PATCH /v1/admin/users/{userId}/email)
	AdminUpdateUserEmail(ctx context.Context, request AdminUpdateUserEmailRequestObject) (AdminUpdateUserEmailResponseObject, error)
	// Reset user password
	// (PATCH /v1/admin/users/{userId}/password)
	AdminResetUserPassword(ctx context.Context, request AdminResetUserPasswordRequestObject) (AdminResetUserPasswordResponseObject, error)
	// Update user status
	// (PATCH /v1/admin/users/{userId}/status)
	AdminUpdateUserStatus(ctx context.Context, request AdminUpdateUserStatusRequestObject) (AdminUpdateUserStatusResponseObject, error)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(ctx context.Context, request ListAreasRequestObject) (ListAreasResponseObject, error)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(ctx context.Context, request CreateAreaRequestObject) (CreateAreaResponseObject, error)
	// Delete an automation owned by the current user
	// (DELETE /v1/areas/{areaId})
	DeleteArea(ctx context.Context, request DeleteAreaRequestObject) (DeleteAreaResponseObject, error)
	// Execute area reactions immediately
	// (POST /v1/areas/{areaId}/execute)
	ExecuteArea(ctx context.Context, request ExecuteAreaRequestObject) (ExecuteAreaResponseObject, error)
	// Change account email
	// (PATCH /v1/auth/email)
	ChangeEmail(ctx context.Context, request ChangeEmailRequestObject) (ChangeEmailResponseObject, error)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Change account password
	// (PATCH /v1/auth/password)
	ChangePassword(ctx context.Context, request ChangePasswordRequestObject) (ChangePasswordResponseObject, error)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(ctx context.Context, request VerifyEmailRequestObject) (VerifyEmailResponseObject, error)
	// List service components
	// (GET /v1/components)
	ListComponents(ctx context.Context, request ListComponentsRequestObject) (ListComponentsResponseObject, error)
	// List components available to the current user
	// (GET /v1/components/available)
	ListAvailableComponents(ctx context.Context, request ListAvailableComponentsRequestObject) (ListAvailableComponentsResponseObject, error)
	// List connected identities
	// (GET /v1/identities)
	ListIdentities(ctx context.Context, request ListIdentitiesRequestObject) (ListIdentitiesResponseObject, error)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(ctx context.Context, request AuthorizeOAuthRequestObject) (AuthorizeOAuthResponseObject, error)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(ctx context.Context, request ExchangeOAuthRequestObject) (ExchangeOAuthResponseObject, error)
	// List available service providers
	// (GET /v1/services)
	ListServiceProviders(ctx context.Context, request ListServiceProvidersRequestObject) (ListServiceProvidersResponseObject, error)
	// List service subscriptions for the current user
	// (GET /v1/services/subscriptions)
	ListServiceSubscriptions(ctx context.Context, request ListServiceSubscriptionsRequestObject) (ListServiceSubscriptionsResponseObject, error)
	// Subscribe current user to service provider
	// (POST /v1/services/{provider}/subscribe)
	SubscribeService(ctx context.Context, request SubscribeServiceRequestObject) (SubscribeServiceResponseObject, error)
	// Complete service subscription exchange
	// (POST /v1/services/{provider}/subscribe/exchange)
	SubscribeServiceExchange(ctx context.Context, request SubscribeServiceExchangeRequestObject) (SubscribeServiceExchangeResponseObject, error)
	// Revoke a service subscription
	// (DELETE /v1/services/{provider}/subscription)
	UnsubscribeService(ctx context.Context, request UnsubscribeServiceRequestObject) (UnsubscribeServiceResponseObject, error)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAbout operation middleware
func (sh *strictHandler) GetAbout(ctx *gin.Context) {
	var request GetAboutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAbout(ctx, request.(GetAboutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAbout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAboutResponseObject); ok {
		if err := validResponse.VisitGetAboutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminUpdateUserEmail operation middleware
func (sh *strictHandler) AdminUpdateUserEmail(ctx *gin.Context, userId UserId) {
	var request AdminUpdateUserEmailRequestObject

	request.UserId = userId

	var body AdminUpdateUserEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminUpdateUserEmail(ctx, request.(AdminUpdateUserEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminUpdateUserEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AdminUpdateUserEmailResponseObject); ok {
		if err := validResponse.VisitAdminUpdateUserEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminResetUserPassword operation middleware
func (sh *strictHandler) AdminResetUserPassword(ctx *gin.Context, userId UserId) {
	var request AdminResetUserPasswordRequestObject

	request.UserId = userId

	var body AdminResetUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminResetUserPassword(ctx, request.(AdminResetUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminResetUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AdminResetUserPasswordResponseObject); ok {
		if err := validResponse.VisitAdminResetUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminUpdateUserStatus operation middleware
func (sh *strictHandler) AdminUpdateUserStatus(ctx *gin.Context, userId UserId) {
	var request AdminUpdateUserStatusRequestObject

	request.UserId = userId

	var body AdminUpdateUserStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminUpdateUserStatus(ctx, request.(AdminUpdateUserStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminUpdateUserStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AdminUpdateUserStatusResponseObject); ok {
		if err := validResponse.VisitAdminUpdateUserStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAreas operation middleware
func (sh *strictHandler) ListAreas(ctx *gin.Context) {
	var request ListAreasRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAreas(ctx, request.(ListAreasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAreas")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAreasResponseObject); ok {
		if err := validResponse.VisitListAreasResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArea operation middleware
func (sh *strictHandler) CreateArea(ctx *gin.Context) {
	var request CreateAreaRequestObject

	var body CreateAreaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArea(ctx, request.(CreateAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAreaResponseObject); ok {
		if err := validResponse.VisitCreateAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteArea operation middleware
func (sh *strictHandler) DeleteArea(ctx *gin.Context, areaId openapi_types.UUID) {
	var request DeleteAreaRequestObject

	request.AreaId = areaId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArea(ctx, request.(DeleteAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAreaResponseObject); ok {
		if err := validResponse.VisitDeleteAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteArea operation middleware
func (sh *strictHandler) ExecuteArea(ctx *gin.Context, areaId openapi_types.UUID) {
	var request ExecuteAreaRequestObject

	request.AreaId = areaId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteArea(ctx, request.(ExecuteAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExecuteAreaResponseObject); ok {
		if err := validResponse.VisitExecuteAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeEmail operation middleware
func (sh *strictHandler) ChangeEmail(ctx *gin.Context) {
	var request ChangeEmailRequestObject

	var body ChangeEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeEmail(ctx, request.(ChangeEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeEmailResponseObject); ok {
		if err := validResponse.VisitChangeEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx *gin.Context) {
	var request LogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(ctx *gin.Context) {
	var request GetCurrentUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangePassword operation middleware
func (sh *strictHandler) ChangePassword(ctx *gin.Context) {
	var request ChangePasswordRequestObject

	var body ChangePasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangePassword(ctx, request.(ChangePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangePassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangePasswordResponseObject); ok {
		if err := validResponse.VisitChangePasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyEmail operation middleware
func (sh *strictHandler) VerifyEmail(ctx *gin.Context) {
	var request VerifyEmailRequestObject

	var body VerifyEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyEmail(ctx, request.(VerifyEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyEmailResponseObject); ok {
		if err := validResponse.VisitVerifyEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListComponents operation middleware
func (sh *strictHandler) ListComponents(ctx *gin.Context, params ListComponentsParams) {
	var request ListComponentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListComponents(ctx, request.(ListComponentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListComponents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListComponentsResponseObject); ok {
		if err := validResponse.VisitListComponentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAvailableComponents operation middleware
func (sh *strictHandler) ListAvailableComponents(ctx *gin.Context, params ListAvailableComponentsParams) {
	var request ListAvailableComponentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAvailableComponents(ctx, request.(ListAvailableComponentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAvailableComponents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAvailableComponentsResponseObject); ok {
		if err := validResponse.VisitListAvailableComponentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListIdentities operation middleware
func (sh *strictHandler) ListIdentities(ctx *gin.Context) {
	var request ListIdentitiesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListIdentities(ctx, request.(ListIdentitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListIdentities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListIdentitiesResponseObject); ok {
		if err := validResponse.VisitListIdentitiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AuthorizeOAuth operation middleware
func (sh *strictHandler) AuthorizeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request AuthorizeOAuthRequestObject

	request.Provider = provider

	var body AuthorizeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthorizeOAuth(ctx, request.(AuthorizeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthorizeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AuthorizeOAuthResponseObject); ok {
		if err := validResponse.VisitAuthorizeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExchangeOAuth operation middleware
func (sh *strictHandler) ExchangeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request ExchangeOAuthRequestObject

	request.Provider = provider

	var body ExchangeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExchangeOAuth(ctx, request.(ExchangeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExchangeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExchangeOAuthResponseObject); ok {
		if err := validResponse.VisitExchangeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListServiceProviders operation middleware
func (sh *strictHandler) ListServiceProviders(ctx *gin.Context) {
	var request ListServiceProvidersRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListServiceProviders(ctx, request.(ListServiceProvidersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListServiceProviders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListServiceProvidersResponseObject); ok {
		if err := validResponse.VisitListServiceProvidersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListServiceSubscriptions operation middleware
func (sh *strictHandler) ListServiceSubscriptions(ctx *gin.Context) {
	var request ListServiceSubscriptionsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListServiceSubscriptions(ctx, request.(ListServiceSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListServiceSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListServiceSubscriptionsResponseObject); ok {
		if err := validResponse.VisitListServiceSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscribeService operation middleware
func (sh *strictHandler) SubscribeService(ctx *gin.Context, provider OAuthProvider) {
	var request SubscribeServiceRequestObject

	request.Provider = provider

	var body SubscribeServiceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscribeService(ctx, request.(SubscribeServiceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscribeService")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeServiceResponseObject); ok {
		if err := validResponse.VisitSubscribeServiceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscribeServiceExchange operation middleware
func (sh *strictHandler) SubscribeServiceExchange(ctx *gin.Context, provider OAuthProvider) {
	var request SubscribeServiceExchangeRequestObject

	request.Provider = provider

	var body SubscribeServiceExchangeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscribeServiceExchange(ctx, request.(SubscribeServiceExchangeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscribeServiceExchange")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeServiceExchangeResponseObject); ok {
		if err := validResponse.VisitSubscribeServiceExchangeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnsubscribeService operation middleware
func (sh *strictHandler) UnsubscribeService(ctx *gin.Context, provider OAuthProvider) {
	var request UnsubscribeServiceRequestObject

	request.Provider = provider

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UnsubscribeService(ctx, request.(UnsubscribeServiceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnsubscribeService")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UnsubscribeServiceResponseObject); ok {
		if err := validResponse.VisitUnsubscribeServiceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(ctx *gin.Context) {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx, request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		if err := validResponse.VisitRegisterUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
