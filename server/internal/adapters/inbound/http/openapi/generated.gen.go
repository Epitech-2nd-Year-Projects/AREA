// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
)

// Defines values for ComponentSummaryKind.
const (
	Action   ComponentSummaryKind = "action"
	Reaction ComponentSummaryKind = "reaction"
)

// AboutClient defines model for AboutClient.
type AboutClient struct {
	// Host IP address of the client performing the HTTP request.
	Host string `json:"host"`
}

// AboutComponent defines model for AboutComponent.
type AboutComponent struct {
	// Description Human-readable description of the component.
	Description string `json:"description"`

	// Name Identifier of the component.
	Name string `json:"name"`
}

// AboutResponse About payload mirroring the G-DEV-500 specification.
type AboutResponse struct {
	Client AboutClient `json:"client"`
	Server AboutServer `json:"server"`
}

// AboutServer defines model for AboutServer.
type AboutServer struct {
	// CurrentTime Current server time expressed as an Epoch Unix timestamp.
	CurrentTime int64 `json:"current_time"`

	// Services List of services supported by the server.
	Services []AboutService `json:"services"`
}

// AboutService defines model for AboutService.
type AboutService struct {
	// Actions Action components provided by the service.
	Actions []AboutComponent `json:"actions"`

	// Name Service identifier.
	Name string `json:"name"`

	// Reactions Reaction components provided by the service.
	Reactions []AboutComponent `json:"reactions"`
}

// Area Automation linking an action to one or more reactions for a user.
type Area struct {
	// Action Action binding stored for an AREA automation.
	Action *AreaAction `json:"action,omitempty"`

	// CreatedAt Timestamp (UTC) when the automation was created.
	CreatedAt time.Time `json:"created_at"`

	// Description Optional summary supplied by the user.
	Description *string `json:"description"`

	// Id Unique identifier of the automation.
	Id openapi_types.UUID `json:"id"`

	// Name Display name chosen by the user.
	Name      string         `json:"name"`
	Reactions []AreaReaction `json:"reactions"`

	// Status Lifecycle status (`enabled`, `disabled`, or `archived`).
	Status string `json:"status"`

	// UpdatedAt Timestamp (UTC) of the last update.
	UpdatedAt time.Time `json:"updated_at"`
}

// AreaAction Action binding stored for an AREA automation.
type AreaAction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"component_id"`

	// ConfigId Identifier of the user component configuration backing the action.
	ConfigId openapi_types.UUID `json:"config_id"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AreaReaction Reaction binding stored for an AREA automation.
type AreaReaction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"component_id"`

	// ConfigId Identifier of the user component configuration backing the reaction.
	ConfigId openapi_types.UUID `json:"config_id"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AuthSessionResponse Session descriptor mirroring the cookie issued by the backend.
type AuthSessionResponse struct {
	// ExpiresAt Expiration timestamp (UTC) aligning with the `area_session` cookie expiry.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// TokenType Grants semantics of the issued token; currently `session`.
	TokenType *string `json:"tokenType,omitempty"`

	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// ComponentSummary Minimal catalog metadata required by clients to render a component reference.
type ComponentSummary struct {
	Description *string              `json:"description"`
	DisplayName string               `json:"display_name"`
	Id          openapi_types.UUID   `json:"id"`
	Kind        ComponentSummaryKind `json:"kind"`
	Name        string               `json:"name"`

	// Provider Lightweight representation of a service provider exposing components.
	Provider ServiceProviderSummary `json:"provider"`
}

// ComponentSummaryKind defines model for ComponentSummary.Kind.
type ComponentSummaryKind string

// CreateAreaAction Configuration of the action component that triggers the automation.
type CreateAreaAction struct {
	// ComponentId Identifier of the action component selected from the catalog.
	ComponentId openapi_types.UUID `json:"component_id"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaReaction Configuration of a reaction component executed when the automation fires.
type CreateAreaReaction struct {
	// ComponentId Identifier of the reaction component selected from the catalog.
	ComponentId openapi_types.UUID `json:"component_id"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaRequest Payload used to create a new automation owned by the authenticated user.
type CreateAreaRequest struct {
	// Action Configuration of the action component that triggers the automation.
	Action CreateAreaAction `json:"action"`

	// Description Optional summary to distinguish this automation.
	Description *string `json:"description,omitempty"`

	// Name Human readable name displayed across clients.
	Name      string               `json:"name"`
	Reactions []CreateAreaReaction `json:"reactions"`
}

// ListAreasResponse Collection wrapper for automations returned to the client.
type ListAreasResponse struct {
	Areas []Area `json:"areas"`
}

// LoginRequest Credential-based authentication payload.
type LoginRequest struct {
	// Email Registered user email.
	Email openapi_types.Email `json:"email"`

	// Password Plaintext password that satisfies the backend policy.
	Password string `json:"password"`
}

// OAuthAuthorizationRequest Optional parameters forwarded to the configured OAuth provider.
type OAuthAuthorizationRequest struct {
	// Prompt Provider-specific prompt parameter allowing the user experience to be tweaked.
	Prompt *string `json:"prompt,omitempty"`

	// RedirectUri Explicit redirect URI to override the default callback registered with the provider.
	RedirectUri *string `json:"redirectUri,omitempty"`

	// Scopes Additional scopes to request from the provider.
	Scopes *[]string `json:"scopes,omitempty"`

	// State Opaque value used to maintain state between the request and callback.
	State *string `json:"state,omitempty"`

	// UsePkce Flag indicating whether PKCE should be enforced.
	UsePkce *bool `json:"usePkce,omitempty"`
}

// OAuthAuthorizationResponse Provider authorisation metadata.
type OAuthAuthorizationResponse struct {
	// AuthorizationUrl URL that the client must open to continue authorisation with the provider.
	AuthorizationUrl string `json:"authorizationUrl"`

	// CodeChallenge PKCE code challenge derived from the verifier.
	CodeChallenge *string `json:"codeChallenge,omitempty"`

	// CodeChallengeMethod Method used to compute the PKCE code challenge.
	CodeChallengeMethod *string `json:"codeChallengeMethod,omitempty"`

	// CodeVerifier PKCE code verifier to persist until the exchange completes.
	CodeVerifier *string `json:"codeVerifier,omitempty"`

	// State State echoed by the provider after authorisation.
	State *string `json:"state,omitempty"`
}

// OAuthExchangeRequest Payload received after the provider redirect to complete the exchange.
type OAuthExchangeRequest struct {
	// Code One-time authorisation code issued by the provider.
	Code string `json:"code"`

	// CodeVerifier PKCE code verifier required when the provider enforces PKCE.
	CodeVerifier *string `json:"code_verifier,omitempty"`

	// RedirectUri Redirect URI supplied during the authorisation flow.
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// State Provider-issued state parameter used to prevent CSRF.
	State *string `json:"state,omitempty"`
}

// RegisterUserRequest Payload used to enrol a new AREA account prior to email verification.
type RegisterUserRequest struct {
	// Email Primary email address that receives activation and security alerts.
	Email openapi_types.Email `json:"email"`

	// Password Strong password that satisfies backend policy (min. 8 chars, letters + numbers).
	Password string `json:"password"`
}

// RegisterUserResponse Confirmation payload indicating the asynchronous verification workflow started.
type RegisterUserResponse struct {
	// ExpiresAt Expiration timestamp of the verification token.
	ExpiresAt time.Time `json:"expires_at"`

	// UserId Unique identifier assigned to the provisioned user.
	UserId string `json:"userId"`
}

// ServiceProviderSummary Lightweight representation of a service provider exposing components.
type ServiceProviderSummary struct {
	DisplayName string             `json:"display_name"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
}

// User Detailed user payload returned by authenticated endpoints.
type User struct {
	// CreatedAt Account creation timestamp in UTC.
	CreatedAt time.Time `json:"created_at"`

	// Email Primary email associated with the account.
	Email openapi_types.Email `json:"email"`

	// Id Unique identifier assigned to the user.
	Id openapi_types.UUID `json:"id"`

	// LastLoginAt Timestamp of the most recent successful login.
	LastLoginAt *time.Time `json:"last_login_at"`

	// Status Lifecycle status (`pending`, `active`, etc.).
	Status string `json:"status"`

	// UpdatedAt Timestamp of the latest account update in UTC.
	UpdatedAt time.Time `json:"updated_at"`
}

// UserResponse Public representation of the authenticated user.
type UserResponse struct {
	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// VerifyEmailRequest Token issued in the verification email used to activate the account.
type VerifyEmailRequest struct {
	// Token Single-use verification token issued as part of registration.
	Token string `json:"token"`
}

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// CreateAreaJSONRequestBody defines body for CreateArea for application/json ContentType.
type CreateAreaJSONRequestBody = CreateAreaRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// VerifyEmailJSONRequestBody defines body for VerifyEmail for application/json ContentType.
type VerifyEmailJSONRequestBody = VerifyEmailRequest

// AuthorizeOAuthJSONRequestBody defines body for AuthorizeOAuth for application/json ContentType.
type AuthorizeOAuthJSONRequestBody = OAuthAuthorizationRequest

// ExchangeOAuthJSONRequestBody defines body for ExchangeOAuth for application/json ContentType.
type ExchangeOAuthJSONRequestBody = OAuthExchangeRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(c *gin.Context)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(c *gin.Context)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(c *gin.Context)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(c *gin.Context)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(c *gin.Context)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(c *gin.Context)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(c *gin.Context)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(c *gin.Context, provider OAuthProvider)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(c *gin.Context, provider OAuthProvider)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAbout operation middleware
func (siw *ServerInterfaceWrapper) GetAbout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAbout(c)
}

// ListAreas operation middleware
func (siw *ServerInterfaceWrapper) ListAreas(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAreas(c)
}

// CreateArea operation middleware
func (siw *ServerInterfaceWrapper) CreateArea(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateArea(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUser(c)
}

// VerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifyEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyEmail(c)
}

// AuthorizeOAuth operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthorizeOAuth(c, provider)
}

// ExchangeOAuth operation middleware
func (siw *ServerInterfaceWrapper) ExchangeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeOAuth(c, provider)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/about.json", wrapper.GetAbout)
	router.GET(options.BaseURL+"/v1/areas", wrapper.ListAreas)
	router.POST(options.BaseURL+"/v1/areas", wrapper.CreateArea)
	router.POST(options.BaseURL+"/v1/auth/login", wrapper.Login)
	router.POST(options.BaseURL+"/v1/auth/logout", wrapper.Logout)
	router.GET(options.BaseURL+"/v1/auth/me", wrapper.GetCurrentUser)
	router.POST(options.BaseURL+"/v1/auth/verify", wrapper.VerifyEmail)
	router.POST(options.BaseURL+"/v1/oauth/:provider/authorize", wrapper.AuthorizeOAuth)
	router.POST(options.BaseURL+"/v1/oauth/:provider/exchange", wrapper.ExchangeOAuth)
	router.POST(options.BaseURL+"/v1/users", wrapper.RegisterUser)
}

type GetAboutRequestObject struct {
}

type GetAboutResponseObject interface {
	VisitGetAboutResponse(w http.ResponseWriter) error
}

type GetAbout200JSONResponse AboutResponse

func (response GetAbout200JSONResponse) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAbout404Response struct {
}

func (response GetAbout404Response) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListAreasRequestObject struct {
}

type ListAreasResponseObject interface {
	VisitListAreasResponse(w http.ResponseWriter) error
}

type ListAreas200JSONResponse ListAreasResponse

func (response ListAreas200JSONResponse) VisitListAreasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAreaRequestObject struct {
	Body *CreateAreaJSONRequestBody
}

type CreateAreaResponseObject interface {
	VisitCreateAreaResponse(w http.ResponseWriter) error
}

type CreateArea201JSONResponse Area

func (response CreateArea201JSONResponse) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArea400Response struct {
}

func (response CreateArea400Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateArea401Response struct {
}

func (response CreateArea401Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200JSONResponse struct {
	Body    AuthSessionResponse
	Headers Login200ResponseHeaders
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type Login400Response struct {
}

func (response Login400Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Login403Response struct {
}

func (response Login403Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401Response struct {
}

func (response Logout401Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse UserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401Response struct {
}

func (response GetCurrentUser401Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type VerifyEmailRequestObject struct {
	Body *VerifyEmailJSONRequestBody
}

type VerifyEmailResponseObject interface {
	VisitVerifyEmailResponse(w http.ResponseWriter) error
}

type VerifyEmail200ResponseHeaders struct {
	SetCookie string
}

type VerifyEmail200JSONResponse struct {
	Body    AuthSessionResponse
	Headers VerifyEmail200ResponseHeaders
}

func (response VerifyEmail200JSONResponse) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyEmail400Response struct {
}

func (response VerifyEmail400Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type VerifyEmail410Response struct {
}

func (response VerifyEmail410Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(410)
	return nil
}

type AuthorizeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *AuthorizeOAuthJSONRequestBody
}

type AuthorizeOAuthResponseObject interface {
	VisitAuthorizeOAuthResponse(w http.ResponseWriter) error
}

type AuthorizeOAuth200JSONResponse OAuthAuthorizationResponse

func (response AuthorizeOAuth200JSONResponse) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthorizeOAuth400Response struct {
}

func (response AuthorizeOAuth400Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthorizeOAuth404Response struct {
}

func (response AuthorizeOAuth404Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthorizeOAuth501Response struct {
}

func (response AuthorizeOAuth501Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *ExchangeOAuthJSONRequestBody
}

type ExchangeOAuthResponseObject interface {
	VisitExchangeOAuthResponse(w http.ResponseWriter) error
}

type ExchangeOAuth200ResponseHeaders struct {
	SetCookie string
}

type ExchangeOAuth200JSONResponse struct {
	Body    AuthSessionResponse
	Headers ExchangeOAuth200ResponseHeaders
}

func (response ExchangeOAuth200JSONResponse) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExchangeOAuth400Response struct {
}

func (response ExchangeOAuth400Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ExchangeOAuth404Response struct {
}

func (response ExchangeOAuth404Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExchangeOAuth501Response struct {
}

func (response ExchangeOAuth501Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuth502Response struct {
}

func (response ExchangeOAuth502Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(w http.ResponseWriter) error
}

type RegisterUser202JSONResponse RegisterUserResponse

func (response RegisterUser202JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser400Response struct {
}

func (response RegisterUser400Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterUser409Response struct {
}

func (response RegisterUser409Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(ctx context.Context, request GetAboutRequestObject) (GetAboutResponseObject, error)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(ctx context.Context, request ListAreasRequestObject) (ListAreasResponseObject, error)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(ctx context.Context, request CreateAreaRequestObject) (CreateAreaResponseObject, error)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(ctx context.Context, request VerifyEmailRequestObject) (VerifyEmailResponseObject, error)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(ctx context.Context, request AuthorizeOAuthRequestObject) (AuthorizeOAuthResponseObject, error)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(ctx context.Context, request ExchangeOAuthRequestObject) (ExchangeOAuthResponseObject, error)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAbout operation middleware
func (sh *strictHandler) GetAbout(ctx *gin.Context) {
	var request GetAboutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAbout(ctx, request.(GetAboutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAbout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAboutResponseObject); ok {
		if err := validResponse.VisitGetAboutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAreas operation middleware
func (sh *strictHandler) ListAreas(ctx *gin.Context) {
	var request ListAreasRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAreas(ctx, request.(ListAreasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAreas")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAreasResponseObject); ok {
		if err := validResponse.VisitListAreasResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArea operation middleware
func (sh *strictHandler) CreateArea(ctx *gin.Context) {
	var request CreateAreaRequestObject

	var body CreateAreaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArea(ctx, request.(CreateAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAreaResponseObject); ok {
		if err := validResponse.VisitCreateAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx *gin.Context) {
	var request LogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(ctx *gin.Context) {
	var request GetCurrentUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyEmail operation middleware
func (sh *strictHandler) VerifyEmail(ctx *gin.Context) {
	var request VerifyEmailRequestObject

	var body VerifyEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyEmail(ctx, request.(VerifyEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyEmailResponseObject); ok {
		if err := validResponse.VisitVerifyEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AuthorizeOAuth operation middleware
func (sh *strictHandler) AuthorizeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request AuthorizeOAuthRequestObject

	request.Provider = provider

	var body AuthorizeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthorizeOAuth(ctx, request.(AuthorizeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthorizeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AuthorizeOAuthResponseObject); ok {
		if err := validResponse.VisitAuthorizeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExchangeOAuth operation middleware
func (sh *strictHandler) ExchangeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request ExchangeOAuthRequestObject

	request.Provider = provider

	var body ExchangeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExchangeOAuth(ctx, request.(ExchangeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExchangeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExchangeOAuthResponseObject); ok {
		if err := validResponse.VisitExchangeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(ctx *gin.Context) {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx, request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		if err := validResponse.VisitRegisterUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"w558XlJyAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
