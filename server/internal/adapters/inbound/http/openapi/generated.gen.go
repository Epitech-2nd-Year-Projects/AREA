// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
)

// Defines values for ComponentSummaryKind.
const (
	ComponentSummaryKindAction   ComponentSummaryKind = "action"
	ComponentSummaryKindReaction ComponentSummaryKind = "reaction"
)

// Defines values for ServiceProviderDetailOauthType.
const (
	Apikey ServiceProviderDetailOauthType = "apikey"
	None   ServiceProviderDetailOauthType = "none"
	Oauth2 ServiceProviderDetailOauthType = "oauth2"
)

// Defines values for SessionAuthMethod.
const (
	Oauth    SessionAuthMethod = "oauth"
	Password SessionAuthMethod = "password"
)

// Defines values for SubscribeServiceResponseStatus.
const (
	AuthorizationRequired SubscribeServiceResponseStatus = "authorization_required"
	Subscribed            SubscribeServiceResponseStatus = "subscribed"
)

// Defines values for ListComponentsParamsKind.
const (
	ListComponentsParamsKindAction   ListComponentsParamsKind = "action"
	ListComponentsParamsKindReaction ListComponentsParamsKind = "reaction"
)

// Defines values for ListAvailableComponentsParamsKind.
const (
	Action   ListAvailableComponentsParamsKind = "action"
	Reaction ListAvailableComponentsParamsKind = "reaction"
)

// AboutClient defines model for AboutClient.
type AboutClient struct {
	// Host IP address of the client performing the HTTP request.
	Host string `json:"host"`
}

// AboutComponent defines model for AboutComponent.
type AboutComponent struct {
	// Description Human-readable description of the component.
	Description string `json:"description"`

	// Name Identifier of the component.
	Name string `json:"name"`
}

// AboutResponse Aggregated platform metadata combining frontend and backend build information.
type AboutResponse struct {
	Client AboutClient `json:"client"`
	Server AboutServer `json:"server"`
}

// AboutServer defines model for AboutServer.
type AboutServer struct {
	// CurrentTime Current server time expressed as an Epoch Unix timestamp.
	CurrentTime int64 `json:"currentTime"`

	// Services List of services supported by the server.
	Services []AboutService `json:"services"`
}

// AboutService defines model for AboutService.
type AboutService struct {
	// Actions Action components provided by the service.
	Actions []AboutComponent `json:"actions"`

	// Name Service identifier.
	Name string `json:"name"`

	// Reactions Reaction components provided by the service.
	Reactions []AboutComponent `json:"reactions"`
}

// AdminResetPasswordRequest Payload for administrators to set a new user password.
type AdminResetPasswordRequest struct {
	// NewPassword Replacement password to assign to the user.
	NewPassword string `json:"newPassword"`
}

// AdminUpdateEmailRequest Payload for administrators to update a user's email address.
type AdminUpdateEmailRequest struct {
	// Email New primary email address for the user.
	Email openapi_types.Email `json:"email"`

	// SendVerification Whether to issue a verification email for the new address.
	SendVerification *bool `json:"sendVerification,omitempty"`
}

// AdminUpdateStatusRequest Payload for administrators to update a user's lifecycle status.
type AdminUpdateStatusRequest struct {
	// Status Target status (`pending`, `active`, `suspended`, or `deleted`).
	Status string `json:"status"`
}

// Area Automation linking an action to one or more reactions for a user.
type Area struct {
	// Action Action binding stored for an AREA automation.
	Action *AreaAction `json:"action,omitempty"`

	// CreatedAt Timestamp (UTC) when the automation was created.
	CreatedAt time.Time `json:"createdAt"`

	// Description Optional summary supplied by the user.
	Description *string `json:"description"`

	// Id Unique identifier of the automation.
	Id openapi_types.UUID `json:"id"`

	// Name Display name chosen by the user.
	Name      string         `json:"name"`
	Reactions []AreaReaction `json:"reactions"`

	// Status Lifecycle status (`enabled`, `disabled`, or `archived`).
	Status string `json:"status"`

	// UpdatedAt Timestamp (UTC) of the last update.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AreaAction Action binding stored for an AREA automation.
type AreaAction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"componentId"`

	// ConfigId Identifier of the user component configuration backing the action.
	ConfigId openapi_types.UUID `json:"configId"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AreaReaction Reaction binding stored for an AREA automation.
type AreaReaction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"componentId"`

	// ConfigId Identifier of the user component configuration backing the reaction.
	ConfigId openapi_types.UUID `json:"configId"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AuthSessionResponse Session descriptor mirroring the cookie issued by the backend.
type AuthSessionResponse struct {
	// ExpiresAt Expiration timestamp (UTC) aligning with the `area_session` cookie expiry.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// SessionAuth Authentication metadata describing how the current session was issued.
	SessionAuth *SessionAuth `json:"sessionAuth,omitempty"`

	// TokenType Grants semantics of the issued token; currently `session`.
	TokenType *string `json:"tokenType,omitempty"`

	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// ChangeEmailRequest Payload to update the email of the current user.
type ChangeEmailRequest struct {
	// Email New primary email address.
	Email openapi_types.Email `json:"email"`

	// Password Current password used to authorise the change.
	Password string `json:"password"`
}

// ChangePasswordRequest Payload to update the password of the current user.
type ChangePasswordRequest struct {
	// CurrentPassword Current password used to confirm account ownership.
	CurrentPassword string `json:"currentPassword"`

	// NewPassword Desired replacement password.
	NewPassword string `json:"newPassword"`
}

// ComponentListResponse defines model for ComponentListResponse.
type ComponentListResponse struct {
	Components []ComponentSummary `json:"components"`
}

// ComponentSummary Minimal catalog metadata required by clients to render a component reference.
type ComponentSummary struct {
	Description *string              `json:"description"`
	DisplayName string               `json:"displayName"`
	Id          openapi_types.UUID   `json:"id"`
	Kind        ComponentSummaryKind `json:"kind"`

	// Metadata Additional configuration metadata describing expected parameters.
	Metadata *map[string]interface{} `json:"metadata"`
	Name     string                  `json:"name"`

	// Provider Lightweight representation of a service provider exposing components.
	Provider ServiceProviderSummary `json:"provider"`
}

// ComponentSummaryKind defines model for ComponentSummary.Kind.
type ComponentSummaryKind string

// CreateAreaAction Configuration of the action component that triggers the automation.
type CreateAreaAction struct {
	// ComponentId Identifier of the action component selected from the catalog.
	ComponentId openapi_types.UUID `json:"componentId"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaReaction Configuration of a reaction component executed when the automation fires.
type CreateAreaReaction struct {
	// ComponentId Identifier of the reaction component selected from the catalog.
	ComponentId openapi_types.UUID `json:"componentId"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaRequest Payload used to create a new automation owned by the authenticated user.
type CreateAreaRequest struct {
	// Action Configuration of the action component that triggers the automation.
	Action CreateAreaAction `json:"action"`

	// Description Optional summary to distinguish this automation.
	Description *string `json:"description,omitempty"`

	// Name Human readable name displayed across clients.
	Name      string               `json:"name"`
	Reactions []CreateAreaReaction `json:"reactions"`
}

// EmailChangeResponse Response returned after updating a user's email address.
type EmailChangeResponse struct {
	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`

	// VerificationExpiresAt Expiration time of the newly issued verification token, when applicable.
	VerificationExpiresAt *time.Time `json:"verificationExpiresAt"`
}

// IdentityListResponse defines model for IdentityListResponse.
type IdentityListResponse struct {
	Identities []IdentitySummary `json:"identities"`
}

// IdentitySummary defines model for IdentitySummary.
type IdentitySummary struct {
	ConnectedAt time.Time          `json:"connectedAt"`
	ExpiresAt   *time.Time         `json:"expiresAt"`
	Id          openapi_types.UUID `json:"id"`
	Provider    string             `json:"provider"`
	Scopes      *[]string          `json:"scopes,omitempty"`
	Subject     string             `json:"subject"`
}

// ListAreasResponse Collection wrapper for automations returned to the client.
type ListAreasResponse struct {
	Areas []Area `json:"areas"`
}

// LoginRequest Credential-based authentication payload.
type LoginRequest struct {
	// Email Registered user email.
	Email openapi_types.Email `json:"email"`

	// Password Plaintext password that satisfies the backend policy.
	Password string `json:"password"`
}

// OAuthAuthorizationRequest Optional parameters forwarded to the configured OAuth provider.
type OAuthAuthorizationRequest struct {
	// Prompt Provider-specific prompt parameter allowing the user experience to be tweaked.
	Prompt *string `json:"prompt,omitempty"`

	// RedirectUri Explicit redirect URI to override the default callback registered with the provider.
	RedirectUri *string `json:"redirectUri,omitempty"`

	// Scopes Additional scopes to request from the provider.
	Scopes *[]string `json:"scopes,omitempty"`

	// State Opaque value used to maintain state between the request and callback.
	State *string `json:"state,omitempty"`

	// UsePkce Flag indicating whether PKCE should be enforced.
	UsePkce *bool `json:"usePkce,omitempty"`
}

// OAuthAuthorizationResponse Provider authorisation metadata.
type OAuthAuthorizationResponse struct {
	// AuthorizationUrl URL that the client must open to continue authorisation with the provider.
	AuthorizationUrl string `json:"authorizationUrl"`

	// CodeChallenge PKCE code challenge derived from the verifier.
	CodeChallenge *string `json:"codeChallenge,omitempty"`

	// CodeChallengeMethod Method used to compute the PKCE code challenge.
	CodeChallengeMethod *string `json:"codeChallengeMethod,omitempty"`

	// CodeVerifier PKCE code verifier to persist until the exchange completes.
	CodeVerifier *string `json:"codeVerifier,omitempty"`

	// State State echoed by the provider after authorisation.
	State *string `json:"state,omitempty"`
}

// OAuthExchangeRequest Payload received after the provider redirect to complete the exchange.
type OAuthExchangeRequest struct {
	// Code One-time authorisation code issued by the provider.
	Code string `json:"code"`

	// CodeVerifier PKCE code verifier required when the provider enforces PKCE.
	CodeVerifier *string `json:"codeVerifier,omitempty"`

	// RedirectUri Redirect URI supplied during the authorisation flow.
	RedirectUri *string `json:"redirectUri,omitempty"`

	// State Provider-issued state parameter used to prevent CSRF.
	State *string `json:"state,omitempty"`
}

// RegisterUserRequest Payload used to enrol a new AREA account prior to email verification.
type RegisterUserRequest struct {
	// Email Primary email address that receives activation and security alerts.
	Email openapi_types.Email `json:"email"`

	// Password Strong password that satisfies backend policy (min. 8 chars, letters + numbers).
	Password string `json:"password"`
}

// RegisterUserResponse Confirmation payload indicating the asynchronous verification workflow started.
type RegisterUserResponse struct {
	// ExpiresAt Expiration timestamp of the verification token.
	ExpiresAt time.Time `json:"expiresAt"`

	// UserId Unique identifier assigned to the provisioned user.
	UserId string `json:"userId"`
}

// ServiceProviderDetail Detailed attributes of a service provider as stored in the catalog.
type ServiceProviderDetail struct {
	Category    *string                        `json:"category"`
	CreatedAt   time.Time                      `json:"createdAt"`
	DisplayName string                         `json:"displayName"`
	Enabled     bool                           `json:"enabled"`
	Id          openapi_types.UUID             `json:"id"`
	Name        string                         `json:"name"`
	OauthType   ServiceProviderDetailOauthType `json:"oauthType"`
	UpdatedAt   time.Time                      `json:"updatedAt"`
}

// ServiceProviderDetailOauthType defines model for ServiceProviderDetail.OauthType.
type ServiceProviderDetailOauthType string

// ServiceProviderListResponse defines model for ServiceProviderListResponse.
type ServiceProviderListResponse struct {
	Providers []ServiceProviderDetail `json:"providers"`
}

// ServiceProviderSummary Lightweight representation of a service provider exposing components.
type ServiceProviderSummary struct {
	DisplayName string             `json:"displayName"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
}

// SessionAuth Authentication metadata describing how the current session was issued.
type SessionAuth struct {
	// Method Mechanism used to authenticate the session.
	Method SessionAuthMethod `json:"method"`

	// Provider OAuth provider slug when `method` equals `oauth`.
	Provider *string `json:"provider"`
}

// SessionAuthMethod Mechanism used to authenticate the session.
type SessionAuthMethod string

// SubscribeExchangeRequest defines model for SubscribeExchangeRequest.
type SubscribeExchangeRequest struct {
	Code         string  `json:"code"`
	CodeVerifier *string `json:"codeVerifier,omitempty"`
	RedirectUri  *string `json:"redirectUri,omitempty"`
}

// SubscribeExchangeResponse defines model for SubscribeExchangeResponse.
type SubscribeExchangeResponse struct {
	Identity     *IdentitySummary    `json:"identity,omitempty"`
	Subscription SubscriptionSummary `json:"subscription"`
}

// SubscribeServiceRequest defines model for SubscribeServiceRequest.
type SubscribeServiceRequest struct {
	Prompt      *string   `json:"prompt,omitempty"`
	RedirectUri *string   `json:"redirectUri,omitempty"`
	Scopes      *[]string `json:"scopes,omitempty"`
	State       *string   `json:"state,omitempty"`
	UsePkce     *bool     `json:"usePkce,omitempty"`
}

// SubscribeServiceResponse defines model for SubscribeServiceResponse.
type SubscribeServiceResponse struct {
	// Authorization Provider authorisation metadata.
	Authorization *OAuthAuthorizationResponse    `json:"authorization,omitempty"`
	Status        SubscribeServiceResponseStatus `json:"status"`
	Subscription  *SubscriptionSummary           `json:"subscription,omitempty"`
}

// SubscribeServiceResponseStatus defines model for SubscribeServiceResponse.Status.
type SubscribeServiceResponseStatus string

// SubscriptionListResponse defines model for SubscriptionListResponse.
type SubscriptionListResponse struct {
	Subscriptions []UserSubscription `json:"subscriptions"`
}

// SubscriptionSummary defines model for SubscriptionSummary.
type SubscriptionSummary struct {
	CreatedAt   time.Time           `json:"createdAt"`
	Id          openapi_types.UUID  `json:"id"`
	IdentityId  *openapi_types.UUID `json:"identityId"`
	ProviderId  openapi_types.UUID  `json:"providerId"`
	ScopeGrants *[]string           `json:"scopeGrants,omitempty"`
	Status      string              `json:"status"`
	UpdatedAt   *time.Time          `json:"updatedAt,omitempty"`
}

// User Detailed user payload returned by authenticated endpoints.
type User struct {
	// CreatedAt Account creation timestamp in UTC.
	CreatedAt time.Time `json:"createdAt"`

	// Email Primary email associated with the account.
	Email openapi_types.Email `json:"email"`

	// Id Unique identifier assigned to the user.
	Id openapi_types.UUID `json:"id"`

	// LastLoginAt Timestamp of the most recent successful login.
	LastLoginAt *time.Time `json:"lastLoginAt"`

	// Role Permission level for the account (`member` or `admin`).
	Role string `json:"role"`

	// Status Lifecycle status (`pending`, `active`, etc.).
	Status string `json:"status"`

	// UpdatedAt Timestamp of the latest account update in UTC.
	UpdatedAt time.Time `json:"updatedAt"`
}

// UserResponse Public representation of the authenticated user.
type UserResponse struct {
	// SessionAuth Authentication metadata describing how the current session was issued.
	SessionAuth *SessionAuth `json:"sessionAuth,omitempty"`

	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// UserSubscription defines model for UserSubscription.
type UserSubscription struct {
	// Provider Detailed attributes of a service provider as stored in the catalog.
	Provider     ServiceProviderDetail `json:"provider"`
	Subscription SubscriptionSummary   `json:"subscription"`
}

// VerifyEmailRequest Token issued in the verification email used to activate the account.
type VerifyEmailRequest struct {
	// Token Single-use verification token issued as part of registration.
	Token string `json:"token"`
}

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// UserId defines model for UserId.
type UserId = openapi_types.UUID

// ListComponentsParams defines parameters for ListComponents.
type ListComponentsParams struct {
	// Kind Filter components by kind
	Kind *ListComponentsParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// Provider Filter components by provider slug (for example `google`)
	Provider *string `form:"provider,omitempty" json:"provider,omitempty"`
}

// ListComponentsParamsKind defines parameters for ListComponents.
type ListComponentsParamsKind string

// ListAvailableComponentsParams defines parameters for ListAvailableComponents.
type ListAvailableComponentsParams struct {
	// Kind Filter components by kind
	Kind *ListAvailableComponentsParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// Provider Filter components by provider slug (for example `google`)
	Provider *string `form:"provider,omitempty" json:"provider,omitempty"`
}

// ListAvailableComponentsParamsKind defines parameters for ListAvailableComponents.
type ListAvailableComponentsParamsKind string

// AdminUpdateUserEmailJSONRequestBody defines body for AdminUpdateUserEmail for application/json ContentType.
type AdminUpdateUserEmailJSONRequestBody = AdminUpdateEmailRequest

// AdminResetUserPasswordJSONRequestBody defines body for AdminResetUserPassword for application/json ContentType.
type AdminResetUserPasswordJSONRequestBody = AdminResetPasswordRequest

// AdminUpdateUserStatusJSONRequestBody defines body for AdminUpdateUserStatus for application/json ContentType.
type AdminUpdateUserStatusJSONRequestBody = AdminUpdateStatusRequest

// CreateAreaJSONRequestBody defines body for CreateArea for application/json ContentType.
type CreateAreaJSONRequestBody = CreateAreaRequest

// ChangeEmailJSONRequestBody defines body for ChangeEmail for application/json ContentType.
type ChangeEmailJSONRequestBody = ChangeEmailRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// ChangePasswordJSONRequestBody defines body for ChangePassword for application/json ContentType.
type ChangePasswordJSONRequestBody = ChangePasswordRequest

// VerifyEmailJSONRequestBody defines body for VerifyEmail for application/json ContentType.
type VerifyEmailJSONRequestBody = VerifyEmailRequest

// AuthorizeOAuthJSONRequestBody defines body for AuthorizeOAuth for application/json ContentType.
type AuthorizeOAuthJSONRequestBody = OAuthAuthorizationRequest

// ExchangeOAuthJSONRequestBody defines body for ExchangeOAuth for application/json ContentType.
type ExchangeOAuthJSONRequestBody = OAuthExchangeRequest

// SubscribeServiceJSONRequestBody defines body for SubscribeService for application/json ContentType.
type SubscribeServiceJSONRequestBody = SubscribeServiceRequest

// SubscribeServiceExchangeJSONRequestBody defines body for SubscribeServiceExchange for application/json ContentType.
type SubscribeServiceExchangeJSONRequestBody = SubscribeExchangeRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(c *gin.Context)
	// Update user email
	// (PATCH /v1/admin/users/{userId}/email)
	AdminUpdateUserEmail(c *gin.Context, userId UserId)
	// Reset user password
	// (PATCH /v1/admin/users/{userId}/password)
	AdminResetUserPassword(c *gin.Context, userId UserId)
	// Update user status
	// (PATCH /v1/admin/users/{userId}/status)
	AdminUpdateUserStatus(c *gin.Context, userId UserId)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(c *gin.Context)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(c *gin.Context)
	// Delete an automation owned by the current user
	// (DELETE /v1/areas/{areaId})
	DeleteArea(c *gin.Context, areaId openapi_types.UUID)
	// Execute area reactions immediately
	// (POST /v1/areas/{areaId}/execute)
	ExecuteArea(c *gin.Context, areaId openapi_types.UUID)
	// Change account email
	// (PATCH /v1/auth/email)
	ChangeEmail(c *gin.Context)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(c *gin.Context)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(c *gin.Context)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(c *gin.Context)
	// Change account password
	// (PATCH /v1/auth/password)
	ChangePassword(c *gin.Context)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(c *gin.Context)
	// List service components
	// (GET /v1/components)
	ListComponents(c *gin.Context, params ListComponentsParams)
	// List components available to the current user
	// (GET /v1/components/available)
	ListAvailableComponents(c *gin.Context, params ListAvailableComponentsParams)
	// List connected identities
	// (GET /v1/identities)
	ListIdentities(c *gin.Context)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(c *gin.Context, provider OAuthProvider)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(c *gin.Context, provider OAuthProvider)
	// List available service providers
	// (GET /v1/services)
	ListServiceProviders(c *gin.Context)
	// List service subscriptions for the current user
	// (GET /v1/services/subscriptions)
	ListServiceSubscriptions(c *gin.Context)
	// Subscribe current user to service provider
	// (POST /v1/services/{provider}/subscribe)
	SubscribeService(c *gin.Context, provider OAuthProvider)
	// Complete service subscription exchange
	// (POST /v1/services/{provider}/subscribe/exchange)
	SubscribeServiceExchange(c *gin.Context, provider OAuthProvider)
	// Revoke a service subscription
	// (DELETE /v1/services/{provider}/subscription)
	UnsubscribeService(c *gin.Context, provider OAuthProvider)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAbout operation middleware
func (siw *ServerInterfaceWrapper) GetAbout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAbout(c)
}

// AdminUpdateUserEmail operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateUserEmail(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AdminUpdateUserEmail(c, userId)
}

// AdminResetUserPassword operation middleware
func (siw *ServerInterfaceWrapper) AdminResetUserPassword(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AdminResetUserPassword(c, userId)
}

// AdminUpdateUserStatus operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateUserStatus(c *gin.Context) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithOptions("simple", "userId", c.Param("userId"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter userId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AdminUpdateUserStatus(c, userId)
}

// ListAreas operation middleware
func (siw *ServerInterfaceWrapper) ListAreas(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAreas(c)
}

// CreateArea operation middleware
func (siw *ServerInterfaceWrapper) CreateArea(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateArea(c)
}

// DeleteArea operation middleware
func (siw *ServerInterfaceWrapper) DeleteArea(c *gin.Context) {

	var err error

	// ------------- Path parameter "areaId" -------------
	var areaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "areaId", c.Param("areaId"), &areaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter areaId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteArea(c, areaId)
}

// ExecuteArea operation middleware
func (siw *ServerInterfaceWrapper) ExecuteArea(c *gin.Context) {

	var err error

	// ------------- Path parameter "areaId" -------------
	var areaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "areaId", c.Param("areaId"), &areaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter areaId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExecuteArea(c, areaId)
}

// ChangeEmail operation middleware
func (siw *ServerInterfaceWrapper) ChangeEmail(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangeEmail(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUser(c)
}

// ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) ChangePassword(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ChangePassword(c)
}

// VerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifyEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyEmail(c)
}

// ListComponents operation middleware
func (siw *ServerInterfaceWrapper) ListComponents(c *gin.Context) {

	var err error

	c.Set(SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListComponentsParams

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", c.Request.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListComponents(c, params)
}

// ListAvailableComponents operation middleware
func (siw *ServerInterfaceWrapper) ListAvailableComponents(c *gin.Context) {

	var err error

	c.Set(SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAvailableComponentsParams

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", c.Request.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAvailableComponents(c, params)
}

// ListIdentities operation middleware
func (siw *ServerInterfaceWrapper) ListIdentities(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListIdentities(c)
}

// AuthorizeOAuth operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthorizeOAuth(c, provider)
}

// ExchangeOAuth operation middleware
func (siw *ServerInterfaceWrapper) ExchangeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeOAuth(c, provider)
}

// ListServiceProviders operation middleware
func (siw *ServerInterfaceWrapper) ListServiceProviders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListServiceProviders(c)
}

// ListServiceSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) ListServiceSubscriptions(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListServiceSubscriptions(c)
}

// SubscribeService operation middleware
func (siw *ServerInterfaceWrapper) SubscribeService(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscribeService(c, provider)
}

// SubscribeServiceExchange operation middleware
func (siw *ServerInterfaceWrapper) SubscribeServiceExchange(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscribeServiceExchange(c, provider)
}

// UnsubscribeService operation middleware
func (siw *ServerInterfaceWrapper) UnsubscribeService(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UnsubscribeService(c, provider)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/about.json", wrapper.GetAbout)
	router.PATCH(options.BaseURL+"/v1/admin/users/:userId/email", wrapper.AdminUpdateUserEmail)
	router.PATCH(options.BaseURL+"/v1/admin/users/:userId/password", wrapper.AdminResetUserPassword)
	router.PATCH(options.BaseURL+"/v1/admin/users/:userId/status", wrapper.AdminUpdateUserStatus)
	router.GET(options.BaseURL+"/v1/areas", wrapper.ListAreas)
	router.POST(options.BaseURL+"/v1/areas", wrapper.CreateArea)
	router.DELETE(options.BaseURL+"/v1/areas/:areaId", wrapper.DeleteArea)
	router.POST(options.BaseURL+"/v1/areas/:areaId/execute", wrapper.ExecuteArea)
	router.PATCH(options.BaseURL+"/v1/auth/email", wrapper.ChangeEmail)
	router.POST(options.BaseURL+"/v1/auth/login", wrapper.Login)
	router.POST(options.BaseURL+"/v1/auth/logout", wrapper.Logout)
	router.GET(options.BaseURL+"/v1/auth/me", wrapper.GetCurrentUser)
	router.PATCH(options.BaseURL+"/v1/auth/password", wrapper.ChangePassword)
	router.POST(options.BaseURL+"/v1/auth/verify", wrapper.VerifyEmail)
	router.GET(options.BaseURL+"/v1/components", wrapper.ListComponents)
	router.GET(options.BaseURL+"/v1/components/available", wrapper.ListAvailableComponents)
	router.GET(options.BaseURL+"/v1/identities", wrapper.ListIdentities)
	router.POST(options.BaseURL+"/v1/oauth/:provider/authorize", wrapper.AuthorizeOAuth)
	router.POST(options.BaseURL+"/v1/oauth/:provider/exchange", wrapper.ExchangeOAuth)
	router.GET(options.BaseURL+"/v1/services", wrapper.ListServiceProviders)
	router.GET(options.BaseURL+"/v1/services/subscriptions", wrapper.ListServiceSubscriptions)
	router.POST(options.BaseURL+"/v1/services/:provider/subscribe", wrapper.SubscribeService)
	router.POST(options.BaseURL+"/v1/services/:provider/subscribe/exchange", wrapper.SubscribeServiceExchange)
	router.DELETE(options.BaseURL+"/v1/services/:provider/subscription", wrapper.UnsubscribeService)
	router.POST(options.BaseURL+"/v1/users", wrapper.RegisterUser)
}

type GetAboutRequestObject struct {
}

type GetAboutResponseObject interface {
	VisitGetAboutResponse(w http.ResponseWriter) error
}

type GetAbout200JSONResponse AboutResponse

func (response GetAbout200JSONResponse) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAbout404Response struct {
}

func (response GetAbout404Response) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AdminUpdateUserEmailRequestObject struct {
	UserId UserId `json:"userId"`
	Body   *AdminUpdateUserEmailJSONRequestBody
}

type AdminUpdateUserEmailResponseObject interface {
	VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error
}

type AdminUpdateUserEmail200JSONResponse EmailChangeResponse

func (response AdminUpdateUserEmail200JSONResponse) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminUpdateUserEmail400Response struct {
}

func (response AdminUpdateUserEmail400Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AdminUpdateUserEmail401Response struct {
}

func (response AdminUpdateUserEmail401Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminUpdateUserEmail403Response struct {
}

func (response AdminUpdateUserEmail403Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AdminUpdateUserEmail404Response struct {
}

func (response AdminUpdateUserEmail404Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AdminUpdateUserEmail409Response struct {
}

func (response AdminUpdateUserEmail409Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type AdminUpdateUserEmail500Response struct {
}

func (response AdminUpdateUserEmail500Response) VisitAdminUpdateUserEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AdminResetUserPasswordRequestObject struct {
	UserId UserId `json:"userId"`
	Body   *AdminResetUserPasswordJSONRequestBody
}

type AdminResetUserPasswordResponseObject interface {
	VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error
}

type AdminResetUserPassword200JSONResponse UserResponse

func (response AdminResetUserPassword200JSONResponse) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminResetUserPassword400Response struct {
}

func (response AdminResetUserPassword400Response) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AdminResetUserPassword401Response struct {
}

func (response AdminResetUserPassword401Response) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminResetUserPassword403Response struct {
}

func (response AdminResetUserPassword403Response) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AdminResetUserPassword404Response struct {
}

func (response AdminResetUserPassword404Response) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AdminResetUserPassword500Response struct {
}

func (response AdminResetUserPassword500Response) VisitAdminResetUserPasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AdminUpdateUserStatusRequestObject struct {
	UserId UserId `json:"userId"`
	Body   *AdminUpdateUserStatusJSONRequestBody
}

type AdminUpdateUserStatusResponseObject interface {
	VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error
}

type AdminUpdateUserStatus200JSONResponse UserResponse

func (response AdminUpdateUserStatus200JSONResponse) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminUpdateUserStatus400Response struct {
}

func (response AdminUpdateUserStatus400Response) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AdminUpdateUserStatus401Response struct {
}

func (response AdminUpdateUserStatus401Response) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type AdminUpdateUserStatus403Response struct {
}

func (response AdminUpdateUserStatus403Response) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type AdminUpdateUserStatus404Response struct {
}

func (response AdminUpdateUserStatus404Response) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AdminUpdateUserStatus500Response struct {
}

func (response AdminUpdateUserStatus500Response) VisitAdminUpdateUserStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ListAreasRequestObject struct {
}

type ListAreasResponseObject interface {
	VisitListAreasResponse(w http.ResponseWriter) error
}

type ListAreas200JSONResponse ListAreasResponse

func (response ListAreas200JSONResponse) VisitListAreasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAreaRequestObject struct {
	Body *CreateAreaJSONRequestBody
}

type CreateAreaResponseObject interface {
	VisitCreateAreaResponse(w http.ResponseWriter) error
}

type CreateArea201JSONResponse Area

func (response CreateArea201JSONResponse) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArea400Response struct {
}

func (response CreateArea400Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateArea401Response struct {
}

func (response CreateArea401Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteAreaRequestObject struct {
	AreaId openapi_types.UUID `json:"areaId"`
}

type DeleteAreaResponseObject interface {
	VisitDeleteAreaResponse(w http.ResponseWriter) error
}

type DeleteArea204Response struct {
}

func (response DeleteArea204Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteArea401Response struct {
}

func (response DeleteArea401Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteArea403Response struct {
}

func (response DeleteArea403Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteArea404Response struct {
}

func (response DeleteArea404Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExecuteAreaRequestObject struct {
	AreaId openapi_types.UUID `json:"areaId"`
}

type ExecuteAreaResponseObject interface {
	VisitExecuteAreaResponse(w http.ResponseWriter) error
}

type ExecuteArea202Response struct {
}

func (response ExecuteArea202Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type ExecuteArea401Response struct {
}

func (response ExecuteArea401Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ExecuteArea403Response struct {
}

func (response ExecuteArea403Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type ExecuteArea404Response struct {
}

func (response ExecuteArea404Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExecuteArea500Response struct {
}

func (response ExecuteArea500Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ChangeEmailRequestObject struct {
	Body *ChangeEmailJSONRequestBody
}

type ChangeEmailResponseObject interface {
	VisitChangeEmailResponse(w http.ResponseWriter) error
}

type ChangeEmail202JSONResponse EmailChangeResponse

func (response ChangeEmail202JSONResponse) VisitChangeEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type ChangeEmail400Response struct {
}

func (response ChangeEmail400Response) VisitChangeEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ChangeEmail401Response struct {
}

func (response ChangeEmail401Response) VisitChangeEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ChangeEmail409Response struct {
}

func (response ChangeEmail409Response) VisitChangeEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type ChangeEmail500Response struct {
}

func (response ChangeEmail500Response) VisitChangeEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200JSONResponse struct {
	Body    AuthSessionResponse
	Headers Login200ResponseHeaders
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type Login400Response struct {
}

func (response Login400Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Login403Response struct {
}

func (response Login403Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401Response struct {
}

func (response Logout401Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse UserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401Response struct {
}

func (response GetCurrentUser401Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ChangePasswordRequestObject struct {
	Body *ChangePasswordJSONRequestBody
}

type ChangePasswordResponseObject interface {
	VisitChangePasswordResponse(w http.ResponseWriter) error
}

type ChangePassword204Response struct {
}

func (response ChangePassword204Response) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ChangePassword400Response struct {
}

func (response ChangePassword400Response) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ChangePassword401Response struct {
}

func (response ChangePassword401Response) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ChangePassword500Response struct {
}

func (response ChangePassword500Response) VisitChangePasswordResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type VerifyEmailRequestObject struct {
	Body *VerifyEmailJSONRequestBody
}

type VerifyEmailResponseObject interface {
	VisitVerifyEmailResponse(w http.ResponseWriter) error
}

type VerifyEmail200ResponseHeaders struct {
	SetCookie string
}

type VerifyEmail200JSONResponse struct {
	Body    AuthSessionResponse
	Headers VerifyEmail200ResponseHeaders
}

func (response VerifyEmail200JSONResponse) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyEmail400Response struct {
}

func (response VerifyEmail400Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type VerifyEmail410Response struct {
}

func (response VerifyEmail410Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(410)
	return nil
}

type ListComponentsRequestObject struct {
	Params ListComponentsParams
}

type ListComponentsResponseObject interface {
	VisitListComponentsResponse(w http.ResponseWriter) error
}

type ListComponents200JSONResponse ComponentListResponse

func (response ListComponents200JSONResponse) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListComponents400Response struct {
}

func (response ListComponents400Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListComponents401Response struct {
}

func (response ListComponents401Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListComponents500Response struct {
}

func (response ListComponents500Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ListAvailableComponentsRequestObject struct {
	Params ListAvailableComponentsParams
}

type ListAvailableComponentsResponseObject interface {
	VisitListAvailableComponentsResponse(w http.ResponseWriter) error
}

type ListAvailableComponents200JSONResponse ComponentListResponse

func (response ListAvailableComponents200JSONResponse) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAvailableComponents400Response struct {
}

func (response ListAvailableComponents400Response) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListAvailableComponents401Response struct {
}

func (response ListAvailableComponents401Response) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListAvailableComponents500Response struct {
}

func (response ListAvailableComponents500Response) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ListIdentitiesRequestObject struct {
}

type ListIdentitiesResponseObject interface {
	VisitListIdentitiesResponse(w http.ResponseWriter) error
}

type ListIdentities200JSONResponse IdentityListResponse

func (response ListIdentities200JSONResponse) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListIdentities401Response struct {
}

func (response ListIdentities401Response) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListIdentities500Response struct {
}

func (response ListIdentities500Response) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AuthorizeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *AuthorizeOAuthJSONRequestBody
}

type AuthorizeOAuthResponseObject interface {
	VisitAuthorizeOAuthResponse(w http.ResponseWriter) error
}

type AuthorizeOAuth200JSONResponse OAuthAuthorizationResponse

func (response AuthorizeOAuth200JSONResponse) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthorizeOAuth400Response struct {
}

func (response AuthorizeOAuth400Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthorizeOAuth404Response struct {
}

func (response AuthorizeOAuth404Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthorizeOAuth501Response struct {
}

func (response AuthorizeOAuth501Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *ExchangeOAuthJSONRequestBody
}

type ExchangeOAuthResponseObject interface {
	VisitExchangeOAuthResponse(w http.ResponseWriter) error
}

type ExchangeOAuth200ResponseHeaders struct {
	SetCookie string
}

type ExchangeOAuth200JSONResponse struct {
	Body    AuthSessionResponse
	Headers ExchangeOAuth200ResponseHeaders
}

func (response ExchangeOAuth200JSONResponse) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExchangeOAuth400Response struct {
}

func (response ExchangeOAuth400Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ExchangeOAuth404Response struct {
}

func (response ExchangeOAuth404Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExchangeOAuth501Response struct {
}

func (response ExchangeOAuth501Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuth502Response struct {
}

func (response ExchangeOAuth502Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type ListServiceProvidersRequestObject struct {
}

type ListServiceProvidersResponseObject interface {
	VisitListServiceProvidersResponse(w http.ResponseWriter) error
}

type ListServiceProviders200JSONResponse ServiceProviderListResponse

func (response ListServiceProviders200JSONResponse) VisitListServiceProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListServiceSubscriptionsRequestObject struct {
}

type ListServiceSubscriptionsResponseObject interface {
	VisitListServiceSubscriptionsResponse(w http.ResponseWriter) error
}

type ListServiceSubscriptions200JSONResponse SubscriptionListResponse

func (response ListServiceSubscriptions200JSONResponse) VisitListServiceSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListServiceSubscriptions401Response struct {
}

func (response ListServiceSubscriptions401Response) VisitListServiceSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SubscribeServiceRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *SubscribeServiceJSONRequestBody
}

type SubscribeServiceResponseObject interface {
	VisitSubscribeServiceResponse(w http.ResponseWriter) error
}

type SubscribeService200JSONResponse SubscribeServiceResponse

func (response SubscribeService200JSONResponse) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubscribeService400Response struct {
}

func (response SubscribeService400Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SubscribeService401Response struct {
}

func (response SubscribeService401Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SubscribeService404Response struct {
}

func (response SubscribeService404Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SubscribeService409Response struct {
}

func (response SubscribeService409Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type SubscribeService502Response struct {
}

func (response SubscribeService502Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type SubscribeServiceExchangeRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *SubscribeServiceExchangeJSONRequestBody
}

type SubscribeServiceExchangeResponseObject interface {
	VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error
}

type SubscribeServiceExchange200JSONResponse SubscribeExchangeResponse

func (response SubscribeServiceExchange200JSONResponse) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubscribeServiceExchange400Response struct {
}

func (response SubscribeServiceExchange400Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SubscribeServiceExchange401Response struct {
}

func (response SubscribeServiceExchange401Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SubscribeServiceExchange404Response struct {
}

func (response SubscribeServiceExchange404Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SubscribeServiceExchange409Response struct {
}

func (response SubscribeServiceExchange409Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type SubscribeServiceExchange502Response struct {
}

func (response SubscribeServiceExchange502Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type UnsubscribeServiceRequestObject struct {
	Provider OAuthProvider `json:"provider"`
}

type UnsubscribeServiceResponseObject interface {
	VisitUnsubscribeServiceResponse(w http.ResponseWriter) error
}

type UnsubscribeService204Response struct {
}

func (response UnsubscribeService204Response) VisitUnsubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UnsubscribeService401Response struct {
}

func (response UnsubscribeService401Response) VisitUnsubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UnsubscribeService404Response struct {
}

func (response UnsubscribeService404Response) VisitUnsubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(w http.ResponseWriter) error
}

type RegisterUser202JSONResponse RegisterUserResponse

func (response RegisterUser202JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser400Response struct {
}

func (response RegisterUser400Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterUser409Response struct {
}

func (response RegisterUser409Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(ctx context.Context, request GetAboutRequestObject) (GetAboutResponseObject, error)
	// Update user email
	// (PATCH /v1/admin/users/{userId}/email)
	AdminUpdateUserEmail(ctx context.Context, request AdminUpdateUserEmailRequestObject) (AdminUpdateUserEmailResponseObject, error)
	// Reset user password
	// (PATCH /v1/admin/users/{userId}/password)
	AdminResetUserPassword(ctx context.Context, request AdminResetUserPasswordRequestObject) (AdminResetUserPasswordResponseObject, error)
	// Update user status
	// (PATCH /v1/admin/users/{userId}/status)
	AdminUpdateUserStatus(ctx context.Context, request AdminUpdateUserStatusRequestObject) (AdminUpdateUserStatusResponseObject, error)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(ctx context.Context, request ListAreasRequestObject) (ListAreasResponseObject, error)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(ctx context.Context, request CreateAreaRequestObject) (CreateAreaResponseObject, error)
	// Delete an automation owned by the current user
	// (DELETE /v1/areas/{areaId})
	DeleteArea(ctx context.Context, request DeleteAreaRequestObject) (DeleteAreaResponseObject, error)
	// Execute area reactions immediately
	// (POST /v1/areas/{areaId}/execute)
	ExecuteArea(ctx context.Context, request ExecuteAreaRequestObject) (ExecuteAreaResponseObject, error)
	// Change account email
	// (PATCH /v1/auth/email)
	ChangeEmail(ctx context.Context, request ChangeEmailRequestObject) (ChangeEmailResponseObject, error)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Change account password
	// (PATCH /v1/auth/password)
	ChangePassword(ctx context.Context, request ChangePasswordRequestObject) (ChangePasswordResponseObject, error)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(ctx context.Context, request VerifyEmailRequestObject) (VerifyEmailResponseObject, error)
	// List service components
	// (GET /v1/components)
	ListComponents(ctx context.Context, request ListComponentsRequestObject) (ListComponentsResponseObject, error)
	// List components available to the current user
	// (GET /v1/components/available)
	ListAvailableComponents(ctx context.Context, request ListAvailableComponentsRequestObject) (ListAvailableComponentsResponseObject, error)
	// List connected identities
	// (GET /v1/identities)
	ListIdentities(ctx context.Context, request ListIdentitiesRequestObject) (ListIdentitiesResponseObject, error)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(ctx context.Context, request AuthorizeOAuthRequestObject) (AuthorizeOAuthResponseObject, error)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(ctx context.Context, request ExchangeOAuthRequestObject) (ExchangeOAuthResponseObject, error)
	// List available service providers
	// (GET /v1/services)
	ListServiceProviders(ctx context.Context, request ListServiceProvidersRequestObject) (ListServiceProvidersResponseObject, error)
	// List service subscriptions for the current user
	// (GET /v1/services/subscriptions)
	ListServiceSubscriptions(ctx context.Context, request ListServiceSubscriptionsRequestObject) (ListServiceSubscriptionsResponseObject, error)
	// Subscribe current user to service provider
	// (POST /v1/services/{provider}/subscribe)
	SubscribeService(ctx context.Context, request SubscribeServiceRequestObject) (SubscribeServiceResponseObject, error)
	// Complete service subscription exchange
	// (POST /v1/services/{provider}/subscribe/exchange)
	SubscribeServiceExchange(ctx context.Context, request SubscribeServiceExchangeRequestObject) (SubscribeServiceExchangeResponseObject, error)
	// Revoke a service subscription
	// (DELETE /v1/services/{provider}/subscription)
	UnsubscribeService(ctx context.Context, request UnsubscribeServiceRequestObject) (UnsubscribeServiceResponseObject, error)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAbout operation middleware
func (sh *strictHandler) GetAbout(ctx *gin.Context) {
	var request GetAboutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAbout(ctx, request.(GetAboutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAbout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAboutResponseObject); ok {
		if err := validResponse.VisitGetAboutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminUpdateUserEmail operation middleware
func (sh *strictHandler) AdminUpdateUserEmail(ctx *gin.Context, userId UserId) {
	var request AdminUpdateUserEmailRequestObject

	request.UserId = userId

	var body AdminUpdateUserEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminUpdateUserEmail(ctx, request.(AdminUpdateUserEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminUpdateUserEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AdminUpdateUserEmailResponseObject); ok {
		if err := validResponse.VisitAdminUpdateUserEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminResetUserPassword operation middleware
func (sh *strictHandler) AdminResetUserPassword(ctx *gin.Context, userId UserId) {
	var request AdminResetUserPasswordRequestObject

	request.UserId = userId

	var body AdminResetUserPasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminResetUserPassword(ctx, request.(AdminResetUserPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminResetUserPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AdminResetUserPasswordResponseObject); ok {
		if err := validResponse.VisitAdminResetUserPasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AdminUpdateUserStatus operation middleware
func (sh *strictHandler) AdminUpdateUserStatus(ctx *gin.Context, userId UserId) {
	var request AdminUpdateUserStatusRequestObject

	request.UserId = userId

	var body AdminUpdateUserStatusJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminUpdateUserStatus(ctx, request.(AdminUpdateUserStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminUpdateUserStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AdminUpdateUserStatusResponseObject); ok {
		if err := validResponse.VisitAdminUpdateUserStatusResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAreas operation middleware
func (sh *strictHandler) ListAreas(ctx *gin.Context) {
	var request ListAreasRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAreas(ctx, request.(ListAreasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAreas")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAreasResponseObject); ok {
		if err := validResponse.VisitListAreasResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArea operation middleware
func (sh *strictHandler) CreateArea(ctx *gin.Context) {
	var request CreateAreaRequestObject

	var body CreateAreaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArea(ctx, request.(CreateAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAreaResponseObject); ok {
		if err := validResponse.VisitCreateAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteArea operation middleware
func (sh *strictHandler) DeleteArea(ctx *gin.Context, areaId openapi_types.UUID) {
	var request DeleteAreaRequestObject

	request.AreaId = areaId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArea(ctx, request.(DeleteAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAreaResponseObject); ok {
		if err := validResponse.VisitDeleteAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteArea operation middleware
func (sh *strictHandler) ExecuteArea(ctx *gin.Context, areaId openapi_types.UUID) {
	var request ExecuteAreaRequestObject

	request.AreaId = areaId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteArea(ctx, request.(ExecuteAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExecuteAreaResponseObject); ok {
		if err := validResponse.VisitExecuteAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangeEmail operation middleware
func (sh *strictHandler) ChangeEmail(ctx *gin.Context) {
	var request ChangeEmailRequestObject

	var body ChangeEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangeEmail(ctx, request.(ChangeEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangeEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangeEmailResponseObject); ok {
		if err := validResponse.VisitChangeEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx *gin.Context) {
	var request LogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(ctx *gin.Context) {
	var request GetCurrentUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ChangePassword operation middleware
func (sh *strictHandler) ChangePassword(ctx *gin.Context) {
	var request ChangePasswordRequestObject

	var body ChangePasswordJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ChangePassword(ctx, request.(ChangePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ChangePassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ChangePasswordResponseObject); ok {
		if err := validResponse.VisitChangePasswordResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyEmail operation middleware
func (sh *strictHandler) VerifyEmail(ctx *gin.Context) {
	var request VerifyEmailRequestObject

	var body VerifyEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyEmail(ctx, request.(VerifyEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyEmailResponseObject); ok {
		if err := validResponse.VisitVerifyEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListComponents operation middleware
func (sh *strictHandler) ListComponents(ctx *gin.Context, params ListComponentsParams) {
	var request ListComponentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListComponents(ctx, request.(ListComponentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListComponents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListComponentsResponseObject); ok {
		if err := validResponse.VisitListComponentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAvailableComponents operation middleware
func (sh *strictHandler) ListAvailableComponents(ctx *gin.Context, params ListAvailableComponentsParams) {
	var request ListAvailableComponentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAvailableComponents(ctx, request.(ListAvailableComponentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAvailableComponents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAvailableComponentsResponseObject); ok {
		if err := validResponse.VisitListAvailableComponentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListIdentities operation middleware
func (sh *strictHandler) ListIdentities(ctx *gin.Context) {
	var request ListIdentitiesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListIdentities(ctx, request.(ListIdentitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListIdentities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListIdentitiesResponseObject); ok {
		if err := validResponse.VisitListIdentitiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AuthorizeOAuth operation middleware
func (sh *strictHandler) AuthorizeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request AuthorizeOAuthRequestObject

	request.Provider = provider

	var body AuthorizeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthorizeOAuth(ctx, request.(AuthorizeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthorizeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AuthorizeOAuthResponseObject); ok {
		if err := validResponse.VisitAuthorizeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExchangeOAuth operation middleware
func (sh *strictHandler) ExchangeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request ExchangeOAuthRequestObject

	request.Provider = provider

	var body ExchangeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExchangeOAuth(ctx, request.(ExchangeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExchangeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExchangeOAuthResponseObject); ok {
		if err := validResponse.VisitExchangeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListServiceProviders operation middleware
func (sh *strictHandler) ListServiceProviders(ctx *gin.Context) {
	var request ListServiceProvidersRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListServiceProviders(ctx, request.(ListServiceProvidersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListServiceProviders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListServiceProvidersResponseObject); ok {
		if err := validResponse.VisitListServiceProvidersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListServiceSubscriptions operation middleware
func (sh *strictHandler) ListServiceSubscriptions(ctx *gin.Context) {
	var request ListServiceSubscriptionsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListServiceSubscriptions(ctx, request.(ListServiceSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListServiceSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListServiceSubscriptionsResponseObject); ok {
		if err := validResponse.VisitListServiceSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscribeService operation middleware
func (sh *strictHandler) SubscribeService(ctx *gin.Context, provider OAuthProvider) {
	var request SubscribeServiceRequestObject

	request.Provider = provider

	var body SubscribeServiceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscribeService(ctx, request.(SubscribeServiceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscribeService")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeServiceResponseObject); ok {
		if err := validResponse.VisitSubscribeServiceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscribeServiceExchange operation middleware
func (sh *strictHandler) SubscribeServiceExchange(ctx *gin.Context, provider OAuthProvider) {
	var request SubscribeServiceExchangeRequestObject

	request.Provider = provider

	var body SubscribeServiceExchangeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscribeServiceExchange(ctx, request.(SubscribeServiceExchangeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscribeServiceExchange")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeServiceExchangeResponseObject); ok {
		if err := validResponse.VisitSubscribeServiceExchangeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnsubscribeService operation middleware
func (sh *strictHandler) UnsubscribeService(ctx *gin.Context, provider OAuthProvider) {
	var request UnsubscribeServiceRequestObject

	request.Provider = provider

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UnsubscribeService(ctx, request.(UnsubscribeServiceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnsubscribeService")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UnsubscribeServiceResponseObject); ok {
		if err := validResponse.VisitUnsubscribeServiceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(ctx *gin.Context) {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx, request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		if err := validResponse.VisitRegisterUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
