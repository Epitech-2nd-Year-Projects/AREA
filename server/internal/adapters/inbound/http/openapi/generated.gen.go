// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
)

// Defines values for ComponentSummaryKind.
const (
	ComponentSummaryKindAction   ComponentSummaryKind = "action"
	ComponentSummaryKindReaction ComponentSummaryKind = "reaction"
)

// Defines values for ListComponentsParamsKind.
const (
	ListComponentsParamsKindAction   ListComponentsParamsKind = "action"
	ListComponentsParamsKindReaction ListComponentsParamsKind = "reaction"
)

// AboutClient defines model for AboutClient.
type AboutClient struct {
	// Host IP address of the client performing the HTTP request.
	Host string `json:"host"`
}

// AboutComponent defines model for AboutComponent.
type AboutComponent struct {
	// Description Human-readable description of the component.
	Description string `json:"description"`

	// Name Identifier of the component.
	Name string `json:"name"`
}

// AboutResponse Aggregated platform metadata combining frontend and backend build information.
type AboutResponse struct {
	Client AboutClient `json:"client"`
	Server AboutServer `json:"server"`
}

// AboutServer defines model for AboutServer.
type AboutServer struct {
	// CurrentTime Current server time expressed as an Epoch Unix timestamp.
	CurrentTime int64 `json:"currentTime"`

	// Services List of services supported by the server.
	Services []AboutService `json:"services"`
}

// AboutService defines model for AboutService.
type AboutService struct {
	// Actions Action components provided by the service.
	Actions []AboutComponent `json:"actions"`

	// Name Service identifier.
	Name string `json:"name"`

	// Reactions Reaction components provided by the service.
	Reactions []AboutComponent `json:"reactions"`
}

// Area Automation linking an action to one or more reactions for a user.
type Area struct {
	// Action Action binding stored for an AREA automation.
	Action *AreaAction `json:"action,omitempty"`

	// CreatedAt Timestamp (UTC) when the automation was created.
	CreatedAt time.Time `json:"createdAt"`

	// Description Optional summary supplied by the user.
	Description *string `json:"description"`

	// Id Unique identifier of the automation.
	Id openapi_types.UUID `json:"id"`

	// Name Display name chosen by the user.
	Name      string         `json:"name"`
	Reactions []AreaReaction `json:"reactions"`

	// Status Lifecycle status (`enabled`, `disabled`, or `archived`).
	Status string `json:"status"`

	// UpdatedAt Timestamp (UTC) of the last update.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AreaAction Action binding stored for an AREA automation.
type AreaAction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"componentId"`

	// ConfigId Identifier of the user component configuration backing the action.
	ConfigId openapi_types.UUID `json:"configId"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AreaReaction Reaction binding stored for an AREA automation.
type AreaReaction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"componentId"`

	// ConfigId Identifier of the user component configuration backing the reaction.
	ConfigId openapi_types.UUID `json:"configId"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AuthSessionResponse Session descriptor mirroring the cookie issued by the backend.
type AuthSessionResponse struct {
	// ExpiresAt Expiration timestamp (UTC) aligning with the `area_session` cookie expiry.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// TokenType Grants semantics of the issued token; currently `session`.
	TokenType *string `json:"tokenType,omitempty"`

	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// ComponentListResponse defines model for ComponentListResponse.
type ComponentListResponse struct {
	Components []ComponentSummary `json:"components"`
}

// ComponentSummary Minimal catalog metadata required by clients to render a component reference.
type ComponentSummary struct {
	Description *string              `json:"description"`
	DisplayName string               `json:"displayName"`
	Id          openapi_types.UUID   `json:"id"`
	Kind        ComponentSummaryKind `json:"kind"`

	// Metadata Additional configuration metadata describing expected parameters.
	Metadata *map[string]interface{} `json:"metadata"`
	Name     string                  `json:"name"`

	// Provider Lightweight representation of a service provider exposing components.
	Provider ServiceProviderSummary `json:"provider"`
}

// ComponentSummaryKind defines model for ComponentSummary.Kind.
type ComponentSummaryKind string

// CreateAreaAction Configuration of the action component that triggers the automation.
type CreateAreaAction struct {
	// ComponentId Identifier of the action component selected from the catalog.
	ComponentId openapi_types.UUID `json:"componentId"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaReaction Configuration of a reaction component executed when the automation fires.
type CreateAreaReaction struct {
	// ComponentId Identifier of the reaction component selected from the catalog.
	ComponentId openapi_types.UUID `json:"componentId"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaRequest Payload used to create a new automation owned by the authenticated user.
type CreateAreaRequest struct {
	// Action Configuration of the action component that triggers the automation.
	Action CreateAreaAction `json:"action"`

	// Description Optional summary to distinguish this automation.
	Description *string `json:"description,omitempty"`

	// Name Human readable name displayed across clients.
	Name      string               `json:"name"`
	Reactions []CreateAreaReaction `json:"reactions"`
}

// IdentityListResponse defines model for IdentityListResponse.
type IdentityListResponse struct {
	Identities []IdentitySummary `json:"identities"`
}

// IdentitySummary defines model for IdentitySummary.
type IdentitySummary struct {
	ConnectedAt time.Time          `json:"connectedAt"`
	ExpiresAt   *time.Time         `json:"expiresAt"`
	Id          openapi_types.UUID `json:"id"`
	Provider    string             `json:"provider"`
	Scopes      *[]string          `json:"scopes,omitempty"`
	Subject     string             `json:"subject"`
}

// SubscribeExchangeRequest defines model for SubscribeExchangeRequest.
type SubscribeExchangeRequest struct {
	Code         string  `json:"code"`
	CodeVerifier *string `json:"codeVerifier,omitempty"`
	RedirectUri  *string `json:"redirectUri,omitempty"`
}

// SubscribeExchangeResponse defines model for SubscribeExchangeResponse.
type SubscribeExchangeResponse struct {
	Identity     *IdentitySummary    `json:"identity,omitempty"`
	Subscription SubscriptionSummary `json:"subscription"`
}

// SubscribeServiceRequest defines model for SubscribeServiceRequest.
type SubscribeServiceRequest struct {
	Prompt      *string   `json:"prompt,omitempty"`
	RedirectUri *string   `json:"redirectUri,omitempty"`
	Scopes      *[]string `json:"scopes,omitempty"`
	State       *string   `json:"state,omitempty"`
	UsePkce     *bool     `json:"usePkce,omitempty"`
}

// SubscribeServiceResponse defines model for SubscribeServiceResponse.
type SubscribeServiceResponse struct {
	Authorization *OAuthAuthorizationResponse `json:"authorization,omitempty"`
	Status        string                      `json:"status"`
	Subscription  *SubscriptionSummary        `json:"subscription,omitempty"`
}

// SubscriptionSummary defines model for SubscriptionSummary.
type SubscriptionSummary struct {
	CreatedAt   time.Time           `json:"createdAt"`
	Id          openapi_types.UUID  `json:"id"`
	IdentityId  *openapi_types.UUID `json:"identityId,omitempty"`
	ProviderId  openapi_types.UUID  `json:"providerId"`
	ScopeGrants *[]string           `json:"scopeGrants,omitempty"`
	Status      string              `json:"status"`
	UpdatedAt   time.Time           `json:"updatedAt"`
}

// ListAreasResponse Collection wrapper for automations returned to the client.
type ListAreasResponse struct {
	Areas []Area `json:"areas"`
}

// LoginRequest Credential-based authentication payload.
type LoginRequest struct {
	// Email Registered user email.
	Email openapi_types.Email `json:"email"`

	// Password Plaintext password that satisfies the backend policy.
	Password string `json:"password"`
}

// OAuthAuthorizationRequest Optional parameters forwarded to the configured OAuth provider.
type OAuthAuthorizationRequest struct {
	// Prompt Provider-specific prompt parameter allowing the user experience to be tweaked.
	Prompt *string `json:"prompt,omitempty"`

	// RedirectUri Explicit redirect URI to override the default callback registered with the provider.
	RedirectUri *string `json:"redirectUri,omitempty"`

	// Scopes Additional scopes to request from the provider.
	Scopes *[]string `json:"scopes,omitempty"`

	// State Opaque value used to maintain state between the request and callback.
	State *string `json:"state,omitempty"`

	// UsePkce Flag indicating whether PKCE should be enforced.
	UsePkce *bool `json:"usePkce,omitempty"`
}

// OAuthAuthorizationResponse Provider authorisation metadata.
type OAuthAuthorizationResponse struct {
	// AuthorizationUrl URL that the client must open to continue authorisation with the provider.
	AuthorizationUrl string `json:"authorizationUrl"`

	// CodeChallenge PKCE code challenge derived from the verifier.
	CodeChallenge *string `json:"codeChallenge,omitempty"`

	// CodeChallengeMethod Method used to compute the PKCE code challenge.
	CodeChallengeMethod *string `json:"codeChallengeMethod,omitempty"`

	// CodeVerifier PKCE code verifier to persist until the exchange completes.
	CodeVerifier *string `json:"codeVerifier,omitempty"`

	// State State echoed by the provider after authorisation.
	State *string `json:"state,omitempty"`
}

// OAuthExchangeRequest Payload received after the provider redirect to complete the exchange.
type OAuthExchangeRequest struct {
	// Code One-time authorisation code issued by the provider.
	Code string `json:"code"`

	// CodeVerifier PKCE code verifier required when the provider enforces PKCE.
	CodeVerifier *string `json:"codeVerifier,omitempty"`

	// RedirectUri Redirect URI supplied during the authorisation flow.
	RedirectUri *string `json:"redirectUri,omitempty"`

	// State Provider-issued state parameter used to prevent CSRF.
	State *string `json:"state,omitempty"`
}

// RegisterUserRequest Payload used to enrol a new AREA account prior to email verification.
type RegisterUserRequest struct {
	// Email Primary email address that receives activation and security alerts.
	Email openapi_types.Email `json:"email"`

	// Password Strong password that satisfies backend policy (min. 8 chars, letters + numbers).
	Password string `json:"password"`
}

// RegisterUserResponse Confirmation payload indicating the asynchronous verification workflow started.
type RegisterUserResponse struct {
	// ExpiresAt Expiration timestamp of the verification token.
	ExpiresAt time.Time `json:"expiresAt"`

	// UserId Unique identifier assigned to the provisioned user.
	UserId string `json:"userId"`
}

// ServiceProviderSummary Lightweight representation of a service provider exposing components.
type ServiceProviderSummary struct {
	DisplayName string             `json:"displayName"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
}

// User Detailed user payload returned by authenticated endpoints.
type User struct {
	// CreatedAt Account creation timestamp in UTC.
	CreatedAt time.Time `json:"createdAt"`

	// Email Primary email associated with the account.
	Email openapi_types.Email `json:"email"`

	// Id Unique identifier assigned to the user.
	Id openapi_types.UUID `json:"id"`

	// LastLoginAt Timestamp of the most recent successful login.
	LastLoginAt *time.Time `json:"lastLoginAt"`

	// Status Lifecycle status (`pending`, `active`, etc.).
	Status string `json:"status"`

	// UpdatedAt Timestamp of the latest account update in UTC.
	UpdatedAt time.Time `json:"updatedAt"`
}

// UserResponse Public representation of the authenticated user.
type UserResponse struct {
	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// VerifyEmailRequest Token issued in the verification email used to activate the account.
type VerifyEmailRequest struct {
	// Token Single-use verification token issued as part of registration.
	Token string `json:"token"`
}

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// ListComponentsParams defines parameters for ListComponents.
type ListComponentsParams struct {
	// Kind Filter components by kind
	Kind *ListComponentsParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// Provider Filter components by provider slug (for example `google`)
	Provider *string `form:"provider,omitempty" json:"provider,omitempty"`
}

// ListComponentsParamsKind defines parameters for ListComponents.
type ListComponentsParamsKind string

// CreateAreaJSONRequestBody defines body for CreateArea for application/json ContentType.
type CreateAreaJSONRequestBody = CreateAreaRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// VerifyEmailJSONRequestBody defines body for VerifyEmail for application/json ContentType.
type VerifyEmailJSONRequestBody = VerifyEmailRequest

// AuthorizeOAuthJSONRequestBody defines body for AuthorizeOAuth for application/json ContentType.
type AuthorizeOAuthJSONRequestBody = OAuthAuthorizationRequest

// ExchangeOAuthJSONRequestBody defines body for ExchangeOAuth for application/json ContentType.
type ExchangeOAuthJSONRequestBody = OAuthExchangeRequest

// SubscribeServiceJSONRequestBody defines body for SubscribeService for application/json ContentType.
type SubscribeServiceJSONRequestBody = SubscribeServiceRequest

// SubscribeServiceExchangeJSONRequestBody defines body for SubscribeServiceExchange for application/json ContentType.
type SubscribeServiceExchangeJSONRequestBody = SubscribeExchangeRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(c *gin.Context)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(c *gin.Context)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(c *gin.Context)
	// Execute area reactions immediately
	// (POST /v1/areas/{areaId}/execute)
	ExecuteArea(c *gin.Context, areaId openapi_types.UUID)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(c *gin.Context)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(c *gin.Context)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(c *gin.Context)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(c *gin.Context)
	// List service components
	// (GET /v1/components)
	ListComponents(c *gin.Context, params ListComponentsParams)
	// List components available to the current user
	// (GET /v1/components/available)
	ListAvailableComponents(c *gin.Context, params ListComponentsParams)
	// List connected identities
	// (GET /v1/identities)
	ListIdentities(c *gin.Context)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(c *gin.Context, provider OAuthProvider)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(c *gin.Context, provider OAuthProvider)
	// Subscribe current user to service provider
	// (POST /v1/services/{provider}/subscribe)
	SubscribeService(c *gin.Context, provider OAuthProvider)
	// Complete service subscription exchange
	// (POST /v1/services/{provider}/subscribe/exchange)
	SubscribeServiceExchange(c *gin.Context, provider OAuthProvider)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAbout operation middleware
func (siw *ServerInterfaceWrapper) GetAbout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAbout(c)
}

// ListAreas operation middleware
func (siw *ServerInterfaceWrapper) ListAreas(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAreas(c)
}

// CreateArea operation middleware
func (siw *ServerInterfaceWrapper) CreateArea(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateArea(c)
}

// ExecuteArea operation middleware
func (siw *ServerInterfaceWrapper) ExecuteArea(c *gin.Context) {

	var err error

	// ------------- Path parameter "areaId" -------------
	var areaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "areaId", c.Param("areaId"), &areaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter areaId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExecuteArea(c, areaId)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUser(c)
}

// VerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifyEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyEmail(c)
}

// ListComponents operation middleware
func (siw *ServerInterfaceWrapper) ListComponents(c *gin.Context) {

	var err error

	c.Set(SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListComponentsParams

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", c.Request.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListComponents(c, params)
}

// ListAvailableComponents operation middleware
func (siw *ServerInterfaceWrapper) ListAvailableComponents(c *gin.Context) {

	var err error

	c.Set(SessionAuthScopes, []string{})

	var params ListComponentsParams

	err = runtime.BindQueryParameter("form", true, false, "kind", c.Request.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kind: %w", err), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAvailableComponents(c, params)
}

// ListIdentities operation middleware
func (siw *ServerInterfaceWrapper) ListIdentities(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListIdentities(c)
}

// AuthorizeOAuth operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthorizeOAuth(c, provider)
}

// ExchangeOAuth operation middleware
func (siw *ServerInterfaceWrapper) ExchangeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeOAuth(c, provider)
}

// SubscribeService operation middleware
func (siw *ServerInterfaceWrapper) SubscribeService(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscribeService(c, provider)
}

// SubscribeServiceExchange operation middleware
func (siw *ServerInterfaceWrapper) SubscribeServiceExchange(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscribeServiceExchange(c, provider)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/about.json", wrapper.GetAbout)
	router.GET(options.BaseURL+"/v1/areas", wrapper.ListAreas)
	router.POST(options.BaseURL+"/v1/areas", wrapper.CreateArea)
	router.POST(options.BaseURL+"/v1/areas/:areaId/execute", wrapper.ExecuteArea)
	router.POST(options.BaseURL+"/v1/auth/login", wrapper.Login)
	router.POST(options.BaseURL+"/v1/auth/logout", wrapper.Logout)
	router.GET(options.BaseURL+"/v1/auth/me", wrapper.GetCurrentUser)
	router.POST(options.BaseURL+"/v1/auth/verify", wrapper.VerifyEmail)
	router.GET(options.BaseURL+"/v1/components", wrapper.ListComponents)
	router.GET(options.BaseURL+"/v1/components/available", wrapper.ListAvailableComponents)
	router.GET(options.BaseURL+"/v1/identities", wrapper.ListIdentities)
	router.POST(options.BaseURL+"/v1/oauth/:provider/authorize", wrapper.AuthorizeOAuth)
	router.POST(options.BaseURL+"/v1/oauth/:provider/exchange", wrapper.ExchangeOAuth)
	router.POST(options.BaseURL+"/v1/services/:provider/subscribe", wrapper.SubscribeService)
	router.POST(options.BaseURL+"/v1/services/:provider/subscribe/exchange", wrapper.SubscribeServiceExchange)
	router.POST(options.BaseURL+"/v1/users", wrapper.RegisterUser)
}

type GetAboutRequestObject struct {
}

type GetAboutResponseObject interface {
	VisitGetAboutResponse(w http.ResponseWriter) error
}

type GetAbout200JSONResponse AboutResponse

func (response GetAbout200JSONResponse) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAbout404Response struct {
}

func (response GetAbout404Response) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListAreasRequestObject struct {
}

type ListAreasResponseObject interface {
	VisitListAreasResponse(w http.ResponseWriter) error
}

type ListAreas200JSONResponse ListAreasResponse

func (response ListAreas200JSONResponse) VisitListAreasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAreaRequestObject struct {
	Body *CreateAreaJSONRequestBody
}

type CreateAreaResponseObject interface {
	VisitCreateAreaResponse(w http.ResponseWriter) error
}

type CreateArea201JSONResponse Area

func (response CreateArea201JSONResponse) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArea400Response struct {
}

func (response CreateArea400Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateArea401Response struct {
}

func (response CreateArea401Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ExecuteAreaRequestObject struct {
	AreaId openapi_types.UUID `json:"areaId"`
}

type ExecuteAreaResponseObject interface {
	VisitExecuteAreaResponse(w http.ResponseWriter) error
}

type ExecuteArea202Response struct {
}

func (response ExecuteArea202Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type ExecuteArea401Response struct {
}

func (response ExecuteArea401Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ExecuteArea403Response struct {
}

func (response ExecuteArea403Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type ExecuteArea404Response struct {
}

func (response ExecuteArea404Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExecuteArea500Response struct {
}

func (response ExecuteArea500Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200JSONResponse struct {
	Body    AuthSessionResponse
	Headers Login200ResponseHeaders
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type Login400Response struct {
}

func (response Login400Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Login403Response struct {
}

func (response Login403Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401Response struct {
}

func (response Logout401Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse UserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401Response struct {
}

func (response GetCurrentUser401Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type VerifyEmailRequestObject struct {
	Body *VerifyEmailJSONRequestBody
}

type VerifyEmailResponseObject interface {
	VisitVerifyEmailResponse(w http.ResponseWriter) error
}

type VerifyEmail200ResponseHeaders struct {
	SetCookie string
}

type VerifyEmail200JSONResponse struct {
	Body    AuthSessionResponse
	Headers VerifyEmail200ResponseHeaders
}

func (response VerifyEmail200JSONResponse) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyEmail400Response struct {
}

func (response VerifyEmail400Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type VerifyEmail410Response struct {
}

func (response VerifyEmail410Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(410)
	return nil
}

type ListComponentsRequestObject struct {
	Params ListComponentsParams
}

type ListComponentsResponseObject interface {
	VisitListComponentsResponse(w http.ResponseWriter) error
}

type ListComponents200JSONResponse ComponentListResponse

func (response ListComponents200JSONResponse) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListComponents400Response struct {
}

func (response ListComponents400Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListComponents401Response struct {
}

func (response ListComponents401Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListComponents500Response struct {
}

func (response ListComponents500Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ListIdentitiesRequestObject struct {
}

type ListIdentitiesResponseObject interface {
	VisitListIdentitiesResponse(w http.ResponseWriter) error
}

type ListIdentities200JSONResponse IdentityListResponse

func (response ListIdentities200JSONResponse) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListIdentities401Response struct {
}

func (response ListIdentities401Response) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListIdentities500Response struct {
}

func (response ListIdentities500Response) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AuthorizeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *AuthorizeOAuthJSONRequestBody
}

type AuthorizeOAuthResponseObject interface {
	VisitAuthorizeOAuthResponse(w http.ResponseWriter) error
}

type AuthorizeOAuth200JSONResponse OAuthAuthorizationResponse

func (response AuthorizeOAuth200JSONResponse) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthorizeOAuth400Response struct {
}

func (response AuthorizeOAuth400Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthorizeOAuth404Response struct {
}

func (response AuthorizeOAuth404Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthorizeOAuth501Response struct {
}

func (response AuthorizeOAuth501Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *ExchangeOAuthJSONRequestBody
}

type ExchangeOAuthResponseObject interface {
	VisitExchangeOAuthResponse(w http.ResponseWriter) error
}

type ExchangeOAuth200ResponseHeaders struct {
	SetCookie string
}

type ExchangeOAuth200JSONResponse struct {
	Body    AuthSessionResponse
	Headers ExchangeOAuth200ResponseHeaders
}

func (response ExchangeOAuth200JSONResponse) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExchangeOAuth400Response struct {
}

func (response ExchangeOAuth400Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ExchangeOAuth404Response struct {
}

func (response ExchangeOAuth404Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExchangeOAuth501Response struct {
}

func (response ExchangeOAuth501Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuth502Response struct {
}

func (response ExchangeOAuth502Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type SubscribeServiceRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *SubscribeServiceJSONRequestBody
}

type SubscribeServiceResponseObject interface {
	VisitSubscribeServiceResponse(w http.ResponseWriter) error
}

type SubscribeService200JSONResponse SubscribeServiceResponse

func (response SubscribeService200JSONResponse) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubscribeService400Response struct {
}

func (response SubscribeService400Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SubscribeService401Response struct {
}

func (response SubscribeService401Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SubscribeService404Response struct {
}

func (response SubscribeService404Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SubscribeService409Response struct {
}

func (response SubscribeService409Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type SubscribeService502Response struct {
}

func (response SubscribeService502Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type SubscribeServiceExchangeRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *SubscribeServiceExchangeJSONRequestBody
}

type SubscribeServiceExchangeResponseObject interface {
	VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error
}

type SubscribeServiceExchange200JSONResponse SubscribeExchangeResponse

func (response SubscribeServiceExchange200JSONResponse) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubscribeServiceExchange400Response struct {
}

func (response SubscribeServiceExchange400Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SubscribeServiceExchange401Response struct {
}

func (response SubscribeServiceExchange401Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SubscribeServiceExchange404Response struct {
}

func (response SubscribeServiceExchange404Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SubscribeServiceExchange409Response struct {
}

func (response SubscribeServiceExchange409Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type SubscribeServiceExchange502Response struct {
}

func (response SubscribeServiceExchange502Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(w http.ResponseWriter) error
}

type RegisterUser202JSONResponse RegisterUserResponse

func (response RegisterUser202JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser400Response struct {
}

func (response RegisterUser400Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterUser409Response struct {
}

func (response RegisterUser409Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(ctx context.Context, request GetAboutRequestObject) (GetAboutResponseObject, error)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(ctx context.Context, request ListAreasRequestObject) (ListAreasResponseObject, error)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(ctx context.Context, request CreateAreaRequestObject) (CreateAreaResponseObject, error)
	// Execute area reactions immediately
	// (POST /v1/areas/{areaId}/execute)
	ExecuteArea(ctx context.Context, request ExecuteAreaRequestObject) (ExecuteAreaResponseObject, error)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(ctx context.Context, request VerifyEmailRequestObject) (VerifyEmailResponseObject, error)
	// List service components
	// (GET /v1/components)
	ListComponents(ctx context.Context, request ListComponentsRequestObject) (ListComponentsResponseObject, error)
	// List components available to the current user
	// (GET /v1/components/available)
	ListAvailableComponents(ctx context.Context, request ListComponentsRequestObject) (ListComponentsResponseObject, error)
	// List connected identities
	// (GET /v1/identities)
	ListIdentities(ctx context.Context, request ListIdentitiesRequestObject) (ListIdentitiesResponseObject, error)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(ctx context.Context, request AuthorizeOAuthRequestObject) (AuthorizeOAuthResponseObject, error)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(ctx context.Context, request ExchangeOAuthRequestObject) (ExchangeOAuthResponseObject, error)
	// Subscribe current user to service provider
	// (POST /v1/services/{provider}/subscribe)
	SubscribeService(ctx context.Context, request SubscribeServiceRequestObject) (SubscribeServiceResponseObject, error)
	// Complete service subscription exchange
	// (POST /v1/services/{provider}/subscribe/exchange)
	SubscribeServiceExchange(ctx context.Context, request SubscribeServiceExchangeRequestObject) (SubscribeServiceExchangeResponseObject, error)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAbout operation middleware
func (sh *strictHandler) GetAbout(ctx *gin.Context) {
	var request GetAboutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAbout(ctx, request.(GetAboutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAbout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAboutResponseObject); ok {
		if err := validResponse.VisitGetAboutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAreas operation middleware
func (sh *strictHandler) ListAreas(ctx *gin.Context) {
	var request ListAreasRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAreas(ctx, request.(ListAreasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAreas")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAreasResponseObject); ok {
		if err := validResponse.VisitListAreasResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArea operation middleware
func (sh *strictHandler) CreateArea(ctx *gin.Context) {
	var request CreateAreaRequestObject

	var body CreateAreaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArea(ctx, request.(CreateAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAreaResponseObject); ok {
		if err := validResponse.VisitCreateAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteArea operation middleware
func (sh *strictHandler) ExecuteArea(ctx *gin.Context, areaId openapi_types.UUID) {
	var request ExecuteAreaRequestObject

	request.AreaId = areaId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteArea(ctx, request.(ExecuteAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExecuteAreaResponseObject); ok {
		if err := validResponse.VisitExecuteAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx *gin.Context) {
	var request LogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(ctx *gin.Context) {
	var request GetCurrentUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyEmail operation middleware
func (sh *strictHandler) VerifyEmail(ctx *gin.Context) {
	var request VerifyEmailRequestObject

	var body VerifyEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyEmail(ctx, request.(VerifyEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyEmailResponseObject); ok {
		if err := validResponse.VisitVerifyEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListComponents operation middleware
func (sh *strictHandler) ListComponents(ctx *gin.Context, params ListComponentsParams) {
	var request ListComponentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListComponents(ctx, request.(ListComponentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListComponents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListComponentsResponseObject); ok {
		if err := validResponse.VisitListComponentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

func (sh *strictHandler) ListAvailableComponents(ctx *gin.Context, params ListComponentsParams) {
	var request ListComponentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAvailableComponents(ctx, request.(ListComponentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAvailableComponents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListComponentsResponseObject); ok {
		if err := validResponse.VisitListComponentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListIdentities operation middleware
func (sh *strictHandler) ListIdentities(ctx *gin.Context) {
	var request ListIdentitiesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListIdentities(ctx, request.(ListIdentitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListIdentities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListIdentitiesResponseObject); ok {
		if err := validResponse.VisitListIdentitiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AuthorizeOAuth operation middleware
func (sh *strictHandler) AuthorizeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request AuthorizeOAuthRequestObject

	request.Provider = provider

	var body AuthorizeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthorizeOAuth(ctx, request.(AuthorizeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthorizeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AuthorizeOAuthResponseObject); ok {
		if err := validResponse.VisitAuthorizeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExchangeOAuth operation middleware
func (sh *strictHandler) ExchangeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request ExchangeOAuthRequestObject

	request.Provider = provider

	var body ExchangeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExchangeOAuth(ctx, request.(ExchangeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExchangeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExchangeOAuthResponseObject); ok {
		if err := validResponse.VisitExchangeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscribeService operation middleware
func (sh *strictHandler) SubscribeService(ctx *gin.Context, provider OAuthProvider) {
	var request SubscribeServiceRequestObject

	request.Provider = provider

	var body SubscribeServiceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		if !errors.Is(err, io.EOF) {
			ctx.Status(http.StatusBadRequest)
			ctx.Error(err)
			return
		}
	} else {
		request.Body = &body
	}

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscribeService(ctx, request.(SubscribeServiceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscribeService")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeServiceResponseObject); ok {
		if err := validResponse.VisitSubscribeServiceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscribeServiceExchange operation middleware
func (sh *strictHandler) SubscribeServiceExchange(ctx *gin.Context, provider OAuthProvider) {
	var request SubscribeServiceExchangeRequestObject

	request.Provider = provider

	var body SubscribeServiceExchangeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscribeServiceExchange(ctx, request.(SubscribeServiceExchangeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscribeServiceExchange")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeServiceExchangeResponseObject); ok {
		if err := validResponse.VisitSubscribeServiceExchangeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(ctx *gin.Context) {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx, request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		if err := validResponse.VisitRegisterUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
