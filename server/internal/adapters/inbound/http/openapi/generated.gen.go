// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
)

// Defines values for ComponentSummaryKind.
const (
	Action   ComponentSummaryKind = "action"
	Reaction ComponentSummaryKind = "reaction"
)

// AboutClient Current client bundle fingerprint exposed to public consumers.
type AboutClient struct {
	// Host IP address of the client performing the request.
	Host *string `json:"host,omitempty"`

	// Version Semantic version of the distributed web/mobile clients.
	Version string `json:"version"`
}

// AboutResponse Aggregated platform metadata combining frontend and backend build information.
type AboutResponse struct {
	// Client Current client bundle fingerprint exposed to public consumers.
	Client AboutClient `json:"client"`

	// Server Backend release information.
	Server AboutServer `json:"server"`
}

// AboutServer Backend release information.
type AboutServer struct {
	// Commit Git commit hash deployed to the environment.
	Commit string `json:"commit"`

	// CurrentTime Current server time expressed as an Epoch Unix timestamp.
	CurrentTime int64 `json:"current_time"`

	// Services Catalog of services exposed by the backend.
	Services []Service `json:"services"`

	// Version Semantic version of the backend deployment.
	Version string `json:"version"`
}

// Area Automation linking an action to one or more reactions for a user.
type Area struct {
	// Action Action binding stored for an AREA automation.
	Action *AreaAction `json:"action,omitempty"`

	// CreatedAt Timestamp (UTC) when the automation was created.
	CreatedAt time.Time `json:"created_at"`

	// Description Optional summary supplied by the user.
	Description *string `json:"description"`

	// Id Unique identifier of the automation.
	Id openapi_types.UUID `json:"id"`

	// Name Display name chosen by the user.
	Name      string         `json:"name"`
	Reactions []AreaReaction `json:"reactions"`

	// Status Lifecycle status (`enabled`, `disabled`, or `archived`).
	Status string `json:"status"`

	// UpdatedAt Timestamp (UTC) of the last update.
	UpdatedAt time.Time `json:"updated_at"`
}

// AreaAction Action binding stored for an AREA automation.
type AreaAction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"component_id"`

	// ConfigId Identifier of the user component configuration backing the action.
	ConfigId openapi_types.UUID `json:"config_id"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AreaReaction Reaction binding stored for an AREA automation.
type AreaReaction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"component_id"`

	// ConfigId Identifier of the user component configuration backing the reaction.
	ConfigId openapi_types.UUID `json:"config_id"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AuthSessionResponse Session descriptor mirroring the cookie issued by the backend.
type AuthSessionResponse struct {
	// ExpiresAt Expiration timestamp (UTC) aligning with the `area_session` cookie expiry.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// TokenType Grants semantics of the issued token; currently `session`.
	TokenType *string `json:"tokenType,omitempty"`

	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// Component Action or reaction component exposed by a service.
type Component struct {
	// Description Human-readable description of the component behaviour.
	Description string `json:"description"`

	// Name Component identifier.
	Name string `json:"name"`
}

// ComponentSummary Minimal catalog metadata required by clients to render a component reference.
type ComponentSummary struct {
	Description *string              `json:"description"`
	DisplayName string               `json:"display_name"`
	Id          openapi_types.UUID   `json:"id"`
	Kind        ComponentSummaryKind `json:"kind"`
	Name        string               `json:"name"`

	// Provider Lightweight representation of a service provider exposing components.
	Provider ServiceProviderSummary `json:"provider"`
}

// ComponentSummaryKind defines model for ComponentSummary.Kind.
type ComponentSummaryKind string

// CreateAreaAction Configuration of the action component that triggers the automation.
type CreateAreaAction struct {
	// ComponentId Identifier of the action component selected from the catalog.
	ComponentId openapi_types.UUID `json:"component_id"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaReaction Configuration of a reaction component executed when the automation fires.
type CreateAreaReaction struct {
	// ComponentId Identifier of the reaction component selected from the catalog.
	ComponentId openapi_types.UUID `json:"component_id"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaRequest Payload used to create a new automation owned by the authenticated user.
type CreateAreaRequest struct {
	// Action Configuration of the action component that triggers the automation.
	Action CreateAreaAction `json:"action"`

	// Description Optional summary to distinguish this automation.
	Description *string `json:"description,omitempty"`

	// Name Human readable name displayed across clients.
	Name      string               `json:"name"`
	Reactions []CreateAreaReaction `json:"reactions"`
}

// ListAreasResponse Collection wrapper for automations returned to the client.
type ListAreasResponse struct {
	Areas []Area `json:"areas"`
}

// LoginRequest Credential-based authentication payload.
type LoginRequest struct {
	// Email Registered user email.
	Email openapi_types.Email `json:"email"`

	// Password Plaintext password that satisfies the backend policy.
	Password string `json:"password"`
}

// OAuthAuthorizationRequest Optional parameters forwarded to the configured OAuth provider.
type OAuthAuthorizationRequest struct {
	// Prompt Provider-specific prompt parameter allowing the user experience to be tweaked.
	Prompt *string `json:"prompt,omitempty"`

	// RedirectUri Explicit redirect URI to override the default callback registered with the provider.
	RedirectUri *string `json:"redirectUri,omitempty"`

	// Scopes Additional scopes to request from the provider.
	Scopes *[]string `json:"scopes,omitempty"`

	// State Opaque value used to maintain state between the request and callback.
	State *string `json:"state,omitempty"`

	// UsePkce Flag indicating whether PKCE should be enforced.
	UsePkce *bool `json:"usePkce,omitempty"`
}

// OAuthAuthorizationResponse Provider authorisation metadata.
type OAuthAuthorizationResponse struct {
	// AuthorizationUrl URL that the client must open to continue authorisation with the provider.
	AuthorizationUrl string `json:"authorizationUrl"`

	// CodeChallenge PKCE code challenge derived from the verifier.
	CodeChallenge *string `json:"codeChallenge,omitempty"`

	// CodeChallengeMethod Method used to compute the PKCE code challenge.
	CodeChallengeMethod *string `json:"codeChallengeMethod,omitempty"`

	// CodeVerifier PKCE code verifier to persist until the exchange completes.
	CodeVerifier *string `json:"codeVerifier,omitempty"`

	// State State echoed by the provider after authorisation.
	State *string `json:"state,omitempty"`
}

// OAuthExchangeRequest Payload received after the provider redirect to complete the exchange.
type OAuthExchangeRequest struct {
	// Code One-time authorisation code issued by the provider.
	Code string `json:"code"`

	// CodeVerifier PKCE code verifier required when the provider enforces PKCE.
	CodeVerifier *string `json:"code_verifier,omitempty"`

	// RedirectUri Redirect URI supplied during the authorisation flow.
	RedirectUri *string `json:"redirect_uri,omitempty"`

	// State Provider-issued state parameter used to prevent CSRF.
	State *string `json:"state,omitempty"`
}

// RegisterUserRequest Payload used to enrol a new AREA account prior to email verification.
type RegisterUserRequest struct {
	// Email Primary email address that receives activation and security alerts.
	Email openapi_types.Email `json:"email"`

	// Password Strong password that satisfies backend policy (min. 8 chars, letters + numbers).
	Password string `json:"password"`
}

// RegisterUserResponse Confirmation payload indicating the asynchronous verification workflow started.
type RegisterUserResponse struct {
	// ExpiresAt Expiration timestamp of the verification token.
	ExpiresAt time.Time `json:"expires_at"`

	// UserId Unique identifier assigned to the provisioned user.
	UserId string `json:"userId"`
}

// Service Service published in the automation catalog.
type Service struct {
	Actions []Component `json:"actions"`

	// Name Identifier of the service.
	Name      string      `json:"name"`
	Reactions []Component `json:"reactions"`
}

// ServiceProviderSummary Lightweight representation of a service provider exposing components.
type ServiceProviderSummary struct {
	DisplayName string             `json:"display_name"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
}

// User Detailed user payload returned by authenticated endpoints.
type User struct {
	// CreatedAt Account creation timestamp in UTC.
	CreatedAt time.Time `json:"created_at"`

	// Email Primary email associated with the account.
	Email openapi_types.Email `json:"email"`

	// Id Unique identifier assigned to the user.
	Id openapi_types.UUID `json:"id"`

	// LastLoginAt Timestamp of the most recent successful login.
	LastLoginAt *time.Time `json:"last_login_at"`

	// Status Lifecycle status (`pending`, `active`, etc.).
	Status string `json:"status"`

	// UpdatedAt Timestamp of the latest account update in UTC.
	UpdatedAt time.Time `json:"updated_at"`
}

// UserResponse Public representation of the authenticated user.
type UserResponse struct {
	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// VerifyEmailRequest Token issued in the verification email used to activate the account.
type VerifyEmailRequest struct {
	// Token Single-use verification token issued as part of registration.
	Token string `json:"token"`
}

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// CreateAreaJSONRequestBody defines body for CreateArea for application/json ContentType.
type CreateAreaJSONRequestBody = CreateAreaRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// VerifyEmailJSONRequestBody defines body for VerifyEmail for application/json ContentType.
type VerifyEmailJSONRequestBody = VerifyEmailRequest

// AuthorizeOAuthJSONRequestBody defines body for AuthorizeOAuth for application/json ContentType.
type AuthorizeOAuthJSONRequestBody = OAuthAuthorizationRequest

// ExchangeOAuthJSONRequestBody defines body for ExchangeOAuth for application/json ContentType.
type ExchangeOAuthJSONRequestBody = OAuthExchangeRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(c *gin.Context)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(c *gin.Context)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(c *gin.Context)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(c *gin.Context)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(c *gin.Context)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(c *gin.Context)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(c *gin.Context)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(c *gin.Context, provider OAuthProvider)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(c *gin.Context, provider OAuthProvider)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAbout operation middleware
func (siw *ServerInterfaceWrapper) GetAbout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAbout(c)
}

// ListAreas operation middleware
func (siw *ServerInterfaceWrapper) ListAreas(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAreas(c)
}

// CreateArea operation middleware
func (siw *ServerInterfaceWrapper) CreateArea(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateArea(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUser(c)
}

// VerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifyEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyEmail(c)
}

// AuthorizeOAuth operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthorizeOAuth(c, provider)
}

// ExchangeOAuth operation middleware
func (siw *ServerInterfaceWrapper) ExchangeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeOAuth(c, provider)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/about.json", wrapper.GetAbout)
	router.GET(options.BaseURL+"/v1/areas", wrapper.ListAreas)
	router.POST(options.BaseURL+"/v1/areas", wrapper.CreateArea)
	router.POST(options.BaseURL+"/v1/auth/login", wrapper.Login)
	router.POST(options.BaseURL+"/v1/auth/logout", wrapper.Logout)
	router.GET(options.BaseURL+"/v1/auth/me", wrapper.GetCurrentUser)
	router.POST(options.BaseURL+"/v1/auth/verify", wrapper.VerifyEmail)
	router.POST(options.BaseURL+"/v1/oauth/:provider/authorize", wrapper.AuthorizeOAuth)
	router.POST(options.BaseURL+"/v1/oauth/:provider/exchange", wrapper.ExchangeOAuth)
	router.POST(options.BaseURL+"/v1/users", wrapper.RegisterUser)
}

type GetAboutRequestObject struct {
}

type GetAboutResponseObject interface {
	VisitGetAboutResponse(w http.ResponseWriter) error
}

type GetAbout200JSONResponse AboutResponse

func (response GetAbout200JSONResponse) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAbout404Response struct {
}

func (response GetAbout404Response) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListAreasRequestObject struct {
}

type ListAreasResponseObject interface {
	VisitListAreasResponse(w http.ResponseWriter) error
}

type ListAreas200JSONResponse ListAreasResponse

func (response ListAreas200JSONResponse) VisitListAreasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAreaRequestObject struct {
	Body *CreateAreaJSONRequestBody
}

type CreateAreaResponseObject interface {
	VisitCreateAreaResponse(w http.ResponseWriter) error
}

type CreateArea201JSONResponse Area

func (response CreateArea201JSONResponse) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArea400Response struct {
}

func (response CreateArea400Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateArea401Response struct {
}

func (response CreateArea401Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200JSONResponse struct {
	Body    AuthSessionResponse
	Headers Login200ResponseHeaders
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type Login400Response struct {
}

func (response Login400Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Login403Response struct {
}

func (response Login403Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401Response struct {
}

func (response Logout401Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse UserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401Response struct {
}

func (response GetCurrentUser401Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type VerifyEmailRequestObject struct {
	Body *VerifyEmailJSONRequestBody
}

type VerifyEmailResponseObject interface {
	VisitVerifyEmailResponse(w http.ResponseWriter) error
}

type VerifyEmail200ResponseHeaders struct {
	SetCookie string
}

type VerifyEmail200JSONResponse struct {
	Body    AuthSessionResponse
	Headers VerifyEmail200ResponseHeaders
}

func (response VerifyEmail200JSONResponse) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyEmail400Response struct {
}

func (response VerifyEmail400Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type VerifyEmail410Response struct {
}

func (response VerifyEmail410Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(410)
	return nil
}

type AuthorizeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *AuthorizeOAuthJSONRequestBody
}

type AuthorizeOAuthResponseObject interface {
	VisitAuthorizeOAuthResponse(w http.ResponseWriter) error
}

type AuthorizeOAuth200JSONResponse OAuthAuthorizationResponse

func (response AuthorizeOAuth200JSONResponse) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthorizeOAuth400Response struct {
}

func (response AuthorizeOAuth400Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthorizeOAuth404Response struct {
}

func (response AuthorizeOAuth404Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthorizeOAuth501Response struct {
}

func (response AuthorizeOAuth501Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *ExchangeOAuthJSONRequestBody
}

type ExchangeOAuthResponseObject interface {
	VisitExchangeOAuthResponse(w http.ResponseWriter) error
}

type ExchangeOAuth200ResponseHeaders struct {
	SetCookie string
}

type ExchangeOAuth200JSONResponse struct {
	Body    AuthSessionResponse
	Headers ExchangeOAuth200ResponseHeaders
}

func (response ExchangeOAuth200JSONResponse) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExchangeOAuth400Response struct {
}

func (response ExchangeOAuth400Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ExchangeOAuth404Response struct {
}

func (response ExchangeOAuth404Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExchangeOAuth501Response struct {
}

func (response ExchangeOAuth501Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuth502Response struct {
}

func (response ExchangeOAuth502Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(w http.ResponseWriter) error
}

type RegisterUser202JSONResponse RegisterUserResponse

func (response RegisterUser202JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser400Response struct {
}

func (response RegisterUser400Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterUser409Response struct {
}

func (response RegisterUser409Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(ctx context.Context, request GetAboutRequestObject) (GetAboutResponseObject, error)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(ctx context.Context, request ListAreasRequestObject) (ListAreasResponseObject, error)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(ctx context.Context, request CreateAreaRequestObject) (CreateAreaResponseObject, error)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(ctx context.Context, request VerifyEmailRequestObject) (VerifyEmailResponseObject, error)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(ctx context.Context, request AuthorizeOAuthRequestObject) (AuthorizeOAuthResponseObject, error)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(ctx context.Context, request ExchangeOAuthRequestObject) (ExchangeOAuthResponseObject, error)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAbout operation middleware
func (sh *strictHandler) GetAbout(ctx *gin.Context) {
	var request GetAboutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAbout(ctx, request.(GetAboutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAbout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAboutResponseObject); ok {
		if err := validResponse.VisitGetAboutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAreas operation middleware
func (sh *strictHandler) ListAreas(ctx *gin.Context) {
	var request ListAreasRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAreas(ctx, request.(ListAreasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAreas")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAreasResponseObject); ok {
		if err := validResponse.VisitListAreasResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArea operation middleware
func (sh *strictHandler) CreateArea(ctx *gin.Context) {
	var request CreateAreaRequestObject

	var body CreateAreaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArea(ctx, request.(CreateAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAreaResponseObject); ok {
		if err := validResponse.VisitCreateAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx *gin.Context) {
	var request LogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(ctx *gin.Context) {
	var request GetCurrentUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyEmail operation middleware
func (sh *strictHandler) VerifyEmail(ctx *gin.Context) {
	var request VerifyEmailRequestObject

	var body VerifyEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyEmail(ctx, request.(VerifyEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyEmailResponseObject); ok {
		if err := validResponse.VisitVerifyEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AuthorizeOAuth operation middleware
func (sh *strictHandler) AuthorizeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request AuthorizeOAuthRequestObject

	request.Provider = provider

	var body AuthorizeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthorizeOAuth(ctx, request.(AuthorizeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthorizeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AuthorizeOAuthResponseObject); ok {
		if err := validResponse.VisitAuthorizeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExchangeOAuth operation middleware
func (sh *strictHandler) ExchangeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request ExchangeOAuthRequestObject

	request.Provider = provider

	var body ExchangeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExchangeOAuth(ctx, request.(ExchangeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExchangeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExchangeOAuthResponseObject); ok {
		if err := validResponse.VisitExchangeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(ctx *gin.Context) {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx, request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		if err := validResponse.VisitRegisterUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4J6e/r5/e/9/AQAA//+QMihGQ3QAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
