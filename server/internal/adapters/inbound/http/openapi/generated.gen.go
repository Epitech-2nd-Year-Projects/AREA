// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SessionAuthScopes = "sessionAuth.Scopes"
)

// Defines values for ComponentSummaryKind.
const (
	ComponentSummaryKindAction   ComponentSummaryKind = "action"
	ComponentSummaryKindReaction ComponentSummaryKind = "reaction"
)

// Defines values for ServiceProviderDetailOauthType.
const (
	Apikey ServiceProviderDetailOauthType = "apikey"
	None   ServiceProviderDetailOauthType = "none"
	Oauth2 ServiceProviderDetailOauthType = "oauth2"
)

// Defines values for SubscribeServiceResponseStatus.
const (
	AuthorizationRequired SubscribeServiceResponseStatus = "authorization_required"
	Subscribed            SubscribeServiceResponseStatus = "subscribed"
)

// Defines values for ListComponentsParamsKind.
const (
	ListComponentsParamsKindAction   ListComponentsParamsKind = "action"
	ListComponentsParamsKindReaction ListComponentsParamsKind = "reaction"
)

// Defines values for ListAvailableComponentsParamsKind.
const (
	Action   ListAvailableComponentsParamsKind = "action"
	Reaction ListAvailableComponentsParamsKind = "reaction"
)

// AboutClient defines model for AboutClient.
type AboutClient struct {
	// Host IP address of the client performing the HTTP request.
	Host string `json:"host"`
}

// AboutComponent defines model for AboutComponent.
type AboutComponent struct {
	// Description Human-readable description of the component.
	Description string `json:"description"`

	// Name Identifier of the component.
	Name string `json:"name"`
}

// AboutResponse Aggregated platform metadata combining frontend and backend build information.
type AboutResponse struct {
	Client AboutClient `json:"client"`
	Server AboutServer `json:"server"`
}

// AboutServer defines model for AboutServer.
type AboutServer struct {
	// CurrentTime Current server time expressed as an Epoch Unix timestamp.
	CurrentTime int64 `json:"currentTime"`

	// Services List of services supported by the server.
	Services []AboutService `json:"services"`
}

// AboutService defines model for AboutService.
type AboutService struct {
	// Actions Action components provided by the service.
	Actions []AboutComponent `json:"actions"`

	// Name Service identifier.
	Name string `json:"name"`

	// Reactions Reaction components provided by the service.
	Reactions []AboutComponent `json:"reactions"`
}

// Area Automation linking an action to one or more reactions for a user.
type Area struct {
	// Action Action binding stored for an AREA automation.
	Action *AreaAction `json:"action,omitempty"`

	// CreatedAt Timestamp (UTC) when the automation was created.
	CreatedAt time.Time `json:"createdAt"`

	// Description Optional summary supplied by the user.
	Description *string `json:"description"`

	// Id Unique identifier of the automation.
	Id openapi_types.UUID `json:"id"`

	// Name Display name chosen by the user.
	Name      string         `json:"name"`
	Reactions []AreaReaction `json:"reactions"`

	// Status Lifecycle status (`enabled`, `disabled`, or `archived`).
	Status string `json:"status"`

	// UpdatedAt Timestamp (UTC) of the last update.
	UpdatedAt time.Time `json:"updatedAt"`
}

// AreaAction Action binding stored for an AREA automation.
type AreaAction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"componentId"`

	// ConfigId Identifier of the user component configuration backing the action.
	ConfigId openapi_types.UUID `json:"configId"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AreaReaction Reaction binding stored for an AREA automation.
type AreaReaction struct {
	// Component Minimal catalog metadata required by clients to render a component reference.
	Component ComponentSummary `json:"component"`

	// ComponentId Identifier of the catalog component associated with the configuration.
	ComponentId openapi_types.UUID `json:"componentId"`

	// ConfigId Identifier of the user component configuration backing the reaction.
	ConfigId openapi_types.UUID `json:"configId"`

	// Name Optional nickname saved alongside the configuration.
	Name *string `json:"name"`

	// Params Persisted configuration parameters supplied when creating the AREA.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// AuthSessionResponse Session descriptor mirroring the cookie issued by the backend.
type AuthSessionResponse struct {
	// ExpiresAt Expiration timestamp (UTC) aligning with the `area_session` cookie expiry.
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`

	// TokenType Grants semantics of the issued token; currently `session`.
	TokenType *string `json:"tokenType,omitempty"`

	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// ComponentListResponse defines model for ComponentListResponse.
type ComponentListResponse struct {
	Components []ComponentSummary `json:"components"`
}

// ComponentSummary Minimal catalog metadata required by clients to render a component reference.
type ComponentSummary struct {
	Description *string              `json:"description"`
	DisplayName string               `json:"displayName"`
	Id          openapi_types.UUID   `json:"id"`
	Kind        ComponentSummaryKind `json:"kind"`

	// Metadata Additional configuration metadata describing expected parameters.
	Metadata *map[string]interface{} `json:"metadata"`
	Name     string                  `json:"name"`

	// Provider Lightweight representation of a service provider exposing components.
	Provider ServiceProviderSummary `json:"provider"`
}

// ComponentSummaryKind defines model for ComponentSummary.Kind.
type ComponentSummaryKind string

// CreateAreaAction Configuration of the action component that triggers the automation.
type CreateAreaAction struct {
	// ComponentId Identifier of the action component selected from the catalog.
	ComponentId openapi_types.UUID `json:"componentId"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaReaction Configuration of a reaction component executed when the automation fires.
type CreateAreaReaction struct {
	// ComponentId Identifier of the reaction component selected from the catalog.
	ComponentId openapi_types.UUID `json:"componentId"`

	// Name Optional nickname to show in clients when displaying the component configuration.
	Name *string `json:"name,omitempty"`

	// Params Free-form JSON parameters persisted in the user component configuration.
	Params *map[string]interface{} `json:"params,omitempty"`
}

// CreateAreaRequest Payload used to create a new automation owned by the authenticated user.
type CreateAreaRequest struct {
	// Action Configuration of the action component that triggers the automation.
	Action CreateAreaAction `json:"action"`

	// Description Optional summary to distinguish this automation.
	Description *string `json:"description,omitempty"`

	// Name Human readable name displayed across clients.
	Name      string               `json:"name"`
	Reactions []CreateAreaReaction `json:"reactions"`
}

// IdentityListResponse defines model for IdentityListResponse.
type IdentityListResponse struct {
	Identities []IdentitySummary `json:"identities"`
}

// IdentitySummary defines model for IdentitySummary.
type IdentitySummary struct {
	ConnectedAt time.Time          `json:"connectedAt"`
	ExpiresAt   *time.Time         `json:"expiresAt"`
	Id          openapi_types.UUID `json:"id"`
	Provider    string             `json:"provider"`
	Scopes      *[]string          `json:"scopes,omitempty"`
	Subject     string             `json:"subject"`
}

// ListAreasResponse Collection wrapper for automations returned to the client.
type ListAreasResponse struct {
	Areas []Area `json:"areas"`
}

// LoginRequest Credential-based authentication payload.
type LoginRequest struct {
	// Email Registered user email.
	Email openapi_types.Email `json:"email"`

	// Password Plaintext password that satisfies the backend policy.
	Password string `json:"password"`
}

// OAuthAuthorizationRequest Optional parameters forwarded to the configured OAuth provider.
type OAuthAuthorizationRequest struct {
	// Prompt Provider-specific prompt parameter allowing the user experience to be tweaked.
	Prompt *string `json:"prompt,omitempty"`

	// RedirectUri Explicit redirect URI to override the default callback registered with the provider.
	RedirectUri *string `json:"redirectUri,omitempty"`

	// Scopes Additional scopes to request from the provider.
	Scopes *[]string `json:"scopes,omitempty"`

	// State Opaque value used to maintain state between the request and callback.
	State *string `json:"state,omitempty"`

	// UsePkce Flag indicating whether PKCE should be enforced.
	UsePkce *bool `json:"usePkce,omitempty"`
}

// OAuthAuthorizationResponse Provider authorisation metadata.
type OAuthAuthorizationResponse struct {
	// AuthorizationUrl URL that the client must open to continue authorisation with the provider.
	AuthorizationUrl string `json:"authorizationUrl"`

	// CodeChallenge PKCE code challenge derived from the verifier.
	CodeChallenge *string `json:"codeChallenge,omitempty"`

	// CodeChallengeMethod Method used to compute the PKCE code challenge.
	CodeChallengeMethod *string `json:"codeChallengeMethod,omitempty"`

	// CodeVerifier PKCE code verifier to persist until the exchange completes.
	CodeVerifier *string `json:"codeVerifier,omitempty"`

	// State State echoed by the provider after authorisation.
	State *string `json:"state,omitempty"`
}

// OAuthExchangeRequest Payload received after the provider redirect to complete the exchange.
type OAuthExchangeRequest struct {
	// Code One-time authorisation code issued by the provider.
	Code string `json:"code"`

	// CodeVerifier PKCE code verifier required when the provider enforces PKCE.
	CodeVerifier *string `json:"codeVerifier,omitempty"`

	// RedirectUri Redirect URI supplied during the authorisation flow.
	RedirectUri *string `json:"redirectUri,omitempty"`

	// State Provider-issued state parameter used to prevent CSRF.
	State *string `json:"state,omitempty"`
}

// RegisterUserRequest Payload used to enrol a new AREA account prior to email verification.
type RegisterUserRequest struct {
	// Email Primary email address that receives activation and security alerts.
	Email openapi_types.Email `json:"email"`

	// Password Strong password that satisfies backend policy (min. 8 chars, letters + numbers).
	Password string `json:"password"`
}

// RegisterUserResponse Confirmation payload indicating the asynchronous verification workflow started.
type RegisterUserResponse struct {
	// ExpiresAt Expiration timestamp of the verification token.
	ExpiresAt time.Time `json:"expiresAt"`

	// UserId Unique identifier assigned to the provisioned user.
	UserId string `json:"userId"`
}

// ServiceProviderDetail Detailed attributes of a service provider as stored in the catalog.
type ServiceProviderDetail struct {
	Category    *string                        `json:"category"`
	CreatedAt   time.Time                      `json:"createdAt"`
	DisplayName string                         `json:"displayName"`
	Enabled     bool                           `json:"enabled"`
	Id          openapi_types.UUID             `json:"id"`
	Name        string                         `json:"name"`
	OauthType   ServiceProviderDetailOauthType `json:"oauthType"`
	UpdatedAt   time.Time                      `json:"updatedAt"`
}

// ServiceProviderDetailOauthType defines model for ServiceProviderDetail.OauthType.
type ServiceProviderDetailOauthType string

// ServiceProviderListResponse defines model for ServiceProviderListResponse.
type ServiceProviderListResponse struct {
	Providers []ServiceProviderDetail `json:"providers"`
}

// ServiceProviderSummary Lightweight representation of a service provider exposing components.
type ServiceProviderSummary struct {
	DisplayName string             `json:"displayName"`
	Id          openapi_types.UUID `json:"id"`
	Name        string             `json:"name"`
}

// SubscribeExchangeRequest defines model for SubscribeExchangeRequest.
type SubscribeExchangeRequest struct {
	Code         string  `json:"code"`
	CodeVerifier *string `json:"codeVerifier,omitempty"`
	RedirectUri  *string `json:"redirectUri,omitempty"`
}

// SubscribeExchangeResponse defines model for SubscribeExchangeResponse.
type SubscribeExchangeResponse struct {
	Identity     *IdentitySummary    `json:"identity,omitempty"`
	Subscription SubscriptionSummary `json:"subscription"`
}

// SubscribeServiceRequest defines model for SubscribeServiceRequest.
type SubscribeServiceRequest struct {
	Prompt      *string   `json:"prompt,omitempty"`
	RedirectUri *string   `json:"redirectUri,omitempty"`
	Scopes      *[]string `json:"scopes,omitempty"`
	State       *string   `json:"state,omitempty"`
	UsePkce     *bool     `json:"usePkce,omitempty"`
}

// SubscribeServiceResponse defines model for SubscribeServiceResponse.
type SubscribeServiceResponse struct {
	// Authorization Provider authorisation metadata.
	Authorization *OAuthAuthorizationResponse    `json:"authorization,omitempty"`
	Status        SubscribeServiceResponseStatus `json:"status"`
	Subscription  *SubscriptionSummary           `json:"subscription,omitempty"`
}

// SubscribeServiceResponseStatus defines model for SubscribeServiceResponse.Status.
type SubscribeServiceResponseStatus string

// SubscriptionListResponse defines model for SubscriptionListResponse.
type SubscriptionListResponse struct {
	Subscriptions []UserSubscription `json:"subscriptions"`
}

// SubscriptionSummary defines model for SubscriptionSummary.
type SubscriptionSummary struct {
	CreatedAt   time.Time           `json:"createdAt"`
	Id          openapi_types.UUID  `json:"id"`
	IdentityId  *openapi_types.UUID `json:"identityId"`
	ProviderId  openapi_types.UUID  `json:"providerId"`
	ScopeGrants *[]string           `json:"scopeGrants,omitempty"`
	Status      string              `json:"status"`
	UpdatedAt   *time.Time          `json:"updatedAt,omitempty"`
}

// User Detailed user payload returned by authenticated endpoints.
type User struct {
	// CreatedAt Account creation timestamp in UTC.
	CreatedAt time.Time `json:"createdAt"`

	// Email Primary email associated with the account.
	Email openapi_types.Email `json:"email"`

	// Id Unique identifier assigned to the user.
	Id openapi_types.UUID `json:"id"`

	// LastLoginAt Timestamp of the most recent successful login.
	LastLoginAt *time.Time `json:"lastLoginAt"`

	// Status Lifecycle status (`pending`, `active`, etc.).
	Status string `json:"status"`

	// UpdatedAt Timestamp of the latest account update in UTC.
	UpdatedAt time.Time `json:"updatedAt"`
}

// UserResponse Public representation of the authenticated user.
type UserResponse struct {
	// User Detailed user payload returned by authenticated endpoints.
	User User `json:"user"`
}

// UserSubscription defines model for UserSubscription.
type UserSubscription struct {
	// Provider Detailed attributes of a service provider as stored in the catalog.
	Provider     ServiceProviderDetail `json:"provider"`
	Subscription SubscriptionSummary   `json:"subscription"`
}

// VerifyEmailRequest Token issued in the verification email used to activate the account.
type VerifyEmailRequest struct {
	// Token Single-use verification token issued as part of registration.
	Token string `json:"token"`
}

// OAuthProvider defines model for OAuthProvider.
type OAuthProvider = string

// ListComponentsParams defines parameters for ListComponents.
type ListComponentsParams struct {
	// Kind Filter components by kind
	Kind *ListComponentsParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// Provider Filter components by provider slug (for example `google`)
	Provider *string `form:"provider,omitempty" json:"provider,omitempty"`
}

// ListComponentsParamsKind defines parameters for ListComponents.
type ListComponentsParamsKind string

// ListAvailableComponentsParams defines parameters for ListAvailableComponents.
type ListAvailableComponentsParams struct {
	// Kind Filter components by kind
	Kind *ListAvailableComponentsParamsKind `form:"kind,omitempty" json:"kind,omitempty"`

	// Provider Filter components by provider slug (for example `google`)
	Provider *string `form:"provider,omitempty" json:"provider,omitempty"`
}

// ListAvailableComponentsParamsKind defines parameters for ListAvailableComponents.
type ListAvailableComponentsParamsKind string

// CreateAreaJSONRequestBody defines body for CreateArea for application/json ContentType.
type CreateAreaJSONRequestBody = CreateAreaRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// VerifyEmailJSONRequestBody defines body for VerifyEmail for application/json ContentType.
type VerifyEmailJSONRequestBody = VerifyEmailRequest

// AuthorizeOAuthJSONRequestBody defines body for AuthorizeOAuth for application/json ContentType.
type AuthorizeOAuthJSONRequestBody = OAuthAuthorizationRequest

// ExchangeOAuthJSONRequestBody defines body for ExchangeOAuth for application/json ContentType.
type ExchangeOAuthJSONRequestBody = OAuthExchangeRequest

// SubscribeServiceJSONRequestBody defines body for SubscribeService for application/json ContentType.
type SubscribeServiceJSONRequestBody = SubscribeServiceRequest

// SubscribeServiceExchangeJSONRequestBody defines body for SubscribeServiceExchange for application/json ContentType.
type SubscribeServiceExchangeJSONRequestBody = SubscribeExchangeRequest

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(c *gin.Context)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(c *gin.Context)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(c *gin.Context)
	// Delete an automation owned by the current user
	// (DELETE /v1/areas/{areaId})
	DeleteArea(c *gin.Context, areaId openapi_types.UUID)
	// Execute area reactions immediately
	// (POST /v1/areas/{areaId}/execute)
	ExecuteArea(c *gin.Context, areaId openapi_types.UUID)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(c *gin.Context)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(c *gin.Context)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(c *gin.Context)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(c *gin.Context)
	// List service components
	// (GET /v1/components)
	ListComponents(c *gin.Context, params ListComponentsParams)
	// List components available to the current user
	// (GET /v1/components/available)
	ListAvailableComponents(c *gin.Context, params ListAvailableComponentsParams)
	// List connected identities
	// (GET /v1/identities)
	ListIdentities(c *gin.Context)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(c *gin.Context, provider OAuthProvider)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(c *gin.Context, provider OAuthProvider)
	// List available service providers
	// (GET /v1/services)
	ListServiceProviders(c *gin.Context)
	// List service subscriptions for the current user
	// (GET /v1/services/subscriptions)
	ListServiceSubscriptions(c *gin.Context)
	// Subscribe current user to service provider
	// (POST /v1/services/{provider}/subscribe)
	SubscribeService(c *gin.Context, provider OAuthProvider)
	// Complete service subscription exchange
	// (POST /v1/services/{provider}/subscribe/exchange)
	SubscribeServiceExchange(c *gin.Context, provider OAuthProvider)
	// Revoke a service subscription
	// (DELETE /v1/services/{provider}/subscription)
	UnsubscribeService(c *gin.Context, provider OAuthProvider)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAbout operation middleware
func (siw *ServerInterfaceWrapper) GetAbout(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetAbout(c)
}

// ListAreas operation middleware
func (siw *ServerInterfaceWrapper) ListAreas(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAreas(c)
}

// CreateArea operation middleware
func (siw *ServerInterfaceWrapper) CreateArea(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateArea(c)
}

// DeleteArea operation middleware
func (siw *ServerInterfaceWrapper) DeleteArea(c *gin.Context) {

	var err error

	// ------------- Path parameter "areaId" -------------
	var areaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "areaId", c.Param("areaId"), &areaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter areaId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteArea(c, areaId)
}

// ExecuteArea operation middleware
func (siw *ServerInterfaceWrapper) ExecuteArea(c *gin.Context) {

	var err error

	// ------------- Path parameter "areaId" -------------
	var areaId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "areaId", c.Param("areaId"), &areaId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter areaId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExecuteArea(c, areaId)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Login(c)
}

// Logout operation middleware
func (siw *ServerInterfaceWrapper) Logout(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Logout(c)
}

// GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) GetCurrentUser(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetCurrentUser(c)
}

// VerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) VerifyEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.VerifyEmail(c)
}

// ListComponents operation middleware
func (siw *ServerInterfaceWrapper) ListComponents(c *gin.Context) {

	var err error

	c.Set(SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListComponentsParams

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", c.Request.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListComponents(c, params)
}

// ListAvailableComponents operation middleware
func (siw *ServerInterfaceWrapper) ListAvailableComponents(c *gin.Context) {

	var err error

	c.Set(SessionAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAvailableComponentsParams

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", c.Request.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kind: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "provider" -------------

	err = runtime.BindQueryParameter("form", true, false, "provider", c.Request.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListAvailableComponents(c, params)
}

// ListIdentities operation middleware
func (siw *ServerInterfaceWrapper) ListIdentities(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListIdentities(c)
}

// AuthorizeOAuth operation middleware
func (siw *ServerInterfaceWrapper) AuthorizeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AuthorizeOAuth(c, provider)
}

// ExchangeOAuth operation middleware
func (siw *ServerInterfaceWrapper) ExchangeOAuth(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ExchangeOAuth(c, provider)
}

// ListServiceProviders operation middleware
func (siw *ServerInterfaceWrapper) ListServiceProviders(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListServiceProviders(c)
}

// ListServiceSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) ListServiceSubscriptions(c *gin.Context) {

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListServiceSubscriptions(c)
}

// SubscribeService operation middleware
func (siw *ServerInterfaceWrapper) SubscribeService(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscribeService(c, provider)
}

// SubscribeServiceExchange operation middleware
func (siw *ServerInterfaceWrapper) SubscribeServiceExchange(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SubscribeServiceExchange(c, provider)
}

// UnsubscribeService operation middleware
func (siw *ServerInterfaceWrapper) UnsubscribeService(c *gin.Context) {

	var err error

	// ------------- Path parameter "provider" -------------
	var provider OAuthProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", c.Param("provider"), &provider, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter provider: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(SessionAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UnsubscribeService(c, provider)
}

// RegisterUser operation middleware
func (siw *ServerInterfaceWrapper) RegisterUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.RegisterUser(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/about.json", wrapper.GetAbout)
	router.GET(options.BaseURL+"/v1/areas", wrapper.ListAreas)
	router.POST(options.BaseURL+"/v1/areas", wrapper.CreateArea)
	router.DELETE(options.BaseURL+"/v1/areas/:areaId", wrapper.DeleteArea)
	router.POST(options.BaseURL+"/v1/areas/:areaId/execute", wrapper.ExecuteArea)
	router.POST(options.BaseURL+"/v1/auth/login", wrapper.Login)
	router.POST(options.BaseURL+"/v1/auth/logout", wrapper.Logout)
	router.GET(options.BaseURL+"/v1/auth/me", wrapper.GetCurrentUser)
	router.POST(options.BaseURL+"/v1/auth/verify", wrapper.VerifyEmail)
	router.GET(options.BaseURL+"/v1/components", wrapper.ListComponents)
	router.GET(options.BaseURL+"/v1/components/available", wrapper.ListAvailableComponents)
	router.GET(options.BaseURL+"/v1/identities", wrapper.ListIdentities)
	router.POST(options.BaseURL+"/v1/oauth/:provider/authorize", wrapper.AuthorizeOAuth)
	router.POST(options.BaseURL+"/v1/oauth/:provider/exchange", wrapper.ExchangeOAuth)
	router.GET(options.BaseURL+"/v1/services", wrapper.ListServiceProviders)
	router.GET(options.BaseURL+"/v1/services/subscriptions", wrapper.ListServiceSubscriptions)
	router.POST(options.BaseURL+"/v1/services/:provider/subscribe", wrapper.SubscribeService)
	router.POST(options.BaseURL+"/v1/services/:provider/subscribe/exchange", wrapper.SubscribeServiceExchange)
	router.DELETE(options.BaseURL+"/v1/services/:provider/subscription", wrapper.UnsubscribeService)
	router.POST(options.BaseURL+"/v1/users", wrapper.RegisterUser)
}

type GetAboutRequestObject struct {
}

type GetAboutResponseObject interface {
	VisitGetAboutResponse(w http.ResponseWriter) error
}

type GetAbout200JSONResponse AboutResponse

func (response GetAbout200JSONResponse) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAbout404Response struct {
}

func (response GetAbout404Response) VisitGetAboutResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ListAreasRequestObject struct {
}

type ListAreasResponseObject interface {
	VisitListAreasResponse(w http.ResponseWriter) error
}

type ListAreas200JSONResponse ListAreasResponse

func (response ListAreas200JSONResponse) VisitListAreasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateAreaRequestObject struct {
	Body *CreateAreaJSONRequestBody
}

type CreateAreaResponseObject interface {
	VisitCreateAreaResponse(w http.ResponseWriter) error
}

type CreateArea201JSONResponse Area

func (response CreateArea201JSONResponse) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArea400Response struct {
}

func (response CreateArea400Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type CreateArea401Response struct {
}

func (response CreateArea401Response) VisitCreateAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteAreaRequestObject struct {
	AreaId openapi_types.UUID `json:"areaId"`
}

type DeleteAreaResponseObject interface {
	VisitDeleteAreaResponse(w http.ResponseWriter) error
}

type DeleteArea204Response struct {
}

func (response DeleteArea204Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteArea401Response struct {
}

func (response DeleteArea401Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteArea403Response struct {
}

func (response DeleteArea403Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type DeleteArea404Response struct {
}

func (response DeleteArea404Response) VisitDeleteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExecuteAreaRequestObject struct {
	AreaId openapi_types.UUID `json:"areaId"`
}

type ExecuteAreaResponseObject interface {
	VisitExecuteAreaResponse(w http.ResponseWriter) error
}

type ExecuteArea202Response struct {
}

func (response ExecuteArea202Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(202)
	return nil
}

type ExecuteArea401Response struct {
}

func (response ExecuteArea401Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ExecuteArea403Response struct {
}

func (response ExecuteArea403Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type ExecuteArea404Response struct {
}

func (response ExecuteArea404Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExecuteArea500Response struct {
}

func (response ExecuteArea500Response) VisitExecuteAreaResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200ResponseHeaders struct {
	SetCookie string
}

type Login200JSONResponse struct {
	Body    AuthSessionResponse
	Headers Login200ResponseHeaders
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type Login400Response struct {
}

func (response Login400Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type Login403Response struct {
}

func (response Login403Response) VisitLoginResponse(w http.ResponseWriter) error {
	w.WriteHeader(403)
	return nil
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401Response struct {
}

func (response Logout401Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetCurrentUserRequestObject struct {
}

type GetCurrentUserResponseObject interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200JSONResponse UserResponse

func (response GetCurrentUser200JSONResponse) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401Response struct {
}

func (response GetCurrentUser401Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type VerifyEmailRequestObject struct {
	Body *VerifyEmailJSONRequestBody
}

type VerifyEmailResponseObject interface {
	VisitVerifyEmailResponse(w http.ResponseWriter) error
}

type VerifyEmail200ResponseHeaders struct {
	SetCookie string
}

type VerifyEmail200JSONResponse struct {
	Body    AuthSessionResponse
	Headers VerifyEmail200ResponseHeaders
}

func (response VerifyEmail200JSONResponse) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type VerifyEmail400Response struct {
}

func (response VerifyEmail400Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type VerifyEmail410Response struct {
}

func (response VerifyEmail410Response) VisitVerifyEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(410)
	return nil
}

type ListComponentsRequestObject struct {
	Params ListComponentsParams
}

type ListComponentsResponseObject interface {
	VisitListComponentsResponse(w http.ResponseWriter) error
}

type ListComponents200JSONResponse ComponentListResponse

func (response ListComponents200JSONResponse) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListComponents400Response struct {
}

func (response ListComponents400Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListComponents401Response struct {
}

func (response ListComponents401Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListComponents500Response struct {
}

func (response ListComponents500Response) VisitListComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ListAvailableComponentsRequestObject struct {
	Params ListAvailableComponentsParams
}

type ListAvailableComponentsResponseObject interface {
	VisitListAvailableComponentsResponse(w http.ResponseWriter) error
}

type ListAvailableComponents200JSONResponse ComponentListResponse

func (response ListAvailableComponents200JSONResponse) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAvailableComponents400Response struct {
}

func (response ListAvailableComponents400Response) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ListAvailableComponents401Response struct {
}

func (response ListAvailableComponents401Response) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListAvailableComponents500Response struct {
}

func (response ListAvailableComponents500Response) VisitListAvailableComponentsResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type ListIdentitiesRequestObject struct {
}

type ListIdentitiesResponseObject interface {
	VisitListIdentitiesResponse(w http.ResponseWriter) error
}

type ListIdentities200JSONResponse IdentityListResponse

func (response ListIdentities200JSONResponse) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListIdentities401Response struct {
}

func (response ListIdentities401Response) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type ListIdentities500Response struct {
}

func (response ListIdentities500Response) VisitListIdentitiesResponse(w http.ResponseWriter) error {
	w.WriteHeader(500)
	return nil
}

type AuthorizeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *AuthorizeOAuthJSONRequestBody
}

type AuthorizeOAuthResponseObject interface {
	VisitAuthorizeOAuthResponse(w http.ResponseWriter) error
}

type AuthorizeOAuth200JSONResponse OAuthAuthorizationResponse

func (response AuthorizeOAuth200JSONResponse) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AuthorizeOAuth400Response struct {
}

func (response AuthorizeOAuth400Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type AuthorizeOAuth404Response struct {
}

func (response AuthorizeOAuth404Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type AuthorizeOAuth501Response struct {
}

func (response AuthorizeOAuth501Response) VisitAuthorizeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuthRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *ExchangeOAuthJSONRequestBody
}

type ExchangeOAuthResponseObject interface {
	VisitExchangeOAuthResponse(w http.ResponseWriter) error
}

type ExchangeOAuth200ResponseHeaders struct {
	SetCookie string
}

type ExchangeOAuth200JSONResponse struct {
	Body    AuthSessionResponse
	Headers ExchangeOAuth200ResponseHeaders
}

func (response ExchangeOAuth200JSONResponse) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Set-Cookie", fmt.Sprint(response.Headers.SetCookie))
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response.Body)
}

type ExchangeOAuth400Response struct {
}

func (response ExchangeOAuth400Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type ExchangeOAuth404Response struct {
}

func (response ExchangeOAuth404Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ExchangeOAuth501Response struct {
}

func (response ExchangeOAuth501Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(501)
	return nil
}

type ExchangeOAuth502Response struct {
}

func (response ExchangeOAuth502Response) VisitExchangeOAuthResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type ListServiceProvidersRequestObject struct {
}

type ListServiceProvidersResponseObject interface {
	VisitListServiceProvidersResponse(w http.ResponseWriter) error
}

type ListServiceProviders200JSONResponse ServiceProviderListResponse

func (response ListServiceProviders200JSONResponse) VisitListServiceProvidersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListServiceSubscriptionsRequestObject struct {
}

type ListServiceSubscriptionsResponseObject interface {
	VisitListServiceSubscriptionsResponse(w http.ResponseWriter) error
}

type ListServiceSubscriptions200JSONResponse SubscriptionListResponse

func (response ListServiceSubscriptions200JSONResponse) VisitListServiceSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListServiceSubscriptions401Response struct {
}

func (response ListServiceSubscriptions401Response) VisitListServiceSubscriptionsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SubscribeServiceRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *SubscribeServiceJSONRequestBody
}

type SubscribeServiceResponseObject interface {
	VisitSubscribeServiceResponse(w http.ResponseWriter) error
}

type SubscribeService200JSONResponse SubscribeServiceResponse

func (response SubscribeService200JSONResponse) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubscribeService400Response struct {
}

func (response SubscribeService400Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SubscribeService401Response struct {
}

func (response SubscribeService401Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SubscribeService404Response struct {
}

func (response SubscribeService404Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SubscribeService409Response struct {
}

func (response SubscribeService409Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type SubscribeService502Response struct {
}

func (response SubscribeService502Response) VisitSubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type SubscribeServiceExchangeRequestObject struct {
	Provider OAuthProvider `json:"provider"`
	Body     *SubscribeServiceExchangeJSONRequestBody
}

type SubscribeServiceExchangeResponseObject interface {
	VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error
}

type SubscribeServiceExchange200JSONResponse SubscribeExchangeResponse

func (response SubscribeServiceExchange200JSONResponse) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SubscribeServiceExchange400Response struct {
}

func (response SubscribeServiceExchange400Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type SubscribeServiceExchange401Response struct {
}

func (response SubscribeServiceExchange401Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type SubscribeServiceExchange404Response struct {
}

func (response SubscribeServiceExchange404Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SubscribeServiceExchange409Response struct {
}

func (response SubscribeServiceExchange409Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type SubscribeServiceExchange502Response struct {
}

func (response SubscribeServiceExchange502Response) VisitSubscribeServiceExchangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(502)
	return nil
}

type UnsubscribeServiceRequestObject struct {
	Provider OAuthProvider `json:"provider"`
}

type UnsubscribeServiceResponseObject interface {
	VisitUnsubscribeServiceResponse(w http.ResponseWriter) error
}

type UnsubscribeService204Response struct {
}

func (response UnsubscribeService204Response) VisitUnsubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UnsubscribeService401Response struct {
}

func (response UnsubscribeService401Response) VisitUnsubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type UnsubscribeService404Response struct {
}

func (response UnsubscribeService404Response) VisitUnsubscribeServiceResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type RegisterUserRequestObject struct {
	Body *RegisterUserJSONRequestBody
}

type RegisterUserResponseObject interface {
	VisitRegisterUserResponse(w http.ResponseWriter) error
}

type RegisterUser202JSONResponse RegisterUserResponse

func (response RegisterUser202JSONResponse) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(202)

	return json.NewEncoder(w).Encode(response)
}

type RegisterUser400Response struct {
}

func (response RegisterUser400Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type RegisterUser409Response struct {
}

func (response RegisterUser409Response) VisitRegisterUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Describe server capabilities
	// (GET /about.json)
	GetAbout(ctx context.Context, request GetAboutRequestObject) (GetAboutResponseObject, error)
	// List automations owned by the current user
	// (GET /v1/areas)
	ListAreas(ctx context.Context, request ListAreasRequestObject) (ListAreasResponseObject, error)
	// Create a new automation for the current user
	// (POST /v1/areas)
	CreateArea(ctx context.Context, request CreateAreaRequestObject) (CreateAreaResponseObject, error)
	// Delete an automation owned by the current user
	// (DELETE /v1/areas/{areaId})
	DeleteArea(ctx context.Context, request DeleteAreaRequestObject) (DeleteAreaResponseObject, error)
	// Execute area reactions immediately
	// (POST /v1/areas/{areaId}/execute)
	ExecuteArea(ctx context.Context, request ExecuteAreaRequestObject) (ExecuteAreaResponseObject, error)
	// Authenticate using email and password
	// (POST /v1/auth/login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Revoke the current session
	// (POST /v1/auth/logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Retrieve the authenticated user profile
	// (GET /v1/auth/me)
	GetCurrentUser(ctx context.Context, request GetCurrentUserRequestObject) (GetCurrentUserResponseObject, error)
	// Verify email address and create a session
	// (POST /v1/auth/verify)
	VerifyEmail(ctx context.Context, request VerifyEmailRequestObject) (VerifyEmailResponseObject, error)
	// List service components
	// (GET /v1/components)
	ListComponents(ctx context.Context, request ListComponentsRequestObject) (ListComponentsResponseObject, error)
	// List components available to the current user
	// (GET /v1/components/available)
	ListAvailableComponents(ctx context.Context, request ListAvailableComponentsRequestObject) (ListAvailableComponentsResponseObject, error)
	// List connected identities
	// (GET /v1/identities)
	ListIdentities(ctx context.Context, request ListIdentitiesRequestObject) (ListIdentitiesResponseObject, error)
	// Initiate OAuth authorization
	// (POST /v1/oauth/{provider}/authorize)
	AuthorizeOAuth(ctx context.Context, request AuthorizeOAuthRequestObject) (AuthorizeOAuthResponseObject, error)
	// Exchange authorization code for session
	// (POST /v1/oauth/{provider}/exchange)
	ExchangeOAuth(ctx context.Context, request ExchangeOAuthRequestObject) (ExchangeOAuthResponseObject, error)
	// List available service providers
	// (GET /v1/services)
	ListServiceProviders(ctx context.Context, request ListServiceProvidersRequestObject) (ListServiceProvidersResponseObject, error)
	// List service subscriptions for the current user
	// (GET /v1/services/subscriptions)
	ListServiceSubscriptions(ctx context.Context, request ListServiceSubscriptionsRequestObject) (ListServiceSubscriptionsResponseObject, error)
	// Subscribe current user to service provider
	// (POST /v1/services/{provider}/subscribe)
	SubscribeService(ctx context.Context, request SubscribeServiceRequestObject) (SubscribeServiceResponseObject, error)
	// Complete service subscription exchange
	// (POST /v1/services/{provider}/subscribe/exchange)
	SubscribeServiceExchange(ctx context.Context, request SubscribeServiceExchangeRequestObject) (SubscribeServiceExchangeResponseObject, error)
	// Revoke a service subscription
	// (DELETE /v1/services/{provider}/subscription)
	UnsubscribeService(ctx context.Context, request UnsubscribeServiceRequestObject) (UnsubscribeServiceResponseObject, error)
	// Register a new user
	// (POST /v1/users)
	RegisterUser(ctx context.Context, request RegisterUserRequestObject) (RegisterUserResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetAbout operation middleware
func (sh *strictHandler) GetAbout(ctx *gin.Context) {
	var request GetAboutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAbout(ctx, request.(GetAboutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAbout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetAboutResponseObject); ok {
		if err := validResponse.VisitGetAboutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAreas operation middleware
func (sh *strictHandler) ListAreas(ctx *gin.Context) {
	var request ListAreasRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAreas(ctx, request.(ListAreasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAreas")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAreasResponseObject); ok {
		if err := validResponse.VisitListAreasResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateArea operation middleware
func (sh *strictHandler) CreateArea(ctx *gin.Context) {
	var request CreateAreaRequestObject

	var body CreateAreaJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArea(ctx, request.(CreateAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateAreaResponseObject); ok {
		if err := validResponse.VisitCreateAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteArea operation middleware
func (sh *strictHandler) DeleteArea(ctx *gin.Context, areaId openapi_types.UUID) {
	var request DeleteAreaRequestObject

	request.AreaId = areaId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArea(ctx, request.(DeleteAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteAreaResponseObject); ok {
		if err := validResponse.VisitDeleteAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExecuteArea operation middleware
func (sh *strictHandler) ExecuteArea(ctx *gin.Context, areaId openapi_types.UUID) {
	var request ExecuteAreaRequestObject

	request.AreaId = areaId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExecuteArea(ctx, request.(ExecuteAreaRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExecuteArea")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExecuteAreaResponseObject); ok {
		if err := validResponse.VisitExecuteAreaResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *gin.Context) {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx, request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx *gin.Context) {
	var request LogoutRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx, request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		if err := validResponse.VisitLogoutResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetCurrentUser operation middleware
func (sh *strictHandler) GetCurrentUser(ctx *gin.Context) {
	var request GetCurrentUserRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentUser(ctx, request.(GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitGetCurrentUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// VerifyEmail operation middleware
func (sh *strictHandler) VerifyEmail(ctx *gin.Context) {
	var request VerifyEmailRequestObject

	var body VerifyEmailJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.VerifyEmail(ctx, request.(VerifyEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "VerifyEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(VerifyEmailResponseObject); ok {
		if err := validResponse.VisitVerifyEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListComponents operation middleware
func (sh *strictHandler) ListComponents(ctx *gin.Context, params ListComponentsParams) {
	var request ListComponentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListComponents(ctx, request.(ListComponentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListComponents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListComponentsResponseObject); ok {
		if err := validResponse.VisitListComponentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListAvailableComponents operation middleware
func (sh *strictHandler) ListAvailableComponents(ctx *gin.Context, params ListAvailableComponentsParams) {
	var request ListAvailableComponentsRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListAvailableComponents(ctx, request.(ListAvailableComponentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListAvailableComponents")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListAvailableComponentsResponseObject); ok {
		if err := validResponse.VisitListAvailableComponentsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListIdentities operation middleware
func (sh *strictHandler) ListIdentities(ctx *gin.Context) {
	var request ListIdentitiesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListIdentities(ctx, request.(ListIdentitiesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListIdentities")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListIdentitiesResponseObject); ok {
		if err := validResponse.VisitListIdentitiesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// AuthorizeOAuth operation middleware
func (sh *strictHandler) AuthorizeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request AuthorizeOAuthRequestObject

	request.Provider = provider

	var body AuthorizeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AuthorizeOAuth(ctx, request.(AuthorizeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AuthorizeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(AuthorizeOAuthResponseObject); ok {
		if err := validResponse.VisitAuthorizeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ExchangeOAuth operation middleware
func (sh *strictHandler) ExchangeOAuth(ctx *gin.Context, provider OAuthProvider) {
	var request ExchangeOAuthRequestObject

	request.Provider = provider

	var body ExchangeOAuthJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ExchangeOAuth(ctx, request.(ExchangeOAuthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ExchangeOAuth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ExchangeOAuthResponseObject); ok {
		if err := validResponse.VisitExchangeOAuthResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListServiceProviders operation middleware
func (sh *strictHandler) ListServiceProviders(ctx *gin.Context) {
	var request ListServiceProvidersRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListServiceProviders(ctx, request.(ListServiceProvidersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListServiceProviders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListServiceProvidersResponseObject); ok {
		if err := validResponse.VisitListServiceProvidersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// ListServiceSubscriptions operation middleware
func (sh *strictHandler) ListServiceSubscriptions(ctx *gin.Context) {
	var request ListServiceSubscriptionsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListServiceSubscriptions(ctx, request.(ListServiceSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListServiceSubscriptions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListServiceSubscriptionsResponseObject); ok {
		if err := validResponse.VisitListServiceSubscriptionsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscribeService operation middleware
func (sh *strictHandler) SubscribeService(ctx *gin.Context, provider OAuthProvider) {
	var request SubscribeServiceRequestObject

	request.Provider = provider

	var body SubscribeServiceJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscribeService(ctx, request.(SubscribeServiceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscribeService")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeServiceResponseObject); ok {
		if err := validResponse.VisitSubscribeServiceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SubscribeServiceExchange operation middleware
func (sh *strictHandler) SubscribeServiceExchange(ctx *gin.Context, provider OAuthProvider) {
	var request SubscribeServiceExchangeRequestObject

	request.Provider = provider

	var body SubscribeServiceExchangeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SubscribeServiceExchange(ctx, request.(SubscribeServiceExchangeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SubscribeServiceExchange")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SubscribeServiceExchangeResponseObject); ok {
		if err := validResponse.VisitSubscribeServiceExchangeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UnsubscribeService operation middleware
func (sh *strictHandler) UnsubscribeService(ctx *gin.Context, provider OAuthProvider) {
	var request UnsubscribeServiceRequestObject

	request.Provider = provider

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UnsubscribeService(ctx, request.(UnsubscribeServiceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UnsubscribeService")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UnsubscribeServiceResponseObject); ok {
		if err := validResponse.VisitUnsubscribeServiceResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// RegisterUser operation middleware
func (sh *strictHandler) RegisterUser(ctx *gin.Context) {
	var request RegisterUserRequestObject

	var body RegisterUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RegisterUser(ctx, request.(RegisterUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RegisterUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(RegisterUserResponseObject); ok {
		if err := validResponse.VisitRegisterUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9i3Pctvngv4JjbkZybrVayW7jbiZzP1V2EjVOo1hSr9fIY2HJb3cRcQEGACVtPfrf",
	"b/ABIEES3Ick2+n9Mp3Gkgji8b3wvfkhScWiEBy4Vsn4Q1JQSRegQeJvPx2Ven4qxQ3LQJo/ZKBSyQrN",
	"BE/GyVlezkgqpARVCJ4xPiNaEEpSwadsVkrICM5ACjcF2Z0KSeCOLoocyNVMiFkOVwNyNWN6Xk6ung2T",
	"QeIeJ+PEPk8GCTOrFVTPk0HC6cI881Mmg0TCbyWTkCVjLUsYJCqdw4Ka7eplYcYqLRmfJff39/4hnu5o",
	"Ikp9nDPgGo8uRQFSM8CHc6F098Qnp4RmmQSliJgSPQeS4vukADkVcoEgmAP5/vz8lJh9gdLNMx2MhuZ/",
	"B8mgs7vwJL/YDbyrRonJr5Dq5H7gtu2x1t15Y8ftA3xfLijfk0AzOsmBBA+rA/mZm/s+IhxuyQKUojMg",
	"TJFCKA0ZYRzfmklRFt0zeXR14JgB12zKQK5ZlsPte7foe8bf9yzTAh2uOWgs2QvIt0i7KrLHo9lMwoya",
	"QxY51Qa9ZAGaZlQbEl9MGDfonkrBNfCMUJ6RCU2vzc+TkuUGNuYlauYzp2qiKa0I739KmCbj5Iv9mhX3",
	"HZnuhzRqqBfkjeXEtS+d2aFt2Lhlq6l6AXNWLdXadyklcH3OYng9tg+JnZxotgACd4VhGMgIVYRy8roQ",
	"6ZxccHaHz5Wmi6KB9IOvDg6/+vOLF1+NBokFYDJOGNd/flFjnnENM3M8exCWRmg/ecOUNvTlRxBVFoWQ",
	"BqOTJVKd3adZnWlYqI0By1IwS7vNUCnpsgvpAFDBLlcC3MzbgThNzXki5zvCBzXrKC9oG+djKWx3wFq2",
	"dI7Yx89u74RVfN1k4ylNYSLEdUxCSOg94Fv36FMeMS5L/BbD7UYxKYFGEFVqYeUAyRm/NmKDcuLOpgUR",
	"HIiQZCEkkGp+Yu5KSkplgRmjibVnlUAtkZi9pRKMNDuK3GvnnhHJ7sX58TNyOwcr12m981uqiJvC7Kfi",
	"zIxq2NOWyjvIXXkZ/YQ/0JyocrGgcon8mbMat/7svMxzc1/5G76zDMu6s19w9lsZkqS/auozNc5Rlizb",
	"/AZ7xVSR0yUxT0k6Fwp4e9erKX0zYpVAPRPEuFFpqsuo5JtCukxzIHYE2b0CbiCYGW0rY8r/LCS5ojKd",
	"sxvIrPrV2XVZZJuSjQNwTpUm9rVNKaXFdYgJx3rujCH9hpvahCOP0jgBOgE6YVZ5VVoYnRX5jpOjt6+P",
	"WrTSuglDHWwVFitpc2bpHJnR/+0k20g9oprmYlYLQkKVEilD9eSW6blToqzivTlx2zc224Oh62ADjcVQ",
	"8/Har0XHI5irEgycpdfIYYreGAUiF3ymWAbx064VE2jdWPmZZcyucRrg1L7W3MspSMVQ1W0euLaUarGF",
	"YhPJ1IPCEFHAVZ4s26qCx0KTLoLfekm7kg79l+cf5P205O3lzR8E/tEJvNTzM1CKCd5vp7kBlS1rFCkm",
	"pZB+i6kQ18zYrKqsVQtnqTXU1A8J3BVMgjJ3XXI4OnyxN3qxd/Dy/OBg/PxwPBr9yxxUXAM/d4C3S5v7",
	"SFlbKdCxqglGB+cHo/Fo5CaABWW5ucRzuBsuqNSM/5fbwjAVi8RqM0mp5PvRwfd/+dfP3758/eKfPxz/",
	"6R9f/fzjj8cHX708/Odf6ntxjLrgDTQuxZ7FDVqaTB4cuA3X1+aRJQXduudpzmZo/FaseUUl0PcOHlce",
	"5Dj7cnNtMYBtezffSWq0fwULyjVLK/+Lwyq++TVxNle+JFd+L01DpMZYV89R6y3rCxUxqfHFGPlWgtEY",
	"oiEB9wjazfXCmMhdbYzWa6zcqZ+vA/8fGWcLmleSuvKE+FUMY1nngjImjQSegURnoJeoEqYggVtbbaXP",
	"aq2cy6z2/XcnXHvsgbXC+ZpxHAi8XBgouau0VikDYNVv+aNvJ2aPqpEtOVtB0o6fGL6CuwJS9DxVQniF",
	"/K/xyPsAUgRO3FWE5Qx57/OtyCumnyP0KjU9REmwXpTaUEiuUsyPGxDydlvLF0D0nGqiJZvNzCXVNe16",
	"2GwzdaCzmoLc4mQqxSLUWp5UD9CCqLm4JYxX3ISXrgNvfadF9RSzlQW9ewN8pufJ+ODw5RMpCd9KgD10",
	"gf7t7Ke/h7pBUakPzhW8So/aRFOosbSadvo13w710EpnCzYGd5CW2is1LWfH1NyKj6ahyKp/UNHvjYow",
	"SNMF6ild5oJmZiNGvXCuL0IxDhJQirjltVZJSz03RJCi4fIY111HRm7tTNPCoNso6iVTRktjqiUfAxz/",
	"6eBwY3LDGBKpYkhIcI6wjAmTSqGUJ7sYKS0Yr35/Ei9ZRCbc4zIn9u2DbXy8ax1Kls31crVSZ92O1W+b",
	"HMNPvKlOFyyxap+BStcWZpyjLLLa/2YqesNgiL6yobN2rawLVZbOQ5WKogXarjXRdpaWFjaRwHBEuwkC",
	"zP7FQQNkMZgbmjB0qPrN1WORmxsAPeqSFgVI65GpOFMRCbqU3IqdOsYckSRmpa18yWtpyk4ZPZqYMd4r",
	"LY8lILnRfG9CMdZXS0LrTEBp2ja315rCBVXqVsgMBbJStyOZ/Y/D50nXjrUzdX1gM3OrSCeMCQ5rWoT9",
	"a1cUaieP3oF+d53bI6eMa7jTxI+x2qqimqkpAxU6IUghcpYum/sKjxvspVpynQvdb7p6IYZUTM8w/xeS",
	"/Rsx1Yvh6n4Jbu2pkLdUZgGl9mV+dIm3kGJRxO5d98aeKiBlU5YSO7Jel9A8F7deh7F4vStAMmNbmp1M",
	"gOhboNc2UBW5YDImIdUXkkW9HjlLmbFW7Shy8fYEY3Q3IKX3zGUwpWWuSUrz3CCRyJrQKp9IePYar3Ot",
	"CzXe36dFMTTctudi0LQo9oXhGuTdHDQ0FELJYkepxWCvsWmHWJMcUVtrnuEGtxCjmuqoEkp/K4Hc0LyE",
	"SmlaGC6gjGMYCsgE9C04ZdvvhvKsAuOwxy9zep1GVvw2pzPCeIYyhs+MhqvnIMnpD8evjfpb5pkhBeBT",
	"IdMGLUyEyIFy5JmNeKJPmHtiRXEnJFNNkz4issN5L2REZF28feMM2zq7aFEqTUQBGCxOBdeMl9Bac1Oy",
	"S1NRGsXMJlcZUbcvLOEd7t8c7psf/rdd9j3LvhkOhxuQYSoyOJ7TPAc+i0HJIMSMIakfRDKQ7CY0g25A",
	"VokDqxf4EfRcRGSu/XutsItFUWrLr5Ed9K7zD7eRVefwmzXrONOFlFyzHFeDu3ROzSE9J6voYj2MdIas",
	"Aulc1HZFlUBHp7pNbcO1V0GH6Hqvgtdu52utIgkpIP7shhp7rCSnQ4KBQAMuMbs6i4kUbpXKFqUjBpre",
	"/DjNv9gfHU2OX8H0u/nJrz/kP/Kfip/lmb64+T93//ffT4L+yvlZ+RAqKDixo5D2tr+H3obXTxV/ycoq",
	"qtGEyTQXt5twag/NVZeuA6sV1/WN63mqkHBjBNLx2dtv19MdYjVGa14tu1AgNzbAgUuRO/vbBi+tKCOF",
	"ZAI5EVUeh5y04o1PqW+eSoa2t92JTxVFce44RqFj8cZizdx9CtJSMr0kNAdpDeaPrZyeaSn4rFczbWql",
	"ZHfB+JC8NJJTqgHJQaPu978ILxcTkOrZtnprYP+/fBIttklO/YYXnzKXjuntkVB9QKZSS57OpeCiVA1C",
	"IrdCXhsmM6whXQrU40JpzkfYWAXDWE149oQhN7PWjXJ8slFuFFWKzQKbE+WYYoIHfqx6U2uDk6ux6rYV",
	"ehNieG0FI16BjjKd/bu5i7SWbFJqUNbp61IDg9tT+SQI52UMfK+tC4lqmAnrNVnr0Ggk1m2YF7cmgOWy",
	"tYJnlc66sQOlNxiE2p4Ps/rYFxfc7NRqgskgoQW7hmU0ANbICHtkdlczbFTvrAZBX+LXBhSz2kXnyWJz",
	"F0qcINf5VOp1NthybwD2DZvN9S2Y/xIJhQQFXAcRjg6xw10hlBFs9UEigdenCaT2kNqGeI+CpZxgNBQi",
	"Kmlcd1yrza1TwB6ozER2usYpvHyAJ1jZVYpNYgdnwdi+CG5jvpXHcgTaC//akbMlgB/oxfUa7CpHwSZ2",
	"fveAfWhr2E/rgL/CfdBI2K1yDsKh7ysUVRifQBYVwk9OEHZnK0gBX18tUsNNbS5Wjd4WrrFWojaXWbfl",
	"/gDI9vf2hvLQM/pJdPj6ND4nw082Ww3ZyCZIbc9LZXzok9zxwTmiedwxzF2omO1d6Xjo7i0qL4QLlEyW",
	"rdAr8KwQLHrlrSiDOHIWpc1wbGjrjJOL8+PNU9k2MxAjSa7Oqh1uZOOxB+n2Xp9fS1g5VRrjPquT/50l",
	"sxDKmrlcE1WmKSg1LXOSmwl6AbeWF7YocSgAE52vBuTK5kReDQjodPiIuoaqokGjr9rRh311S5qIMYhH",
	"7Joahz4+WeGYLic5SyOK4qZZCk+fDdmR8r0K+YPV8I+qJK1JakNNc/naILTXpXVuzHvvunQmaMP+t2LB",
	"e7ycpwjaciHwaKHDIBknK4zxju/KvdPxCjE+y2GvVDGfhN80VaSgEqsqbchLdv1sySM8A3Zv72L5Pd5R",
	"dmYQ6NQNm81rtK3+vPBm+nftQK+j00NfYm6H1kXmYVJzvXVasB9gacvJ4U6D5DR/JVIVu7WM4CWzkmWQ",
	"Mw4KPX5Yu+rcQXPKM1cYWco8jNO0QoMZ3EBusKhQ7vOpcCkcmtqUBu/bdDWu/9WaoD4U+k5PfUXzmR2+",
	"dn03bScNKTl3RQDEFgyTo9MTUojbbkZmXUWN/sac8WtFfK2jgUtd+WhziC65ITUOsirgHZILBYRpWzM5",
	"EVRa8aUGFr3WmWr+QZSpAc4rZDoHpFSwUWmbonDJA0So4SW/5F988QX5ns3mubGy1SXfI14jyKvbptIs",
	"MG0jZIJBg28GzrtriXBBOZ3BArgemmltcHwOeYFwEoRxphnml/EsDJowme0ZKCyJSz0RreiPwvl+rLKx",
	"Bbq/EMLoAHCVJK4uu1GfPiBToNrAa5rTmQOWWZtqNmE500vChYYaNN+B1raQCF2gl/xgSI59WhwqZjeM",
	"kqvTn87Oyf7NwT6i5qp9pJZ4+VUYFW45vOSHQ3IU3ExWJQKGMd3KV51WiSaKCOkAWcEGYSkmGHKmPF6V",
	"MLzkz4fkmOZ5n85otJe5EXVX3722J8G4/AKuajVNNaUL1Zqmc1fjbgDEM0Oc7ukcaAYS4fgWpjZsiAEx",
	"fsOk4Is6MVRIfy8olsGE2qFiNsvr6HkhRVamlsaUpjPGZxZ3uUhpTi7evqlR9tYAMmcLphW5LEejwz8T",
	"CTmjFr+GdF65VAZZjRyTL788OBz5CD0mZ5IF46WGL7/EX5pwc6BAQvxrKZVhzxwk5SmMiZoLqYkq2DUo",
	"UhbmOM9H0bkJlXjLQaFdldrzkWFowTNL5Ed5HuCIulrpOSYhCiN6vj8/Pz0jgufLrz1gWnDBt8zURp0z",
	"j4tSGiapAebkoQfW2Zsjs/QJT1GfJtJpXEjpBk2C76WGlKRwOhZThN5QhkotOXyx/xXRcynKmSMbq6ua",
	"JWiOp/pWSMIF3yvlzCyAYLGyCwP+lGiWXkOQtZFRNbeiT7iEJtIj83H+UwkLVi6M9OWKMJ7mZQYkg8xh",
	"7yyn6TVJ55RzyK0g1rcshb0lUJkvCVYHa0hRUEi4YXCLRlXOUnCqp7tYTqUoJANtNKl110kOM5rva5AL",
	"vM/wh5+mVQuEjd4bJJrpvLrS6vsnGSQ3IJW9n0bDg+EoGSR3e7mY4aVJc30Od9q/t6By/fVLlQKt9ieS",
	"8sw+NLPtZVReD9WN1WMMvmjBknHyfDgaPseolZ6jWrBPJ6LUw1+V1UtnoGMRXy0Z3IBrHlKVhaAsN1dF",
	"lVTrs22jot2dfGBE7oJpMmV8BrKQjGsrJbB4CzKfWzIpeZZDo1cJOZ/X9xz2erHWhE3V4WTiEnwMI82B",
	"5kYCzyG9RonsaJFkjM64UJqlSC5GdcHZT7JknHwHGvswYLKt5SiE0+Fo5NUaV3hKiyJ3V8W+B1/d4Gdt",
	"o4fa93bf0VxwgPclGCp8MXoRb21hZJRHR8kr9m6opcn4l3fGAnG+JqP7offO90JJaWGlrtHCB4mmM2UU",
	"3qqY6J0h0VRkcIZqtHn4IcnpBAxZ/lwyZFJIr+0VlBpyNQY6nxm91f6mRCmRe8zvZE+ROteMdXLNaoq8",
	"5Mn9oF7rW9DpnOxOpLhVIJ/Vq/xKb6iFTLjW1Azf3dlsqZ1nl5yQobk9dnclqGfkGyNonxvJonDE7rNw",
	"yERky3pMKrgSOQxzMbNPnn3d2vvpUs8FJ7v+egl2X+CjcOdsgYTqx5oboBLv31R/Hs5Ab3y8AXqMRKm/",
	"ORg9q6cbSsoUvJ8K+d5eALvPLjmy5G41pDp8cv/O0BWqHT7B1wmMJhNVycYfk4u6Gc0RTgpymsWU2F0j",
	"b1TcgK14whznRtmEl2HoO6h5wyUjGwPWdeNqAqDO+3ddwEDpv4ps+WSH75aJ3DcNVi1LuO9A/+DpZBjm",
	"bEdEV21VOY+RlV+jSFUSv6E5y5py7iDaoyZM2K7O2MTjcU8VDOpU6zEZ0vX+B/PPSXZv94IZrx0Uv8K/",
	"OxSHzel++RDrCmdnXNkTbo3T8/5dB50vVjb0sTt/AFzN+OeR8RJozR2UC7R/EJ59VxS+woUmU1HyNsYs",
	"BLHfUE/R0kNwtu+q59BtF2XO13bA50XdYSwXx+wLs6+crfF7Qt0g+VOMib+1wQ8tfNVi7SxpoduBHYVw",
	"4FFhiwVkjGrIlytQbKxcdNeHaG2JE6VKQBvXGcC2o6MtNLPOmMrgqW31tsMNNczqsrXtGtQljxjWOZuC",
	"KignSlTqr9FBDVVkZW7s5NwaZhxuaR7RNTGAsfUF4byZPmLkfQ42yFndamZqq5AF+W2YAv+4dMO6U+Xa",
	"+zksy9nodhpteXrv/2yc3DtXK/U1PPbDmmhscehYX5D4LRnyL8akIMPguvXI4PnOQO8dW8fvOgnQpM1k",
	"ZavRdfdxSFS9AsV5Hx1KmymJK62PhiOtxDQgF3LkWUirlSQo9Xy1CZJevH2zzuL4J0Hf3ypluSFmyOWl",
	"Ufb3vic7x5Yg9wxRjEmbJnf8yIzsfLi0jHWZjC/7WOsyGVxWzIUDA/a6TO6r+VKHSzXUd7plTPyN3tAz",
	"xAbZRStnrS1Eb6mxuNdbRA0o7AzIB7OZBdYvjMmOAeLOwPzJkemYfGhCaGdMdrowusd3AsIakx3n8LHT",
	"GaNpjLXXQ0uobLrcxbWJJQ8zbRyidgJS0Y7ZZg1S+/T+2eCS3z+5Ueaj/d8Qt9WaAMhKCnCDAzogLUIw",
	"+73knq0Do89Jl91nDZvQezrN1bhrp98KzQZN37jjhKbiJV9nLIZGoZtRlHrFNW2lDNWu0jCleQ5yx2Wf",
	"9/TrGZJjd8O66in0bGLhONY34O1+ycGVyOVLguEtUWqbn69KCSQTt1xpCXRRt+ZQWhROc2F8Fr2io86g",
	"iML0RsxmkJk1e9W26m5iCgUfKihFxJh5CzfiuhkgCYJ9n1EyGog6ATX57AJKlHqFhOqVNk8vB1azqefN",
	"B7trCPmCFJItfMMw1c/624Fuc5dQm8ttUm2ft7iU3DM3F5ylNHfZUVJMWQ7R7KKqkqgvNHahYFrmqNVP",
	"hNBKS1oUmEVs3cW2MshG0SUYQRZ377pO0BfKtWh/lArqTtRUQY86WSzb6d6bdFnbQidt5OPEfGShlf0E",
	"ossFC+L5PJ4GnlqObUL3C3hqqZUKroLQ2zdkazG2AC/CVssru1Ja0261WMtP+2llW0QOrRVzjaM/rVfa",
	"TIuWyLJfAXHVVsrVetdZEi6fqFX3G+Y/DclF4c01ZSc4Oj2xGR7qkltPVjf+7HJIrFhkWtUhGyPMKvEl",
	"JLUVqE2RFaRvPcpX0LDQGvLKruBcpyFEQrG1ST7X5jIpkpP2h4ug6Q0MSkYha6Ts2ISx34WvwFKFGXUw",
	"6ssqdPeEuTJoLoFmSwzSrvQSOJJsVqtilNe7+X8H+rCVNA91FSDo0APQz1K/I4eAPezn9ghYghuTnX6Y",
	"7XwKa7/CHlmDvk9gw1eYeRIjvtnzdXU+SBC3Cb6DgWkhYTYGrbMpMTGx/mRFN2x8XC/fic20Ig8s12En",
	"PkUmS+I6f2IU57cSMN/HhXHco1rYbdNb1dDRBstXJY4qL2fxb0o969le2NWrVx6/+4jx9HhP4GhMvep9",
	"aIuU10Z4pb/itw9nrQk6IUOm3Q01r5ZWPvYv7+7fdVIAfJVqGhKgv1r8vBEu2a+Tbtbyi29RDNz8QZHb",
	"uVB1XazNAayL63qioJFUC7+DP5jnP495yBRhYdHdLB/8/4GtAhTXyae+J1s8vN9htmbHytUsZtOu6zcw",
	"m78uMKMx10yXo07qFT8i0UT7dUZo5o09QgCGj4Bxg6xwhfsIKl2LyXBcW/32OLMN4z54xrzf99XEsMIy",
	"R91eEVqJgrrVXrOp0MXbN9YiQp+f7U1CTrhzmjNV54hOYCokGPXHFnwHuQBBD6gqWV8Zepzm4jbiO/Sl",
	"04CjuxI2hup6yH7zk5VWGj3Ulvct//b8sZoG7nGptFgwV2IR9gsMTd1GDfw23f+2MHb72zjeO3v/Ueb9",
	"r+Wi2Ctts7rg+A6P2LBO2Gx1xonLGw1B0G1695h2dI+Ey+p0gWpg0OZyuxvixYougVzooEWmlRcR+WL5",
	"pD24ISpOfL2QHdvsUPB5jHVLvhaPtRx6qN0esA1a75szjrHmP6/LOQ6J30eYP4DrODR810G1HeG3APpA",
	"2rxN7j+VyzySFtAkGrId1dhcgFgG+Baugj7U27cbrgP7p9p/MNjKgdC5+X1zxVUuedeNEu8rV4JIeabm",
	"9BrQDJI0853QilZHQOx7GH46zPtRyPkcLnlVfdLIOggUB8IWVdZAWBAVj0N2tALfW+fzKwW+tq95Gfr9",
	"NXtAYs+g4CK0rYrW9KXc9n5rN0j6w8P/n5MEuK746Gk0BzP4cMXkVb/aKRoqnYxi97Qh6muB8HlDBA2B",
	"Wx3kgUqH2S5qGys5NAwXNALdnzN6EIXDZ48jGICOyc5KcH6aSIJDLVmP248bS+jB05PrB+FX0Xurx1qN",
	"VD6qG2ZVa8aI2D5rtTNUKwOZtrys8nypzsu1cKo/xN4G1X6ne9k6wJ01XviYwOvrwBa78GyGJ+UZmTOl",
	"hcTMsIjP88FFYA1PfmPidXVgK4AfqLKVc35Vfqu1f7ESJdhBtYFIjyMstfcNQNJryIKYALqzXPLIJac9",
	"ngCiwg+yYPStbnbuGmt9jVsIZ6aaZMJcyoZ7EaBO+bYJecHmWfWF9bBgp6sNt1sXfnKFeCuq7bSQfLBT",
	"6qHLrhAzIfhFqVOxgEdHBFZl8W2v6L0Y/aXvW3PYNdzmetQO+HbdWVT3a36dhYCUQra4vAJjg5nx03It",
	"8drrnl7J3FtbrA1Wqb87gLvyjmsDAvzSgG3L1PgwwGoe8mru752XPpq59+B9bMhdElIhsw0qlf97sJen",
	"7ehFWplkD2Gt4AOB8aLqC64+xgWyrnSjRQ034vqhtbfrJu+rhXYFHzQK85VqCgaz+gXVX2HGXDI+JtPt",
	"TZkM+kVW/UT9VwQiKa7eg6aAZ4rQS95IjF2AUnQGjRxXSrQ0L0ly8qpTHlvKKbUieoZZfbaZZCTeFn48",
	"IfkIjrEAHH1Jr5+iTjb2yZGNROfhlmCoqsobYHgbZkDT9JqL2xyyGTTqhf3XGp6wKiH6aYyIpG7tzx5h",
	"EGtOqQwc1olwxgtfoBWRrjbp1ovW+tNpK008fxKXQN1uVvAJXU42sP3ZSlc/qVsJz/rEbqQ/qlCjVaiP",
	"jDx5TD0yPXWT3CNcN5bvdlp1Juw2VOvuOulmrJ3Zrn2dt103vw1meIO9/ly31IWRVeFc4/19bAY4F0qP",
	"X45ejlB1cUKkK8xUYSz7SAOvgWvSFnRNs83V3EdLfGdN+9V+mz0XREnu9hrf3UiqbqzVmO7BfsQOotba",
	"qTODBq1ep2HH0Faf0KDVio2htXfRVLkiW3jFVIqNFmtPm/u+edi+tfW9EbemTzfrLus9fXWaa8/R7Ue/",
	"gh5SwddGJ0ubbzRsNpRR8WP6GSJreaSbE9mmrQ2YRr1ewaKV5th/zrDrLJLf3Z6ms++kKAtLhbxFFD/d",
	"mDfhNto1zpzAvVAZLa535REql10Lon4jaGN0XOGnmyAYe0HF+nTVWwnPGNWr393/vwAAAP//gmqNBnuY",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
